import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-Cf-knFG-.js";const e={},p=t(`<h3 id="_1-promise介绍" tabindex="-1"><a class="header-anchor" href="#_1-promise介绍"><span>1. Promise介绍</span></a></h3><p>romise 是 JavaScript 中用于异步编程的一种解决方案。Promise 可以将异步操作进行封装，并提供了更加灵活和强大的处理方式。</p><p>Promise 有三种状态：</p><ul><li>pending(等待)：初始状态，既不是成功也不是失败状态。</li><li>fulfilled(成功)：意味着操作成功完成，Promise 实例的最终值可通过 then 方法获取到。</li><li>rejected(失败)：意味着操作失败，Promise 实例的最终值可通过 catch 方法获取到。</li></ul><p>Promise 实例可以使用 then、catch 和 finally 方法实现异步操作的链式调用：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onResolved<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span>onFinally<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中：</p><ul><li>then() 方法接受两个函数参数，第一个参数是成功时（fulfilled）执行的函数（可以为空），第二个参数是失败时（rejected）执行的函数（可以为空）。</li><li>catch() 方法仅接收失败时（rejected）执行的函数，通常在 Promise 链式调用中作为最后一个方法使用。</li><li>finally() 方法不论 Promise 是否成功都会执行，通常用于清理工作。</li></ul><p>Promise 也提供了一些静态方法，如：</p><ul><li>Promise.all(iterable)：当所有的 Promise 都成功时返回一个包含所有结果的数组，一旦有任意一个 Promise 失败，则直接 reject 返回。</li><li>Promise.race(iterable)：只要迭代器中的一个 promise 完成，就返回那个 promise 的结果。</li><li>Promise.resolve(value)：返回一个以给定值解析后的 Promise 对象。</li><li>Promise.reject(reason)：返回一个带有拒绝原因的 Promise 对象。</li></ul><p>下面是一个通过 Promise 实现异步操作的示例代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数据获取成功，调用 resolve 并传递数据</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;获取数据失败！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数据获取失败，调用 reject 并传递错误信息</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;获取到的数据为:&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;发生了错误:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，loadData() 函数返回了一个 Promise 对象，并使用 resolve(data) 和 reject(error) 方法来改变 Promise 对象的状态。在 then() 方法中，可以接收到 resolve 传递的数据或者在 catch() 方法中接收到 reject 传递的错误信息。</p><p>这是 Promise 的简单介绍和使用示例。Promise 在异步编程中起到至关重要的作用，它使得异步代码更加清晰、可读性更高，并且能够更加灵活地处理异步操作。</p><h3 id="_2-使用" tabindex="-1"><a class="header-anchor" href="#_2-使用"><span>2. 使用</span></a></h3><p>平时发送请求使用<code>getxxx().then(res=&gt;{})</code>这里的then其实是传递了一个参数，就是解析成功的回掉函数onResolved，第二个onRejected回掉函数省略了。</p><p>在一个完成的写法里面如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onResolved<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span>onFinally<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当遇到错误时，如果有onRejected参数，则onRejected回掉函数会处理异常，catch可能就不会执行了，当然如果你在onRejected有错误，catch依然会捕获。</p><h3 id="_3-promise中使用then和await的区别" tabindex="-1"><a class="header-anchor" href="#_3-promise中使用then和await的区别"><span>3. promise中使用then和await的区别</span></a></h3><p>在 Promise 中使用 then 和 await 都是用于处理异步操作并等待其结果，但它们之间有一些区别。</p><ol><li>使用 then：</li></ol><ul><li>then 是 Promise 的原生方法，用于注册回调函数来处理异步操作的结果。</li><li>then 方法返回一个新的 Promise 对象，可以继续进行链式调用。</li><li>then 方法接收两个参数：onResolved 和 onRejected，分别用于处理 Promise 成功和失败的情况。</li><li>then 方法中的回调函数会在 Promise 状态发生改变时被调用，可以处理异步操作的成功或失败结果。</li><li>then 方法无法直接使用 await 来等待异步操作的结果，需要配合 async/await 使用。</li></ul><ol start="2"><li>使用 await：</li></ol><ul><li>await 是 ES2017 引入的关键字，只能在异步函数（async function）中使用。</li><li>在异步函数中，可以使用 await 来暂停代码的执行，等待一个 Promise 对象的解析结果。</li><li>使用 await 可以使代码看起来更像是同步的线性代码，而不需要显式地使用 then 方法来处理异步操作的结果。</li><li>使用 await 时，其后面必须是一个 Promise 对象，并且 await 表达式会返回该 Promise 的解析结果。</li><li>在使用 await 等待 Promise 的过程中，当前函数的执行会被暂停，直到 Promise 解析完成并返回结果。</li></ul><p>以下是使用 then 和 await 的示例代码进行对比：</p><p>使用 then：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理异步操作成功的结果</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理异步操作失败的结果</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 await：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> promise<span class="token punctuation">;</span>
    <span class="token comment">// 处理异步操作成功的结果</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理异步操作失败的结果</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，使用 <code>then</code> 方法时，需要通过回调函数来处理异步操作的结果。而使用 <code>await</code> 时，可以将异步操作的结果直接赋给一个变量，并在 <code>try/catch</code> 语句中处理成功或失败的情况。</p><p>需要注意的是，await 只能在异步函数中使用，所以在使用 <code>await</code> 时，需要将它放在一个异步函数内部（如上述示例中的 <code>async function fetchData()）</code>。</p><h4 id="_4-如果我有多个异步请求-要求每个异步请求顺序执行-该如何做" tabindex="-1"><a class="header-anchor" href="#_4-如果我有多个异步请求-要求每个异步请求顺序执行-该如何做"><span>4. 如果我有多个异步请求，要求每个异步请求顺序执行，该如何做</span></a></h4><p>有2个方法</p><ol><li><p>使用await</p><p>在每个强求前添加await同步执行</p></li><li><p>使用then,在then的成功回掉函数中，添加下一个请求</p></li></ol>`,35),o=[p];function i(c,l){return s(),a("div",null,o)}const d=n(e,[["render",i],["__file","promise.html.vue"]]),k=JSON.parse('{"path":"/frontweb/es6/promise.html","title":"Promise介绍","lang":"zh-CN","frontmatter":{"title":"Promise介绍","date":"2023-09-13T00:00:00.000Z","isOriginal":true,"description":"1. Promise介绍 romise 是 JavaScript 中用于异步编程的一种解决方案。Promise 可以将异步操作进行封装，并提供了更加灵活和强大的处理方式。 Promise 有三种状态： pending(等待)：初始状态，既不是成功也不是失败状态。 fulfilled(成功)：意味着操作成功完成，Promise 实例的最终值可通过 the...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/frontweb/es6/promise.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"Promise介绍"}],["meta",{"property":"og:description","content":"1. Promise介绍 romise 是 JavaScript 中用于异步编程的一种解决方案。Promise 可以将异步操作进行封装，并提供了更加灵活和强大的处理方式。 Promise 有三种状态： pending(等待)：初始状态，既不是成功也不是失败状态。 fulfilled(成功)：意味着操作成功完成，Promise 实例的最终值可通过 the..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-22T03:45:12.000Z"}],["meta",{"property":"article:author","content":"ChenSino"}],["meta",{"property":"article:published_time","content":"2023-09-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-22T03:45:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Promise介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-22T03:45:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChenSino\\",\\"url\\":\\"https://ChenSino.github.io\\"}]}"]]},"headers":[{"level":3,"title":"1. Promise介绍","slug":"_1-promise介绍","link":"#_1-promise介绍","children":[]},{"level":3,"title":"2. 使用","slug":"_2-使用","link":"#_2-使用","children":[]},{"level":3,"title":"3. promise中使用then和await的区别","slug":"_3-promise中使用then和await的区别","link":"#_3-promise中使用then和await的区别","children":[]}],"git":{"createdTime":1694572113000,"updatedTime":1711079112000,"contributors":[{"name":"ChenSino","email":"462488588@qq.com","commits":2}]},"readingTime":{"minutes":4.59,"words":1377},"filePathRelative":"frontweb/es6/promise.md","localizedDate":"2023年9月13日","excerpt":"<h3>1. Promise介绍</h3>\\n<p>romise 是 JavaScript 中用于异步编程的一种解决方案。Promise 可以将异步操作进行封装，并提供了更加灵活和强大的处理方式。</p>\\n<p>Promise 有三种状态：</p>\\n<ul>\\n<li>pending(等待)：初始状态，既不是成功也不是失败状态。</li>\\n<li>fulfilled(成功)：意味着操作成功完成，Promise 实例的最终值可通过 then 方法获取到。</li>\\n<li>rejected(失败)：意味着操作失败，Promise 实例的最终值可通过 catch 方法获取到。</li>\\n</ul>\\n<p>Promise 实例可以使用 then、catch 和 finally 方法实现异步操作的链式调用：</p>","autoDesc":true}');export{d as comp,k as data};

import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as p}from"./app-DaXuKV75.js";const t={},e=p(`<h2 id="springmvc处理请求的流程" tabindex="-1"><a class="header-anchor" href="#springmvc处理请求的流程"><span>SpringMVC处理请求的流程</span></a></h2><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230625180034.png" alt="20230625180034"></p><h2 id="前端控制器源码" tabindex="-1"><a class="header-anchor" href="#前端控制器源码"><span>前端控制器源码</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
  <span class="token class-name">HttpServletRequest</span> processedRequest <span class="token operator">=</span> request<span class="token punctuation">;</span>
  <span class="token class-name">HandlerExecutionChain</span> mappedHandler <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">boolean</span> multipartRequestParsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token class-name">WebAsyncManager</span> asyncManager <span class="token operator">=</span> <span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">try</span> <span class="token punctuation">{</span>
   <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
   <span class="token class-name">Exception</span> dispatchException <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

   <span class="token keyword">try</span> <span class="token punctuation">{</span>
    processedRequest <span class="token operator">=</span> <span class="token function">checkMultipart</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    multipartRequestParsed <span class="token operator">=</span> <span class="token punctuation">(</span>processedRequest <span class="token operator">!=</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Determine handler for the current request.</span>
    mappedHandler <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token function">noHandlerFound</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Determine handler adapter for the current request.</span>
    <span class="token class-name">HandlerAdapter</span> ha <span class="token operator">=</span> <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span>mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Process last-modified header, if supported by the handler.</span>
    <span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> isGet <span class="token operator">=</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isGet <span class="token operator">||</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">HEAD</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">long</span> lastModified <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">getLastModified</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletWebRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkNotModified</span><span class="token punctuation">(</span>lastModified<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isGet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mappedHandler<span class="token punctuation">.</span><span class="token function">applyPreHandle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Actually invoke the handler.</span>
    mv <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>asyncManager<span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">applyDefaultViewName</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mappedHandler<span class="token punctuation">.</span><span class="token function">applyPostHandle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dispatchException <span class="token operator">=</span> ex<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// As of 4.3, we&#39;re processing Errors thrown from handler methods as well,</span>
    <span class="token comment">// making them available for @ExceptionHandler methods and other scenarios.</span>
    dispatchException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span><span class="token string">&quot;Handler dispatch failed: &quot;</span> <span class="token operator">+</span> err<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token function">processDispatchResult</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span> mv<span class="token punctuation">,</span> dispatchException<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
        <span class="token comment">//无关代码省略。。。。。</span>
 <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="步骤1-客户端发起请求-请求到达前端控制器" tabindex="-1"><a class="header-anchor" href="#步骤1-客户端发起请求-请求到达前端控制器"><span>步骤1 客户端发起请求，请求到达前端控制器</span></a></h3><p>下图可以看到前端控制器本质也就是一个Servlet</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230625180443.png" alt="20230625180443"></p><h3 id="步骤2-根据请求获取handlermethod" tabindex="-1"><a class="header-anchor" href="#步骤2-根据请求获取handlermethod"><span>步骤2. 根据请求获取HandlerMethod</span></a></h3><p>在流程示意图上第二步指向了HandlerMapping,对应以下源码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token comment">// Determine handler for the current request.</span>
    mappedHandler <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在getHandler方法里面如下，这一步是根据request请求对象获取HandlerMethod,然后包装在HandlerExecutionChain对象里，这里有个<code>handlerMappings</code>，是因为在SpringMVC中有多种请求处理的逻辑，比如<code>RequestMappingHandlerMapping</code>是专门负责处理被<code>@RequestMapping</code>注解的处理器，这个是我们平时最常用的那种方式。其他的HandlerMapping，比如BeanNameUrlHandlerMapping负责处理和Controller同名的请求，使用这种，需要继承Controller接口，重写里面的方法，具体的使用方式自行百度。 再比如<code>WebMvcEndpointHandlerMapping</code>是springboot提供的actator监控服务，它自带了一点监控端点，当引入了actuator监控时就可以看它负责处理以下url： <img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230626093758.png" alt="20230626093758"></p><p>所以这里总结以下，HandlerMapping是有多个，不同的实现负责处理不同的url,RequestMappingHandlerMapping负责处理有@RequestMapping注解的url,WebMvcEndpointHandlerMapping处理监控请求，<code>mappedHandler = getHandler(processedRequest);</code>这个方法就是从SpringMVC众多HandlerMapping中选择适配的HandlerMapping,然后通过这个HandlerMapping和request中的url获取HandlerMethod,封装在HandlerExecutionChain对象中，HandlerMethod可以去看它的注释，它就是包含了一些映射信息，比如这个请求以后会被哪个bean处理，被这个bean的哪个方法处理，以及请求参数等</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">HandlerExecutionChain</span> <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HandlerMapping</span> mapping <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">HandlerExecutionChain</span> handler <span class="token operator">=</span> mapping<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> handler<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="步骤3-获取handleradapter" tabindex="-1"><a class="header-anchor" href="#步骤3-获取handleradapter"><span>步骤3 获取HandlerAdapter</span></a></h2><p>对应代码如下，从HandlerExecutionChain对象（mappedHandler）中通过getHandler方法获取对应HandlerAdapter对象</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Determine handler adapter for the current request.</span>
    <span class="token class-name">HandlerAdapter</span> ha <span class="token operator">=</span> <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span>mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>HandlerAdapter有以下几个</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230625194052.png" alt="20230625194052"></p><h2 id="步骤4-通过handleradapter真正调用业务处理逻辑" tabindex="-1"><a class="header-anchor" href="#步骤4-通过handleradapter真正调用业务处理逻辑"><span>步骤4 通过HandlerAdapter真正调用业务处理逻辑</span></a></h2><p>这里业务处理逻辑，如果我们使用的<code>@RequestMapping</code>注解，则就是调用我们对应的Controller方法中的代码，如果是其他的方式处理的请求，比如继承Controller接口，则调用的就是Controler接口中的handleRequest方法，所以这是经典的适配器模式。</p><p>处理完了要返回ModelAndView,如果适配到RequestMappingHandlerAdapter就有机会返回ModelAndView对象，其他的适配器一般都是返回null</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230625195520.png" alt="20230625195520"></p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230625195531.png" alt="20230625195531"></p><h2 id="步骤5-渲染页面" tabindex="-1"><a class="header-anchor" href="#步骤5-渲染页面"><span>步骤5 渲染页面</span></a></h2><p>对应代码如下<code>processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</code>,processDispatchResult方法代码如下</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processDispatchResult</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>
   <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">HandlerExecutionChain</span> mappedHandler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndView</span> mv<span class="token punctuation">,</span>
   <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

  <span class="token keyword">boolean</span> errorView <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">ModelAndViewDefiningException</span> mavDefiningException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;ModelAndViewDefiningException encountered&quot;</span><span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mv <span class="token operator">=</span> mavDefiningException<span class="token punctuation">.</span><span class="token function">getModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mv <span class="token operator">=</span> <span class="token function">processHandlerException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>
    errorView <span class="token operator">=</span> <span class="token punctuation">(</span>mv <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Did the handler return a view to render?</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>mv <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mv<span class="token punctuation">.</span><span class="token function">wasCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//如果mv不是空渲染视图</span>
   <span class="token function">render</span><span class="token punctuation">(</span>mv<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>errorView<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">clearErrorRequestAttributes</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;No view rendering, null ModelAndView returned.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// Concurrent handling started during a forward</span>
   <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// Exception (if any) is already handled..</span>
   mappedHandler<span class="token punctuation">.</span><span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>



## chatGPT问答

<span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>markdown
# <span class="token class-name">HandlerMapping</span>为什么有多个？

<span class="token class-name">Spring</span> <span class="token constant">MVC</span>中有多个<span class="token class-name">HandlerMapping</span>是为了支持不同的<span class="token constant">URL</span>映射策略。每个<span class="token class-name">HandlerMapping</span>实现都有自己的<span class="token constant">URL</span>映射策略，可以根据具体的需求选择使用不同的<span class="token class-name">HandlerMapping</span>实现。例如，<span class="token class-name">BeanNameUrlHandlerMapping</span>将请求<span class="token constant">URL</span>映射到bean名称，这个bean名称就是处理请求的controller类名；而<span class="token class-name">RequestMappingHandlerMapping</span>将请求<span class="token constant">URL</span>映射到带有<span class="token annotation punctuation">@RequestMapping</span>注解的方法。因此，<span class="token class-name">Spring</span> <span class="token constant">MVC</span>中有多个<span class="token class-name">HandlerMapping</span>是为了提供更灵活的<span class="token constant">URL</span>映射策略，以满足不同的需求。希望这能回答你的问题。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),o=[e];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","SpringMVC.html.vue"]]),k=JSON.parse(`{"path":"/java/framework/spring/SpringMVC.html","title":"SpringMVC基本原理","lang":"zh-CN","frontmatter":{"title":"SpringMVC基本原理","date":"2023-06-25T00:00:00.000Z","isOriginal":true,"description":"SpringMVC处理请求的流程 20230625180034 前端控制器源码 步骤1 客户端发起请求，请求到达前端控制器 下图可以看到前端控制器本质也就是一个Servlet 20230625180443 步骤2. 根据请求获取HandlerMethod 在流程示意图上第二步指向了HandlerMapping,对应以下源码： 在getHandler方法...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/java/framework/spring/SpringMVC.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"SpringMVC基本原理"}],["meta",{"property":"og:description","content":"SpringMVC处理请求的流程 20230625180034 前端控制器源码 步骤1 客户端发起请求，请求到达前端控制器 下图可以看到前端控制器本质也就是一个Servlet 20230625180443 步骤2. 根据请求获取HandlerMethod 在流程示意图上第二步指向了HandlerMapping,对应以下源码： 在getHandler方法..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230625180034.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-22T03:45:12.000Z"}],["meta",{"property":"article:author","content":"ChenSino"}],["meta",{"property":"article:published_time","content":"2023-06-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-22T03:45:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringMVC基本原理\\",\\"image\\":[\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230625180034.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230625180443.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230626093758.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230625194052.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230625195520.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230625195531.png\\"],\\"datePublished\\":\\"2023-06-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-22T03:45:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChenSino\\",\\"url\\":\\"https://ChenSino.github.io\\"}]}"]]},"headers":[{"level":2,"title":"SpringMVC处理请求的流程","slug":"springmvc处理请求的流程","link":"#springmvc处理请求的流程","children":[]},{"level":2,"title":"前端控制器源码","slug":"前端控制器源码","link":"#前端控制器源码","children":[{"level":3,"title":"步骤1 客户端发起请求，请求到达前端控制器","slug":"步骤1-客户端发起请求-请求到达前端控制器","link":"#步骤1-客户端发起请求-请求到达前端控制器","children":[]},{"level":3,"title":"步骤2. 根据请求获取HandlerMethod","slug":"步骤2-根据请求获取handlermethod","link":"#步骤2-根据请求获取handlermethod","children":[]}]},{"level":2,"title":"步骤3  获取HandlerAdapter","slug":"步骤3-获取handleradapter","link":"#步骤3-获取handleradapter","children":[]},{"level":2,"title":"步骤4 通过HandlerAdapter真正调用业务处理逻辑","slug":"步骤4-通过handleradapter真正调用业务处理逻辑","link":"#步骤4-通过handleradapter真正调用业务处理逻辑","children":[]},{"level":2,"title":"步骤5 渲染页面","slug":"步骤5-渲染页面","link":"#步骤5-渲染页面","children":[]}],"git":{"createdTime":1687852604000,"updatedTime":1711079112000,"contributors":[{"name":"ChenSino","email":"462488588@qq.com","commits":2}]},"readingTime":{"minutes":3.79,"words":1137},"filePathRelative":"java/framework/spring/SpringMVC.md","localizedDate":"2023年6月25日","excerpt":"<h2>SpringMVC处理请求的流程</h2>\\n<p><img src=\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230625180034.png\\" alt=\\"20230625180034\\"></p>\\n<h2>前端控制器源码</h2>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code>\\n<span class=\\"token keyword\\">protected</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">doDispatch</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">HttpServletRequest</span> request<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">HttpServletResponse</span> response<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token class-name\\">HttpServletRequest</span> processedRequest <span class=\\"token operator\\">=</span> request<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token class-name\\">HandlerExecutionChain</span> mappedHandler <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">boolean</span> multipartRequestParsed <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token class-name\\">WebAsyncManager</span> asyncManager <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">WebAsyncUtils</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getAsyncManager</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n   <span class=\\"token class-name\\">ModelAndView</span> mv <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token class-name\\">Exception</span> dispatchException <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n\\n   <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n    processedRequest <span class=\\"token operator\\">=</span> <span class=\\"token function\\">checkMultipart</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    multipartRequestParsed <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>processedRequest <span class=\\"token operator\\">!=</span> request<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// Determine handler for the current request.</span>\\n    mappedHandler <span class=\\"token operator\\">=</span> <span class=\\"token function\\">getHandler</span><span class=\\"token punctuation\\">(</span>processedRequest<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>mappedHandler <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n     <span class=\\"token function\\">noHandlerFound</span><span class=\\"token punctuation\\">(</span>processedRequest<span class=\\"token punctuation\\">,</span> response<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n     <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// Determine handler adapter for the current request.</span>\\n    <span class=\\"token class-name\\">HandlerAdapter</span> ha <span class=\\"token operator\\">=</span> <span class=\\"token function\\">getHandlerAdapter</span><span class=\\"token punctuation\\">(</span>mappedHandler<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getHandler</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// Process last-modified header, if supported by the handler.</span>\\n    <span class=\\"token class-name\\">String</span> method <span class=\\"token operator\\">=</span> request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getMethod</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">boolean</span> isGet <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">HttpMethod</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">GET</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">matches</span><span class=\\"token punctuation\\">(</span>method<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>isGet <span class=\\"token operator\\">||</span> <span class=\\"token class-name\\">HttpMethod</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">HEAD</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">matches</span><span class=\\"token punctuation\\">(</span>method<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n     <span class=\\"token keyword\\">long</span> lastModified <span class=\\"token operator\\">=</span> ha<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getLastModified</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">,</span> mappedHandler<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getHandler</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n     <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ServletWebRequest</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">,</span> response<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">checkNotModified</span><span class=\\"token punctuation\\">(</span>lastModified<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;&amp;</span> isGet<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n     <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>mappedHandler<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">applyPreHandle</span><span class=\\"token punctuation\\">(</span>processedRequest<span class=\\"token punctuation\\">,</span> response<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n     <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// Actually invoke the handler.</span>\\n    mv <span class=\\"token operator\\">=</span> ha<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">handle</span><span class=\\"token punctuation\\">(</span>processedRequest<span class=\\"token punctuation\\">,</span> response<span class=\\"token punctuation\\">,</span> mappedHandler<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getHandler</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>asyncManager<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isConcurrentHandlingStarted</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n     <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token function\\">applyDefaultViewName</span><span class=\\"token punctuation\\">(</span>processedRequest<span class=\\"token punctuation\\">,</span> mv<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    mappedHandler<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">applyPostHandle</span><span class=\\"token punctuation\\">(</span>processedRequest<span class=\\"token punctuation\\">,</span> response<span class=\\"token punctuation\\">,</span> mv<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token punctuation\\">}</span>\\n   <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Exception</span> ex<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    dispatchException <span class=\\"token operator\\">=</span> ex<span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token punctuation\\">}</span>\\n   <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Throwable</span> err<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// As of 4.3, we're processing Errors thrown from handler methods as well,</span>\\n    <span class=\\"token comment\\">// making them available for @ExceptionHandler methods and other scenarios.</span>\\n    dispatchException <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ServletException</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Handler dispatch failed: \\"</span> <span class=\\"token operator\\">+</span> err<span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token punctuation\\">}</span>\\n   <span class=\\"token function\\">processDispatchResult</span><span class=\\"token punctuation\\">(</span>processedRequest<span class=\\"token punctuation\\">,</span> response<span class=\\"token punctuation\\">,</span> mappedHandler<span class=\\"token punctuation\\">,</span> mv<span class=\\"token punctuation\\">,</span> dispatchException<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">//无关代码省略。。。。。</span>\\n <span class=\\"token punctuation\\">}</span>\\n\\n</code></pre></div>","autoDesc":true}`);export{d as comp,k as data};

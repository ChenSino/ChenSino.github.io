import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-COSs6b7v.js";const e={},p=t(`<div class="hint-container caution"><p class="hint-container-title">注意</p><p>网上很难精准找到一个前后端分离项目自定义Token认证的教程，找了很久终于找到，特此记录</p></div><h2 id="_1、security配置注意事项" tabindex="-1"><a class="header-anchor" href="#_1、security配置注意事项"><span>1、Security配置注意事项</span></a></h2><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code><span class="token list punctuation">1.</span> 我在很多教程中都看到他们有讲解自定义登录页面，但是我想说的是，都21世纪了，早都前后分离了，
   所以在Security配置中不要配置formLogin了，前后分离项目会直接在Controller自定义登录逻辑，
   一旦配置这个万一Security会自动生成表单登录那几个过滤器。这里重点强调一下，前后分离项目和前
   后不分离在Security中是大大的不一样！！大家学习的时候关键词检索要记得加上前后分离！！

<span class="token list punctuation">2.</span> 配置自定义过滤器，自定义过滤器用来处理请求，识别请求中是否有我们自定义的合法token,当然合不合法就要在过滤器的doFilter中自己写了。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">SecurityFilterChain</span> <span class="token function">webSiteSecurityFilterChain</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> http
                <span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span>tokenAuthenticationFilter<span class="token punctuation">,</span> <span class="token class-name">UsernamePasswordAuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">mvcMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/login/phone&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//剩下所有的请求</span>
                <span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 所有请求都必须要认证才可以访问</span>

                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 禁用csrf</span>
                <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 启用表单登录</span>
<span class="token comment">//                .formLogin()</span>
<span class="token comment">//                .permitAll()</span>
<span class="token comment">//                .and()</span>
                <span class="token comment">// 异常处理</span>
                <span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">authenticationEntryPoint</span><span class="token punctuation">(</span>customAuthenticationEntryPoint<span class="token punctuation">)</span>

                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//                .authenticationProvider(customMobileAuthenticationProvider)</span>
<span class="token comment">//                .authenticationProvider(new DaoAuthenticationProvider())</span>
                <span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">.</span><span class="token constant">STATELESS</span><span class="token punctuation">)</span> <span class="token comment">//禁止生成session,也不会向客户端返回session</span>
                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>

## <span class="token number">2</span>、自定义登录逻辑

<span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>java
<span class="token comment">//Controller</span>
   <span class="token annotation punctuation">@PostMapping</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">SysUser</span> sysUser<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> loginService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//Service</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">SysUser</span> sysUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//TODO 重复登录逻辑</span>

        <span class="token comment">//构造一个未认证的对象</span>
        <span class="token class-name">UsernamePasswordAuthenticationToken</span> usernamePasswordAuthenticationToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sysUser<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//1. 使用AuthenticationManager认证用户</span>
        <span class="token class-name">Authentication</span> authenticate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>

            authenticate <span class="token operator">=</span> authenticationManager<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>usernamePasswordAuthenticationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//2. 认证失败</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;认证失败，{}&quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//3. 认证通过，生成token,key-&gt;token,value-&gt;username</span>
        <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">fastUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CustomSecurityUser</span> customSecurityUser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CustomSecurityUser</span><span class="token punctuation">)</span> authenticate<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//4. token存入redis</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">CacheConst</span><span class="token punctuation">.</span><span class="token constant">TOKEN_PREFIX</span> <span class="token operator">+</span> <span class="token class-name">StrPool</span><span class="token punctuation">.</span><span class="token constant">COLON</span> <span class="token operator">+</span> token<span class="token punctuation">,</span> customSecurityUser<span class="token punctuation">,</span> expiration<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;access_token&quot;</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
        data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;authorities&quot;</span><span class="token punctuation">,</span> authenticate<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、自定义过滤器" tabindex="-1"><a class="header-anchor" href="#_3、自定义过滤器"><span>3、自定义过滤器</span></a></h2><div class="hint-container note"><p class="hint-container-title">提示</p><pre><code>在过滤器中把token转换为Authentication并且设置到SecurityContext，设置到上下文后，后续的过滤器中就可以直接使用，
要注意过滤器的设置位置，在Security的配置类中把自定义过滤器放在UsernamePasswordAuthenticationFilter之前
</code></pre></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenAuthenticationFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">{</span>
   <span class="token annotation punctuation">@Autowired</span>
   <span class="token keyword">private</span> <span class="token class-name">IGlobalCache</span> redisTemplate<span class="token punctuation">;</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
       <span class="token comment">//1. 解析token</span>
       <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;X-token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">//2. token不存在直接放行，后续的FilterInterceptor会校验权限，没有权限依然无法访问接口</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">return</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token comment">//3. 根据token查询用户信息，目标是设置SecurityContext</span>
       <span class="token class-name">CustomSecurityUser</span> customSecurityUser <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CacheConst</span><span class="token punctuation">.</span><span class="token constant">TOKEN_PREFIX</span> <span class="token operator">+</span> <span class="token class-name">StrPool</span><span class="token punctuation">.</span><span class="token constant">COLON</span> <span class="token operator">+</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>customSecurityUser<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token class-name">UsernamePasswordAuthenticationToken</span> usernamePasswordAuthenticationToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>customSecurityUser<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> customSecurityUser<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> customSecurityUser<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>usernamePasswordAuthenticationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>

       filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","CustomTokenAuthentication.html.vue"]]),d=JSON.parse('{"path":"/java/framework/security/CustomTokenAuthentication.html","title":"前后分离项目自定义token认证","lang":"zh-CN","frontmatter":{"title":"前后分离项目自定义token认证","date":"2022-12-22T00:00:00.000Z","author":"chensino","keys":null,"description":"注意 网上很难精准找到一个前后端分离项目自定义Token认证的教程，找了很久终于找到，特此记录 1、Security配置注意事项 3、自定义过滤器 提示","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/blog/java/framework/security/CustomTokenAuthentication.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"前后分离项目自定义token认证"}],["meta",{"property":"og:description","content":"注意 网上很难精准找到一个前后端分离项目自定义Token认证的教程，找了很久终于找到，特此记录 1、Security配置注意事项 3、自定义过滤器 提示"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-22T03:45:12.000Z"}],["meta",{"property":"article:author","content":"chensino"}],["meta",{"property":"article:published_time","content":"2022-12-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-22T03:45:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前后分离项目自定义token认证\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-12-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-22T03:45:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"chensino\\"}]}"]]},"headers":[{"level":2,"title":"1、Security配置注意事项","slug":"_1、security配置注意事项","link":"#_1、security配置注意事项","children":[]},{"level":2,"title":"3、自定义过滤器","slug":"_3、自定义过滤器","link":"#_3、自定义过滤器","children":[]}],"git":{"createdTime":1671717191000,"updatedTime":1711079112000,"contributors":[{"name":"ChenSino","email":"462488588@qq.com","commits":1},{"name":"ChenSino","email":"chenxk@sonoscape.net","commits":1},{"name":"chenkun","email":"462488588@qq.com","commits":1}]},"readingTime":{"minutes":2.32,"words":696},"filePathRelative":"java/framework/security/CustomTokenAuthentication.md","localizedDate":"2022年12月22日","excerpt":"<div class=\\"hint-container caution\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>网上很难精准找到一个前后端分离项目自定义Token认证的教程，找了很久终于找到，特此记录</p>\\n</div>\\n<h2>1、Security配置注意事项</h2>\\n<div class=\\"language-markdown\\" data-ext=\\"md\\" data-title=\\"md\\"><pre class=\\"language-markdown\\"><code><span class=\\"token list punctuation\\">1.</span> 我在很多教程中都看到他们有讲解自定义登录页面，但是我想说的是，都21世纪了，早都前后分离了，\\n   所以在Security配置中不要配置formLogin了，前后分离项目会直接在Controller自定义登录逻辑，\\n   一旦配置这个万一Security会自动生成表单登录那几个过滤器。这里重点强调一下，前后分离项目和前\\n   后不分离在Security中是大大的不一样！！大家学习的时候关键词检索要记得加上前后分离！！\\n\\n<span class=\\"token list punctuation\\">2.</span> 配置自定义过滤器，自定义过滤器用来处理请求，识别请求中是否有我们自定义的合法token,当然合不合法就要在过滤器的doFilter中自己写了。\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};

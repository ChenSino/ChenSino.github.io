import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as l,c as o,a as n,b as s,d as e,e as c}from"./app-Cf-knFG-.js";const i={},r=n("h2",{id:"_1、tcp-ip与osi的关系",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1、tcp-ip与osi的关系"},[n("span",null,"1、TCP/IP与OSI的关系")])],-1),u={href:"https://cloud.tencent.com/developer/article/2003231",target:"_blank",rel:"noopener noreferrer"},m=c(`<p>TCP(Transport Control Protocol)传输控制协议</p><p>IP(Internetworking Protocol)网间网协议</p><p>UDP(User Datagram Protocol)用户数据报协议</p><p>ICMP(Internet Control Message Protocol)互联网控制信息协议</p><p>SMTP(Simple Mail Transfer Protocol)简单邮件传输协议</p><p>SNMP(Simple Network manage Protocol)简单网络管理协议</p><p>FTP(File Transfer Protocol)文件传输协议</p><p>ARP(Address Resolation Protocol)地址解析协议</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230130104228.png" alt="20230130104228"></p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230130103942.png" alt="20230130103942"></p><h2 id="_2、tcp-ip" tabindex="-1"><a class="header-anchor" href="#_2、tcp-ip"><span>2、TCP/IP</span></a></h2><p>完整的osi七层模型，在tcp/ip中被简化为了4层模型，其中应用层、表示层、会话层被压缩成了一个应用层，数据链路层、物理层被压缩为数据链路层。</p><div class="language-mermaid line-numbers-mode" data-ext="mermaid" data-title="mermaid"><pre class="language-mermaid"><code><span class="token keyword">flowchart</span> LR
    应用层 <span class="token arrow operator">--&gt;</span> 传输控制层 <span class="token arrow operator">--&gt;</span> 网络层 <span class="token arrow operator">--&gt;</span> 链路层
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-应用层" tabindex="-1"><a class="header-anchor" href="#_2-1-应用层"><span>2.1 应用层</span></a></h3><p>应用层顾名思义退就是和应用相关，既然和应用相关，那么不同应用肯定就不一样，这一部分的东西需要自定义，就是程序员需要实现的，比如HTTP、FTP、SMTP、NFS等。既然是互联网应用，数据传输肯定得有双方，就是我们说的客户端应用、服务端应用，而应用层这里就是制定客户端和服务端交互的规范，说白了就是保证客户端发的东西服务端能识别，服务端发的东西客户端也能识别。以http为例，http中就制定了请求行、请求体、请求头等，发送的时候必须有这些东西，服务端才能够解析，而相应的服务端响应时也得有对应的东西，这样客户端才能够解析出响应信息。这里只是制定规范，真正的传输还要用到后面的tcp,所以通常说http是基于tcp，就是这个道理。</p><h3 id="_2-2-传输控制层-tcp-不讲udp" tabindex="-1"><a class="header-anchor" href="#_2-2-传输控制层-tcp-不讲udp"><span>2.2 传输控制层（TCP，不讲UDP）</span></a></h3><blockquote><p>关键词： 可靠性、三次握手四次挥手、拆包</p></blockquote><p>tcp负责建立连接，断开连接，控制数据包大小等，建立连接就是常说的三次握手四次挥手。建立连接的过程分为3步：</p><ol><li>客户端发送连接请求的标识符SYN</li><li>服务端回复SYN+ACK</li><li>客户端回复ACK</li></ol><p>具体的交互可以使用抓包工具wireshark查看，或者使用tcpdump命令行工具。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 先打开监听</span>
<span class="token function">sudo</span> tcpdump <span class="token parameter variable">-nn</span> <span class="token parameter variable">-i</span> <span class="token operator">&lt;</span>网卡<span class="token operator">&gt;</span> port <span class="token number">80</span>
<span class="token comment"># 访问baidu，端口80</span>
<span class="token function">curl</span> https://www.baidu.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[S]： SYN --------发送建立连接请求标志 [.]: ACK-----点代表ACK [P]： ---------发送</p><p>如下前三行就是三次握手过程，注意看握手成功后，每次客户端给服务端发消息，服务端都会给客户端回复一个[.]，代表确认，这就是为什么说tcp是可靠的连接，反过来也一样，服务端给客户端响应消息，客户端也会回复 一个[.]， 注意看，服务端给客户端发消息时，分了好几次，这就是控制数据包，不是说一次性把所有的数据都返回到客户端，这个大小是受到网卡控制的，体现了tcp对数据包大小的“控制”，</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#客户端发送连接SYN</span>
<span class="token number">11</span>:13:07.566166 IP <span class="token number">192.168</span>.189.36.48460 <span class="token operator">&gt;</span> <span class="token number">14.215</span>.177.38.80: Flags <span class="token punctuation">[</span>S<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">889820627</span>, win <span class="token number">64240</span>, options <span class="token punctuation">[</span>mss <span class="token number">1460</span>,sackOK,TS val <span class="token number">412117082</span> ecr <span class="token number">0</span>,nop,wscale <span class="token number">7</span><span class="token punctuation">]</span>, length <span class="token number">0</span>
<span class="token comment">#服务端回复SYN+ACK</span>
<span class="token number">11</span>:13:07.609539 IP <span class="token number">14.215</span>.177.38.80 <span class="token operator">&gt;</span> <span class="token number">192.168</span>.189.36.48460: Flags <span class="token punctuation">[</span>S.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">4077951874</span>, ack <span class="token number">889820628</span>, win <span class="token number">8192</span>, options <span class="token punctuation">[</span>mss <span class="token number">1380</span>,sackOK,nop,nop,nop,nop,nop,nop,nop,nop,nop,nop,nop,wscale <span class="token number">5</span><span class="token punctuation">]</span>, length <span class="token number">0</span>
<span class="token comment">#客户端回复ACK连接建立成功</span>
<span class="token number">11</span>:13:07.609598 IP <span class="token number">192.168</span>.189.36.48460 <span class="token operator">&gt;</span> <span class="token number">14.215</span>.177.38.80: Flags <span class="token punctuation">[</span>.<span class="token punctuation">]</span>, ack <span class="token number">1</span>, win <span class="token number">502</span>, length <span class="token number">0</span>


<span class="token comment">#客户端正式发送GET请求</span>
<span class="token number">11</span>:13:07.609870 IP <span class="token number">192.168</span>.189.36.48460 <span class="token operator">&gt;</span> <span class="token number">14.215</span>.177.38.80: Flags <span class="token punctuation">[</span>P.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">1</span>:78, ack <span class="token number">1</span>, win <span class="token number">502</span>, length <span class="token number">77</span>: HTTP: GET / HTTP/1.1
<span class="token comment">#服务端给客户端回复ack,代表服务端告诉客户端，我收到了你的消息，--------tcp可靠性的体现</span>
<span class="token number">11</span>:13:07.648210 IP <span class="token number">14.215</span>.177.38.80 <span class="token operator">&gt;</span> <span class="token number">192.168</span>.189.36.48460: Flags <span class="token punctuation">[</span>.<span class="token punctuation">]</span>, ack <span class="token number">78</span>, win <span class="token number">908</span>, length <span class="token number">0</span>
<span class="token number">11</span>:13:07.651005 IP <span class="token number">14.215</span>.177.38.80 <span class="token operator">&gt;</span> <span class="token number">192.168</span>.189.36.48460: Flags <span class="token punctuation">[</span>.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">1</span>:2721, ack <span class="token number">78</span>, win <span class="token number">908</span>, length <span class="token number">2720</span>: HTTP: HTTP/1.1 <span class="token number">200</span> OK
<span class="token number">11</span>:13:07.651006 IP <span class="token number">14.215</span>.177.38.80 <span class="token operator">&gt;</span> <span class="token number">192.168</span>.189.36.48460: Flags <span class="token punctuation">[</span>P.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">2721</span>:2782, ack <span class="token number">78</span>, win <span class="token number">908</span>, length <span class="token number">61</span>: HTTP
<span class="token number">11</span>:13:07.651038 IP <span class="token number">192.168</span>.189.36.48460 <span class="token operator">&gt;</span> <span class="token number">14.215</span>.177.38.80: Flags <span class="token punctuation">[</span>.<span class="token punctuation">]</span>, ack <span class="token number">2721</span>, win <span class="token number">497</span>, length <span class="token number">0</span>
<span class="token number">11</span>:13:07.651070 IP <span class="token number">192.168</span>.189.36.48460 <span class="token operator">&gt;</span> <span class="token number">14.215</span>.177.38.80: Flags <span class="token punctuation">[</span>.<span class="token punctuation">]</span>, ack <span class="token number">2782</span>, win <span class="token number">497</span>, length <span class="token number">0</span>
<span class="token number">11</span>:13:07.657940 IP <span class="token number">14.215</span>.177.38.80 <span class="token operator">&gt;</span> <span class="token number">192.168</span>.189.36.48460: Flags <span class="token punctuation">[</span>P.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">2721</span>:2782, ack <span class="token number">78</span>, win <span class="token number">908</span>, length <span class="token number">61</span>: HTTP
<span class="token number">11</span>:13:07.657979 IP <span class="token number">192.168</span>.189.36.48460 <span class="token operator">&gt;</span> <span class="token number">14.215</span>.177.38.80: Flags <span class="token punctuation">[</span>.<span class="token punctuation">]</span>, ack <span class="token number">2782</span>, win <span class="token number">501</span>, options <span class="token punctuation">[</span>nop,nop,sack <span class="token number">1</span> <span class="token punctuation">{</span><span class="token number">2721</span>:2782<span class="token punctuation">}</span><span class="token punctuation">]</span>, length <span class="token number">0</span>
<span class="token number">11</span>:13:08.652666 IP <span class="token number">192.168</span>.189.36.48460 <span class="token operator">&gt;</span> <span class="token number">14.215</span>.177.38.80: Flags <span class="token punctuation">[</span>F.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">78</span>, ack <span class="token number">2782</span>, win <span class="token number">501</span>, length <span class="token number">0</span>
<span class="token number">11</span>:13:08.788214 IP <span class="token number">14.215</span>.177.38.80 <span class="token operator">&gt;</span> <span class="token number">192.168</span>.189.36.48460: Flags <span class="token punctuation">[</span>.<span class="token punctuation">]</span>, ack <span class="token number">79</span>, win <span class="token number">908</span>, length <span class="token number">0</span>
<span class="token number">11</span>:13:08.788215 IP <span class="token number">14.215</span>.177.38.80 <span class="token operator">&gt;</span> <span class="token number">192.168</span>.189.36.48460: Flags <span class="token punctuation">[</span>F.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">2782</span>, ack <span class="token number">79</span>, win <span class="token number">908</span>, length <span class="token number">0</span>
<span class="token number">11</span>:13:08.788268 IP <span class="token number">192.168</span>.189.36.48460 <span class="token operator">&gt;</span> <span class="token number">14.215</span>.177.38.80: Flags <span class="token punctuation">[</span>.<span class="token punctuation">]</span>, ack <span class="token number">2783</span>, win <span class="token number">501</span>, length <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-网络层" tabindex="-1"><a class="header-anchor" href="#_2-3-网络层"><span>2.3 网络层</span></a></h3><blockquote><p>关键词：路由表、下一跳</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#查看路由表</span>
route <span class="token parameter variable">-n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>传输控制层建立好连接后，对收据也拆好包后，应该把数据包丢给谁呢？ 当数据包准备好以后，要从路由表中找到下一跳的位置，如下是我的路由表，我们来举例说明网络层的工作原理。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ route <span class="token parameter variable">-n</span>
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
<span class="token number">0.0</span>.0.0         <span class="token number">192.168</span>.189.137 <span class="token number">0.0</span>.0.0         UG    <span class="token number">20600</span>  <span class="token number">0</span>        <span class="token number">0</span> wlp5s0
<span class="token number">10.10</span>.0.0       <span class="token number">192.168</span>.93.1    <span class="token number">255.255</span>.0.0     UG    <span class="token number">100</span>    <span class="token number">0</span>        <span class="token number">0</span> enp4s0
<span class="token number">172.17</span>.0.0      <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.0.0     U     <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> docker0
<span class="token number">192.168</span>.0.0     <span class="token number">192.168</span>.93.1    <span class="token number">255.255</span>.0.0     UG    <span class="token number">100</span>    <span class="token number">0</span>        <span class="token number">0</span> enp4s0
<span class="token number">192.168</span>.92.0    <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.255.0   U     <span class="token number">100</span>    <span class="token number">0</span>        <span class="token number">0</span> enp4s0
<span class="token number">192.168</span>.93.1    <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.255.255 UH    <span class="token number">100</span>    <span class="token number">0</span>        <span class="token number">0</span> enp4s0
<span class="token number">192.168</span>.189.0   <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.255.0   U     <span class="token number">600</span>    <span class="token number">0</span>        <span class="token number">0</span> wlp5s0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-1-实例1-访问内网走enp4s0网卡" tabindex="-1"><a class="header-anchor" href="#_2-3-1-实例1-访问内网走enp4s0网卡"><span>2.3.1 实例1,访问内网走enp4s0网卡</span></a></h4><p>当我们执行<code>ping 192.168.92.33</code>，网络层会拿这个ip分别和路由表子网掩码（mask）从大到小分字节按位与计算，</p><ol><li>先和第6行255.255.255.255进行与计算，得到的还是192.168.92.33，然后看这个结果是否和网络号Destination是否一致，192.168.92.33和0.0.0.0不一样，继续找下一个路由按照同样的方式计算，直到找到相等的</li><li>接下来和第7行255.255.255.0计算，依然不行</li><li>接下来和第5行 255.255.255.0计算得到192.168.92.0匹配上了，匹配上之后，再看网关是0.0.0.0代表没有下一跳了，直接把数据包通过对应的enp4s0网卡把数据发出去了</li></ol><h4 id="_2-3-2-实例2-访问外网走wlp5s0网卡" tabindex="-1"><a class="header-anchor" href="#_2-3-2-实例2-访问外网走wlp5s0网卡"><span>2.3.2 实例2,访问外网走wlp5s0网卡</span></a></h4><p>当我们执行<code>ping baidu.com</code>，经过dns拿到百度的ip：110.242.68.66，网络层会拿这个ip分别和路由表子网掩码（mask）从大到小分字节按位与计算，</p><ol><li>先和第6行255.255.255.255进行与计算，得到的还是110.242.68.66，然后看这个结果是否和网络号Destination是否一致，110.242.68.66和0.0.0.0不一样，继续找下一个路由按照同样的方式计算，直到找到相等的</li><li>接下来和第7行255.255.255.0计算，依然不行</li><li>接下来和第5行 255.255.255.0计算得到110.242.68.0 还是不行</li><li>一直到和第一行0.0.0.0进行与计算得到0.0.0.0,才匹配上，这时确定到下一跳是192.168.189.137，这个也是我的手机无限热点 那么数据包如何才能准确发送到192.168.189.137这个地址上？这就要用到链路层，继续查看后续章节</li></ol><h3 id="_2-4-数据链路层" tabindex="-1"><a class="header-anchor" href="#_2-4-数据链路层"><span>2.4 数据链路层</span></a></h3><blockquote><p>关键词：arp广播</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 查看arp缓存</span>
arp <span class="token parameter variable">-a</span>

<span class="token comment">## 抓arp类型的包</span>
<span class="token function">sudo</span> tcpdump <span class="token parameter variable">-nn</span> <span class="token parameter variable">-i</span> <span class="token operator">&lt;</span>网卡<span class="token operator">&gt;</span> arp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实战抓取wlp5s0网卡上的arp广播</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 1.  开启抓包</span>
<span class="token function">sudo</span> tcpdump <span class="token parameter variable">-nn</span>  <span class="token parameter variable">-i</span> wlp5s0 arp

<span class="token comment">## 2. 使用另一个windows电脑也连接到我的手机热点，随便ping一个wlp5s0网卡能处理的ip,</span>
<span class="token function">ping</span> <span class="token number">192.168</span>.189.55
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时在看抓包的日志打印如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> tcpdump <span class="token parameter variable">-nn</span>  <span class="token parameter variable">-i</span> wlp5s0 arp      
<span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> chenkun 的密码：tcpdump: verbose output suppressed, use -v<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token keyword">for</span> full protocol decode
listening on wlp5s0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, snapshot length <span class="token number">262144</span> bytes

<span class="token number">11</span>:49:41.819450 ARP, Request who-has <span class="token number">192.168</span>.189.55 tell <span class="token number">192.168</span>.189.36, length <span class="token number">28</span>
<span class="token number">11</span>:49:42.824331 ARP, Request who-has <span class="token number">192.168</span>.189.55 tell <span class="token number">192.168</span>.189.36, length <span class="token number">28</span>
<span class="token number">11</span>:49:43.837669 ARP, Request who-has <span class="token number">192.168</span>.189.55 tell <span class="token number">192.168</span>.189.36, length <span class="token number">28</span>
<span class="token number">11</span>:49:43.837669 ARP, Request who-has <span class="token number">192.168</span>.189.55 tell <span class="token number">192.168</span>.189.36, length <span class="token number">28</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接上面的2.3.2章节最后，数据如何准确发到192.168.189.137上？ 为了实验清晰，我上面还特意用了另一个电脑（和抓包电脑区别开来），但是抓包电脑依然能获取到广播来的日志，说明了网关是无差别的给所有连接到此网段的电脑都发了消息，谁有这个ip,则谁把自己的mac地址返回去。 上面实验是我ping了一个不存在的ip,所以没有正常返回，如果ping一个存在的ip正常返回如下，会响应一个mac地址给请求方，在实际网络环境中，一般情况不可能让你直连服务器，会有很多层路由器，所以一层一层的返回 mac地址，就形成了一个链，所以这就是链路层名字的 由来。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> tcpdump <span class="token parameter variable">-nn</span>  <span class="token parameter variable">-i</span> wlp5s0 arp 
tcpdump: verbose output suppressed, use -v<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token keyword">for</span> full protocol decode
listening on wlp5s0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, snapshot length <span class="token number">262144</span> bytes


<span class="token number">12</span>:02:01.497715 ARP, Request who-has <span class="token number">192.168</span>.189.36 tell <span class="token number">192.168</span>.189.137, length <span class="token number">28</span>
<span class="token number">12</span>:02:01.497733 ARP, Reply <span class="token number">192.168</span>.189.36 is-at 00:93:37:25:27:0e, length <span class="token number">28</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、参考资料" tabindex="-1"><a class="header-anchor" href="#_3、参考资料"><span>3、参考资料</span></a></h2>`,45),d={href:"https://www.bilibili.com/video/BV1Gr4y1F7UV?p=1&vd_source=523a6b1564b9991b67e685b80d67975a",target:"_blank",rel:"noopener noreferrer"};function k(b,v){const a=t("ExternalLinkIcon");return l(),o("div",null,[r,n("p",null,[s("网上学习网络模型时一会是七层osi模型，一会又五层，一会又是四层模型，着实五花八门让人费解，实际上七层模型是osi的标准，目前大家所讲的tcp/ip也是符合osi的标准的，不过是把其中几层合并到一层了而已，"),n("a",u,[s("点击查看tcp/ip和osi的关系"),e(a)]),s("。TCP/IP实际上是一个协议簇，包含很多协议，比如TCP、IP、UDP、ICMP、RIP、TELNETFTP、SMTP、ARP、TFTP等，这些协议一起称为TCP/IP协议。常见协议简单介绍：")]),m,n("p",null,[n("a",d,[s("bilibli教程"),e(a)])])])}const P=p(i,[["render",k],["__file","TCP-IP.html.vue"]]),T=JSON.parse('{"path":"/other/computerprinciple/TCP-IP.html","title":"深入理解TCP/IP","lang":"zh-CN","frontmatter":{"title":"深入理解TCP/IP","date":"2023-01-30T00:00:00.000Z","description":"1、TCP/IP与OSI的关系 网上学习网络模型时一会是七层osi模型，一会又五层，一会又是四层模型，着实五花八门让人费解，实际上七层模型是osi的标准，目前大家所讲的tcp/ip也是符合osi的标准的，不过是把其中几层合并到一层了而已，点击查看tcp/ip和osi的关系。TCP/IP实际上是一个协议簇，包含很多协议，比如TCP、IP、UDP、ICMP...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/other/computerprinciple/TCP-IP.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"深入理解TCP/IP"}],["meta",{"property":"og:description","content":"1、TCP/IP与OSI的关系 网上学习网络模型时一会是七层osi模型，一会又五层，一会又是四层模型，着实五花八门让人费解，实际上七层模型是osi的标准，目前大家所讲的tcp/ip也是符合osi的标准的，不过是把其中几层合并到一层了而已，点击查看tcp/ip和osi的关系。TCP/IP实际上是一个协议簇，包含很多协议，比如TCP、IP、UDP、ICMP..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230130104228.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-22T03:45:12.000Z"}],["meta",{"property":"article:author","content":"ChenSino"}],["meta",{"property":"article:published_time","content":"2023-01-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-22T03:45:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"深入理解TCP/IP\\",\\"image\\":[\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230130104228.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230130103942.png\\"],\\"datePublished\\":\\"2023-01-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-22T03:45:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChenSino\\",\\"url\\":\\"https://ChenSino.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1、TCP/IP与OSI的关系","slug":"_1、tcp-ip与osi的关系","link":"#_1、tcp-ip与osi的关系","children":[]},{"level":2,"title":"2、TCP/IP","slug":"_2、tcp-ip","link":"#_2、tcp-ip","children":[{"level":3,"title":"2.1 应用层","slug":"_2-1-应用层","link":"#_2-1-应用层","children":[]},{"level":3,"title":"2.2 传输控制层（TCP，不讲UDP）","slug":"_2-2-传输控制层-tcp-不讲udp","link":"#_2-2-传输控制层-tcp-不讲udp","children":[]},{"level":3,"title":"2.3 网络层","slug":"_2-3-网络层","link":"#_2-3-网络层","children":[]},{"level":3,"title":"2.4 数据链路层","slug":"_2-4-数据链路层","link":"#_2-4-数据链路层","children":[]}]},{"level":2,"title":"3、参考资料","slug":"_3、参考资料","link":"#_3、参考资料","children":[]}],"git":{"createdTime":1675056506000,"updatedTime":1711079112000,"contributors":[{"name":"ChenSino","email":"462488588@qq.com","commits":1},{"name":"ChenSino","email":"chenxk@sonoscape.net","commits":1}]},"readingTime":{"minutes":7.87,"words":2361},"filePathRelative":"other/computerprinciple/TCP-IP.md","localizedDate":"2023年1月30日","excerpt":"<h2>1、TCP/IP与OSI的关系</h2>\\n<p>网上学习网络模型时一会是七层osi模型，一会又五层，一会又是四层模型，着实五花八门让人费解，实际上七层模型是osi的标准，目前大家所讲的tcp/ip也是符合osi的标准的，不过是把其中几层合并到一层了而已，<a href=\\"https://cloud.tencent.com/developer/article/2003231\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">点击查看tcp/ip和osi的关系</a>。TCP/IP实际上是一个协议簇，包含很多协议，比如TCP、IP、UDP、ICMP、RIP、TELNETFTP、SMTP、ARP、TFTP等，这些协议一起称为TCP/IP协议。常见协议简单介绍：</p>","autoDesc":true}');export{P as comp,T as data};

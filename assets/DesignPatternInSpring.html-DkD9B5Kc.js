import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e as t}from"./app-DaXuKV75.js";const e={},p=t(`<h3 id="_1、工厂模式" tabindex="-1"><a class="header-anchor" href="#_1、工厂模式"><span>1、工厂模式</span></a></h3><p>BeanFactory是典型的工厂方法模式，其有多个实现，不同的实现有不同的getBean方法，默认实现是DefaultListalbeBeanFactory,我们也可以定义自己的工厂实现BeanFactory接口，重写里面的getBean方法</p><h3 id="_2、单例模式" tabindex="-1"><a class="header-anchor" href="#_2、单例模式"><span>2、单例模式</span></a></h3><p>在spring中使用singleton修饰的bean都是单例模式，<code>org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#addSingleton</code>，在spring实例化出真正的对象后，会把这个对象加到容器中</p><blockquote><p>修正，以上说singleton=单例模式，是错误的，singleton指的是容器中该对象的bean只有一个，和单例模式不是一回事，单例模式有：Mybatis的连接工厂、redis的连接工厂等</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token doc-comment comment">/**
* Add the given singleton object to the singleton cache of this factory.
* <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>To be called for eager registration of singletons.
* <span class="token keyword">@param</span> <span class="token parameter">beanName</span> the name of the bean
* <span class="token keyword">@param</span> <span class="token parameter">singletonObject</span> the singleton object
*/</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addSingleton</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> singletonObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>registeredSingletons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、观察者模式" tabindex="-1"><a class="header-anchor" href="#_3、观察者模式"><span>3、观察者模式</span></a></h3><p>spring中的时间event都采用的观察者模式 <img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20221226114253.png" alt="20221226114253"></p><h3 id="_4、适配器模式" tabindex="-1"><a class="header-anchor" href="#_4、适配器模式"><span>4、适配器模式</span></a></h3><p>SpringMVC</p><h3 id="_5、代理模式" tabindex="-1"><a class="header-anchor" href="#_5、代理模式"><span>5、代理模式</span></a></h3><p>SpringAOP整个就采用的代理模式</p><h3 id="_6、模板方法模式" tabindex="-1"><a class="header-anchor" href="#_6、模板方法模式"><span>6、模板方法模式</span></a></h3><h3 id="_7、包装模式-装饰者模式" tabindex="-1"><a class="header-anchor" href="#_7、包装模式-装饰者模式"><span>7、包装模式（装饰者模式）</span></a></h3><p>在IOC容器中，反射创建了实例对象以后，会对其进行包装。参考<code>org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#instantiateBean</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
	<span class="token doc-comment comment">/**
	 * Instantiate the given bean using its default constructor.
	 * <span class="token keyword">@param</span> <span class="token parameter">beanName</span> the name of the bean
	 * <span class="token keyword">@param</span> <span class="token parameter">mbd</span> the bean definition for the bean
	 * <span class="token keyword">@return</span> a BeanWrapper for the new instance
	 */</span>
	<span class="token keyword">protected</span> <span class="token class-name">BeanWrapper</span> <span class="token function">instantiateBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RootBeanDefinition</span> mbd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token class-name">Object</span> beanInstance<span class="token punctuation">;</span>
			<span class="token keyword">final</span> <span class="token class-name">BeanFactory</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				beanInstance <span class="token operator">=</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PrivilegedAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span>
						<span class="token function">getInstantiationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">,</span>
						<span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">else</span> <span class="token punctuation">{</span>
				beanInstance <span class="token operator">=</span> <span class="token function">getInstantiationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token class-name">BeanWrapper</span> bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanWrapperImpl</span><span class="token punctuation">(</span>beanInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">initBeanWrapper</span><span class="token punctuation">(</span>bw<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> bw<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>
					mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">&quot;Instantiation of bean failed&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外BeanDefinitionHolder也是包装了BeanDefinition，也是装饰者设计模式</p><h3 id="_8、原型模式" tabindex="-1"><a class="header-anchor" href="#_8、原型模式"><span>8、原型模式</span></a></h3><p>spring中prototype类型的bean采用的原型模式</p><h3 id="_9、建造者模式" tabindex="-1"><a class="header-anchor" href="#_9、建造者模式"><span>9、建造者模式</span></a></h3><p>各种框架中的builder基本都是建造者模式，一般建造这模式都是通过链式写法来设置字，并且设置完字段后返回Builder本身，最后调用build方法，最终生成一个我们需要的对象。比如SpringSecurity中AuthenticationManagerBuilder，源码如下：</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20221228145658.png" alt="20221228145658"></p>`,22),o=[p];function c(i,l){return a(),s("div",null,o)}const d=n(e,[["render",c],["__file","DesignPatternInSpring.html.vue"]]),k=JSON.parse('{"path":"/java/framework/spring/DesignPatternInSpring.html","title":"Spring中的设计模式","lang":"zh-CN","frontmatter":{"title":"Spring中的设计模式","date":"2018-05-18T00:00:00.000Z","description":"1、工厂模式 BeanFactory是典型的工厂方法模式，其有多个实现，不同的实现有不同的getBean方法，默认实现是DefaultListalbeBeanFactory,我们也可以定义自己的工厂实现BeanFactory接口，重写里面的getBean方法 2、单例模式 在spring中使用singleton修饰的bean都是单例模式，org.spr...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/java/framework/spring/DesignPatternInSpring.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"Spring中的设计模式"}],["meta",{"property":"og:description","content":"1、工厂模式 BeanFactory是典型的工厂方法模式，其有多个实现，不同的实现有不同的getBean方法，默认实现是DefaultListalbeBeanFactory,我们也可以定义自己的工厂实现BeanFactory接口，重写里面的getBean方法 2、单例模式 在spring中使用singleton修饰的bean都是单例模式，org.spr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20221226114253.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-15T08:24:30.000Z"}],["meta",{"property":"article:author","content":"ChenSino"}],["meta",{"property":"article:published_time","content":"2018-05-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-15T08:24:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring中的设计模式\\",\\"image\\":[\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20221226114253.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20221228145658.png\\"],\\"datePublished\\":\\"2018-05-18T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-15T08:24:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChenSino\\",\\"url\\":\\"https://ChenSino.github.io\\"}]}"]]},"headers":[{"level":3,"title":"1、工厂模式","slug":"_1、工厂模式","link":"#_1、工厂模式","children":[]},{"level":3,"title":"2、单例模式","slug":"_2、单例模式","link":"#_2、单例模式","children":[]},{"level":3,"title":"3、观察者模式","slug":"_3、观察者模式","link":"#_3、观察者模式","children":[]},{"level":3,"title":"4、适配器模式","slug":"_4、适配器模式","link":"#_4、适配器模式","children":[]},{"level":3,"title":"5、代理模式","slug":"_5、代理模式","link":"#_5、代理模式","children":[]},{"level":3,"title":"6、模板方法模式","slug":"_6、模板方法模式","link":"#_6、模板方法模式","children":[]},{"level":3,"title":"7、包装模式（装饰者模式）","slug":"_7、包装模式-装饰者模式","link":"#_7、包装模式-装饰者模式","children":[]},{"level":3,"title":"8、原型模式","slug":"_8、原型模式","link":"#_8、原型模式","children":[]},{"level":3,"title":"9、建造者模式","slug":"_9、建造者模式","link":"#_9、建造者模式","children":[]}],"git":{"createdTime":1659362219000,"updatedTime":1678868670000,"contributors":[{"name":"ChenSino","email":"chenxk@sonoscape.net","commits":2},{"name":"chenkun","email":"462488588@qq.com","commits":1},{"name":"chenxk","email":"chenxk@sonoscape.net","commits":1}]},"readingTime":{"minutes":1.81,"words":544},"filePathRelative":"java/framework/spring/DesignPatternInSpring.md","localizedDate":"2018年5月18日","excerpt":"<h3>1、工厂模式</h3>\\n<p>BeanFactory是典型的工厂方法模式，其有多个实现，不同的实现有不同的getBean方法，默认实现是DefaultListalbeBeanFactory,我们也可以定义自己的工厂实现BeanFactory接口，重写里面的getBean方法</p>\\n<h3>2、单例模式</h3>\\n<p>在spring中使用singleton修饰的bean都是单例模式，<code>org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#addSingleton</code>，在spring实例化出真正的对象后，会把这个对象加到容器中</p>","autoDesc":true}');export{d as comp,k as data};

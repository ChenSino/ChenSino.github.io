import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-Cs38sdJl.js";const p={},e=t(`<div class="hint-container note"><p class="hint-container-title">注</p><p>本博客介绍前后端分离项目的完整接入oauth的流程，本博客使用github来示范，因为github注册oauth应用无须审核，微信审核特别麻烦，并且个人用户无法注册</p></div><h2 id="_1-oauth2" tabindex="-1"><a class="header-anchor" href="#_1-oauth2"><span>1 oauth2</span></a></h2><h3 id="_1-1-典型应用场景" tabindex="-1"><a class="header-anchor" href="#_1-1-典型应用场景"><span>1.1 典型应用场景</span></a></h3><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code>    <span class="token list punctuation">1.</span> 社交帐号登录应用，比如使用微信、微博登录其它应用
    <span class="token list punctuation">2.</span> 从第三方获取用户资料比如：手机号、邮箱、头像等
    <span class="token list punctuation">3.</span> 从第三方获取业务数据，比如：通过自己的系统想从京东获取订单
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-完整时序图" tabindex="-1"><a class="header-anchor" href="#_1-2-完整时序图"><span>1.2 完整时序图</span></a></h3><p>假设有一个软件叫开立权限管理系统，该系统接入了github登录，则使用github登录的完整的oauth流程如下：</p><div class="language-mermaid line-numbers-mode" data-ext="mermaid" data-title="mermaid"><pre class="language-mermaid"><code><span class="token keyword">sequenceDiagram</span>
    actor E as 资源所有者<span class="token text string">(github用户)</span>
    <span class="token keyword">participant</span> A as 开立权系统前端（浏览器）
    <span class="token keyword">participant</span> B as 开立管理系统后端
    <span class="token keyword">participant</span> C as 微信Oauth服务器
    <span class="token keyword">participant</span> D as github受保护资源
    E <span class="token arrow operator">-&gt;&gt;</span> A<span class="token operator">:</span> 1.访问开立系统
    A<span class="token arrow operator">-&gt;&gt;</span>A<span class="token operator">:</span> 引导授权，用户选择github登录
    A<span class="token arrow operator">-&gt;&gt;</span>C<span class="token operator">:</span> 2. 第一次重定向到授权服务
    C<span class="token arrow operator">-&gt;&gt;</span>C<span class="token operator">:</span> 校验当前客户端合法性，重定向到github登录页
    E<span class="token arrow operator">-&gt;&gt;</span>C<span class="token operator">:</span> 3. 输入帐号密码登录
    C<span class="token arrow operator">-&gt;&gt;</span>C<span class="token operator">:</span> 4 生成授权码code
    C<span class="token arrow operator">--&gt;&gt;</span>A<span class="token operator">:</span> 5. 第二次生定向，跳转到开立系统前端，并且携带了code
    A<span class="token arrow operator">-&gt;&gt;</span>B<span class="token operator">:</span> 6.请求最终会携带code到后端
    B<span class="token arrow operator">-&gt;&gt;</span>B<span class="token operator">:</span> 获得code
    B<span class="token arrow operator">-&gt;&gt;</span>C<span class="token operator">:</span> 7. 拿到code,post请求oauth服务器
    C<span class="token arrow operator">--)</span>B<span class="token operator">:</span> 8. 返回access_token
    B<span class="token arrow operator">-&gt;&gt;</span>D<span class="token operator">:</span> 9. 携带access_token,访问受保护资源
    D<span class="token arrow operator">--)</span>B<span class="token operator">:</span> 10. 返回用户信息
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-github配置" tabindex="-1"><a class="header-anchor" href="#_2-github配置"><span>2 GitHub配置</span></a></h2><p>进入个人设置，开发者设置，注册一个Oauth应用，注意回调地址一定要和后端代码中实际使用的是同一个，在这个界面注册后会产生clientId和secret,在回调的时候需要用到。</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230428095222.png" alt="20230428095222"></p><h2 id="_3-前后分离项目前后端交互" tabindex="-1"><a class="header-anchor" href="#_3-前后分离项目前后端交互"><span>3 前后分离项目前后端交互</span></a></h2><h2 id="_4-前端代码" tabindex="-1"><a class="header-anchor" href="#_4-前端代码"><span>4 前端代码</span></a></h2><p>与普通项目相比，对接oauth项目前端需要使用技术如下：</p><ul><li>window.open弹小窗</li><li>window.addEventListener监听后端回传的数据</li></ul><p>前端使用一个小弹窗来登录github,同时该弹窗还要监听后端发送过来的message进行解码，交互是通过<code>window.opener.postMessage</code>api实现的，后端的响应的页面中要使用该api进行传值，主要传递token，用户信息等。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// proxy 配置 </span>
   <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://digital-gateway:8005&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token function-variable function">rewrite</span><span class="token operator">:</span> <span class="token parameter">path</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/api</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">ws</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>

<span class="token comment">//业务代码</span>
 <span class="token operator">&lt;</span>span title<span class="token operator">=</span><span class="token string">&quot;github登录&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;iconfont&quot;</span> @click<span class="token operator">=</span><span class="token string">&quot;githubLogin&quot;</span>
        <span class="token operator">&gt;</span><span class="token operator">&amp;</span>#xe8ef<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span <span class="token operator">&gt;</span>

<span class="token comment">//github登录</span>
<span class="token keyword">const</span> <span class="token function-variable function">githubLogin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//window.open会自动拼接当前的域，然后走vue proxy转发到后端</span>
  <span class="token keyword">const</span> githubLoginUrl <span class="token operator">=</span> <span class="token string">&#39;/api/auth/oauth/githubLogin&#39;</span>
  <span class="token comment">//  弹出 500 * 500 的窗口</span>
  window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>
    githubLoginUrl<span class="token punctuation">,</span>
    <span class="token string">&#39;new&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;height=500, width=500, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, resizable=no,location=n o, status=no&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
  <span class="token comment">//  通过监听，父页面可以拿到子页面传递的token，父(前端页面)，子(后端freemarker小窗)</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
    <span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span>
    <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">//后端传递的Base64格式数据【解决多html通信，引号的编码问题】，此处解码</span>
        <span class="token keyword">const</span> decodedString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>
          <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>
            <span class="token function">atob</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
        <span class="token comment">//登录后的用户信息</span>
        <span class="token keyword">const</span> <span class="token literal-property property">loginRes</span><span class="token operator">:</span> LoginRes <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>decodedString<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>loginRes<span class="token punctuation">.</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//前端保存token</span>
          <span class="token function">setToken</span><span class="token punctuation">(</span>loginRes<span class="token punctuation">.</span>token<span class="token punctuation">)</span>
         <span class="token comment">//其它</span>
          <span class="token function">changeUserInfo</span><span class="token punctuation">(</span>loginRes<span class="token punctuation">.</span>user<span class="token punctuation">)</span>
          <span class="token comment">//跳转到首页</span>
          router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;使用GitHub登录失败&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;OAuth登录失败，&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-后端处理" tabindex="-1"><a class="header-anchor" href="#_5-后端处理"><span>5 后端处理</span></a></h2><h3 id="_5-1-处理github授权请求" tabindex="-1"><a class="header-anchor" href="#_5-1-处理github授权请求"><span>5.1 处理github授权请求</span></a></h3><blockquote><p>这个接口可以不用写在后端，前端可以直接请求<code>https://github.com/login/oauth/authorize?client_id=xxx&amp;redirect_uri=xxx</code>，正常情况下，前端请求后会根据redirect_url重定向到我们配置的后端接口，这个redirect_url一定要和你在github配置的一致，我这里把请求github的授权用后端转发了一下，所以最后要重定向一下，还是重定向到了<code>https://github.com/login/oauth/authorize?client_id=xxx&amp;redirect_uri=xxx</code></p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;oauth/githubLogin&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">githubLogin</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        url<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>githubConfig<span class="token punctuation">.</span><span class="token function">getAuthorizeUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;?client_id=&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>githubConfig<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;redirect_uri=&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>githubConfig<span class="token punctuation">.</span><span class="token function">getRedirectUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//重定向到github开放的登录页面</span>
        response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-重定向后的处理" tabindex="-1"><a class="header-anchor" href="#_5-2-重定向后的处理"><span>5.2 重定向后的处理</span></a></h3><div class="hint-container caution"><p class="hint-container-title">注意！！！</p><p>这里要注意，重定向后返回的是一个<code>ModelAndView</code>视图，所以注解要用<code>@Controller</code>,切记不要用<code>@RestController</code></p></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token annotation punctuation">@Controller</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> tags <span class="token operator">=</span> <span class="token string">&quot;第三方登录接口&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OauthLoginController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">IOauthLoginService</span> oauthLoginService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;oauth/githubLogin&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">githubLogin</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        oauthLoginService<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//github重定向后会进入这里，并且会携带一个code</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/oauth/callback&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">gitHubCallback</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnsupportedEncodingException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> oauthLoginService<span class="token punctuation">.</span><span class="token function">loginByGitHub</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">loginByGitHub</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnsupportedEncodingException</span> <span class="token punctuation">{</span>
        <span class="token comment">//视图，对应我的模板文件，有个github.ftl</span>
        <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">&quot;github&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//github 的oauth必要的参数，code是重定向时带过来的</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>
        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;client_id&quot;</span><span class="token punctuation">,</span> githubConfig<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;client_secret&quot;</span><span class="token punctuation">,</span> githubConfig<span class="token punctuation">.</span><span class="token function">getSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//根据code请求github的token</span>
        <span class="token class-name">String</span> response <span class="token operator">=</span> <span class="token class-name">HttpUtil</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>githubConfig<span class="token punctuation">.</span><span class="token function">getAccessTokenUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//解析出token</span>
        <span class="token class-name">String</span> token <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 拿到github token，根据token请求用户信息</span>
        <span class="token class-name">String</span> githubUser <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>githubConfig<span class="token punctuation">.</span><span class="token function">getUserInfoUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bearer &quot;</span> <span class="token operator">+</span> token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//根据github响应用户信息查询对应的本地用户</span>
        <span class="token class-name">String</span> githubUserId <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>githubUser<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//拿到github的ueserId,根据userId到自己的系统查询当前登录的github对应的自己系统用户，</span>

        <span class="token comment">//TODO 以下查询逻辑要改成自己的</span>
        <span class="token class-name">SubUser</span> subUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subUser<span class="token punctuation">.</span><span class="token function">setSubUserId</span><span class="token punctuation">(</span>githubUserId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        subUser<span class="token punctuation">.</span><span class="token function">setProjectCode</span><span class="token punctuation">(</span><span class="token string">&quot;github&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SubUser</span><span class="token punctuation">&gt;</span></span> subUserList <span class="token operator">=</span> subUserService<span class="token punctuation">.</span><span class="token function">selectBySubUser</span><span class="token punctuation">(</span>subUser<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>subUserList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">&quot;当前登录的GitHub帐号未和系统帐号绑定，请先绑定再使用GitHub进行登录&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//根据userCode 查询用角色权限信息</span>
        <span class="token class-name">UserLoginDTO</span> userLoginDTO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserLoginDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userLoginDTO<span class="token punctuation">.</span><span class="token function">setUserCode</span><span class="token punctuation">(</span>subUserList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userLoginDTO<span class="token punctuation">.</span><span class="token function">setLoginType</span><span class="token punctuation">(</span><span class="token class-name">AccountConstant</span><span class="token punctuation">.</span><span class="token constant">LOGIN_BY_GITHUB</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//TODO 登录核心逻辑，改成自己的， 我这里LoginVo包含了用户角色权限信息，以及token，用来回传给前端</span>
        <span class="token class-name">LoginVo</span> loginVo <span class="token operator">=</span> accountService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>userLoginDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> loginVoJson <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>loginVo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//通过BASE64解决前端 window.opener.postMessage(&#39;\${loginUser}&#39;, \`\${domain}\`)传递引号产生的解析问题，前端使用时base64反解码</span>
        <span class="token class-name">String</span> loginVoJsonBase64 <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>loginVoJson<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">&quot;loginUser&quot;</span><span class="token punctuation">,</span> loginVoJsonBase64<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">&quot;domain&quot;</span><span class="token punctuation">,</span> githubConfig<span class="token punctuation">.</span><span class="token function">getFrontendHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重定向后响应的视图github.ftl如下，这里代码非常简单，就是打开一下，然后调用前端的<code>window.opener.postMessage</code>api,把登录后的数据发送给前端，<code>window.opener</code>是指的调用当前页面的“页面”，其实就是用户打开的系统首页，这是回传消息也是回传给首页那个页面，回传后前端通过<code>window.addEventListener(&#39;message&#39;,e=&gt;{})</code>可以监听到发送来的数据。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ie=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>GitHub登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
登陆中...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//给指定domain发送消息</span>
        window<span class="token punctuation">.</span>opener<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;\${loginUser}&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>domain<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token comment">//数据发送后自动关闭</span>
        window<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-前后交互数据问题" tabindex="-1"><a class="header-anchor" href="#_5-3-前后交互数据问题"><span>5.3 前后交互数据问题</span></a></h3><p>这里前后交互数据其实是通过一个中转页面github.ftl实现的，这里中转时遇到了数据格式问题，后端通过freemarker模板回应的数据，被前端监听后解析总有双引号问题，所以这通过base64中转一下，后端base64编码，前端base64解码。</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230427182157.png" alt="20230427182157"></p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230427182214.png" alt="20230427182214"></p>`,30),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","OAUTH_LOGIN.html.vue"]]),d=JSON.parse('{"path":"/other/web/OAUTH_LOGIN.html","title":"oauth第三方登录","lang":"zh-CN","frontmatter":{"title":"oauth第三方登录","date":"2023-04-27T00:00:00.000Z","isOriginal":true,"category":["oauth"],"tag":["oauth"],"description":"注 本博客介绍前后端分离项目的完整接入oauth的流程，本博客使用github来示范，因为github注册oauth应用无须审核，微信审核特别麻烦，并且个人用户无法注册 1 oauth2 1.1 典型应用场景 1.2 完整时序图 假设有一个软件叫开立权限管理系统，该系统接入了github登录，则使用github登录的完整的oauth流程如下： 2 Gi...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/other/web/OAUTH_LOGIN.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"oauth第三方登录"}],["meta",{"property":"og:description","content":"注 本博客介绍前后端分离项目的完整接入oauth的流程，本博客使用github来示范，因为github注册oauth应用无须审核，微信审核特别麻烦，并且个人用户无法注册 1 oauth2 1.1 典型应用场景 1.2 完整时序图 假设有一个软件叫开立权限管理系统，该系统接入了github登录，则使用github登录的完整的oauth流程如下： 2 Gi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230428095222.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-06T03:01:44.000Z"}],["meta",{"property":"article:author","content":"ChenSino"}],["meta",{"property":"article:tag","content":"oauth"}],["meta",{"property":"article:published_time","content":"2023-04-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-06T03:01:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"oauth第三方登录\\",\\"image\\":[\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230428095222.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230427182157.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230427182214.png\\"],\\"datePublished\\":\\"2023-04-27T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-06T03:01:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChenSino\\",\\"url\\":\\"https://ChenSino.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1 oauth2","slug":"_1-oauth2","link":"#_1-oauth2","children":[{"level":3,"title":"1.1 典型应用场景","slug":"_1-1-典型应用场景","link":"#_1-1-典型应用场景","children":[]},{"level":3,"title":"1.2 完整时序图","slug":"_1-2-完整时序图","link":"#_1-2-完整时序图","children":[]}]},{"level":2,"title":"2 GitHub配置","slug":"_2-github配置","link":"#_2-github配置","children":[]},{"level":2,"title":"3 前后分离项目前后端交互","slug":"_3-前后分离项目前后端交互","link":"#_3-前后分离项目前后端交互","children":[]},{"level":2,"title":"4 前端代码","slug":"_4-前端代码","link":"#_4-前端代码","children":[]},{"level":2,"title":"5 后端处理","slug":"_5-后端处理","link":"#_5-后端处理","children":[{"level":3,"title":"5.1 处理github授权请求","slug":"_5-1-处理github授权请求","link":"#_5-1-处理github授权请求","children":[]},{"level":3,"title":"5.2 重定向后的处理","slug":"_5-2-重定向后的处理","link":"#_5-2-重定向后的处理","children":[]},{"level":3,"title":"5.3 前后交互数据问题","slug":"_5-3-前后交互数据问题","link":"#_5-3-前后交互数据问题","children":[]}]}],"git":{"createdTime":1682590996000,"updatedTime":1683342104000,"contributors":[{"name":"chenxk","email":"chenxk@sonoscape.net","commits":2}]},"readingTime":{"minutes":5.85,"words":1755},"filePathRelative":"other/web/OAUTH_LOGIN.md","localizedDate":"2023年4月27日","excerpt":"<div class=\\"hint-container note\\">\\n<p class=\\"hint-container-title\\">注</p>\\n<p>本博客介绍前后端分离项目的完整接入oauth的流程，本博客使用github来示范，因为github注册oauth应用无须审核，微信审核特别麻烦，并且个人用户无法注册</p>\\n</div>\\n<h2>1 oauth2</h2>\\n<h3>1.1 典型应用场景</h3>\\n<div class=\\"language-markdown\\" data-ext=\\"md\\" data-title=\\"md\\"><pre class=\\"language-markdown\\"><code>    <span class=\\"token list punctuation\\">1.</span> 社交帐号登录应用，比如使用微信、微博登录其它应用\\n    <span class=\\"token list punctuation\\">2.</span> 从第三方获取用户资料比如：手机号、邮箱、头像等\\n    <span class=\\"token list punctuation\\">3.</span> 从第三方获取业务数据，比如：通过自己的系统想从京东获取订单\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};

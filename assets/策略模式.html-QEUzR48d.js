import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as n,e as a}from"./app-Cf-knFG-.js";const i={},r=a(`<h3 id="策略模式【chatgpt回答】" tabindex="-1"><a class="header-anchor" href="#策略模式【chatgpt回答】"><span>策略模式【CHATGPT回答】</span></a></h3><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code>策略模式（Strategy Pattern）是一种行为型设计模式，它将一组可相互替换的算法封装成独立的对象，并对外暴露相同的接口，从而使得它们可以根据需要动态地替换，以实现不同的行为。

策略模式由三个角色组成，分别是：

<span class="token list punctuation">1.</span> 策略（Strategy）：提供了一个公共的接口，用于实现不同的算法。

<span class="token list punctuation">2.</span> 具体策略（ConcreteStrategy）：实现了策略接口，并提供了具体的算法实现。

<span class="token list punctuation">3.</span> 上下文（Context）：负责协调各个策略的执行，它持有一个策略对象，可以动态地切换策略对象，以改变上下文的行为。

在策略模式中，不同的算法被封装在具体的策略中，这些策略可以根据上下文的需要进行灵活替换，从而实现不同的功能。因此，策略模式具有高度的可扩展性和灵活性，并且可以有效地减少代码冗余。

例如，在订单系统中，可以使用策略模式来处理收费方式的问题。具体而言，可以定义一个ChargeStrategy接口，用于实现不同的收费算法。然后，定义多个具体的收费算法，分别实现ChargeStrategy接口。最后，在订单系统中，可以根据订单的不同情况，动态地设置不同的收费算法，以实现灵活的收费功能。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code>
java策略模式是否就是给定一个接口或者抽象类，提供多个实现类？

是的，Java策略模式就是定义一个接口或抽象类，然后提供多个实现类来实现接口或抽象类中的方法，从而实现不同的算法策略。通过使用策略模式，我们能够在程序运行时动态地切换不同的算法实现，从而实现更加灵活和可扩展的设计。同时，策略模式也符合开闭原则，因为我们可以在不修改已有代码的情况下，通过添加新的策略类来扩展系统的功能。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spring中策略模式的使用" tabindex="-1"><a class="header-anchor" href="#spring中策略模式的使用"><span>Spring中策略模式的使用</span></a></h3><p>太多了，一个接口多个实现，</p><h3 id="我的工作中用到的策略模式" tabindex="-1"><a class="header-anchor" href="#我的工作中用到的策略模式"><span>我的工作中用到的策略模式</span></a></h3><p>登录功能，一个系统可以有很多中登录方式，比如帐号密码登录、手机号验证码登录、oauth2登录，我们可以定义一个接口，接口中有个<code>login</code>方法，返回一个<code>LoginVO</code>对象，不同的登录方式用不同的类实现就可以了。通常策略模式要配合工厂模式实现，工厂根据前端传递来的参数获取不同策略类，然后进行相应的逻辑处理</p>`,7),s=[r];function l(d,o){return t(),n("div",null,s)}const m=e(i,[["render",l],["__file","策略模式.html.vue"]]),g=JSON.parse('{"path":"/designpattern/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html","title":"Strategy Pattern","lang":"zh-CN","frontmatter":{"title":"Strategy Pattern","date":"2023-05-12T00:00:00.000Z","isOriginal":true,"category":["设计模式"],"description":"策略模式【CHATGPT回答】 Spring中策略模式的使用 太多了，一个接口多个实现， 我的工作中用到的策略模式 登录功能，一个系统可以有很多中登录方式，比如帐号密码登录、手机号验证码登录、oauth2登录，我们可以定义一个接口，接口中有个login方法，返回一个LoginVO对象，不同的登录方式用不同的类实现就可以了。通常策略模式要配合工厂模式实现...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/designpattern/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"Strategy Pattern"}],["meta",{"property":"og:description","content":"策略模式【CHATGPT回答】 Spring中策略模式的使用 太多了，一个接口多个实现， 我的工作中用到的策略模式 登录功能，一个系统可以有很多中登录方式，比如帐号密码登录、手机号验证码登录、oauth2登录，我们可以定义一个接口，接口中有个login方法，返回一个LoginVO对象，不同的登录方式用不同的类实现就可以了。通常策略模式要配合工厂模式实现..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-17T07:05:43.000Z"}],["meta",{"property":"article:author","content":"ChenSino"}],["meta",{"property":"article:published_time","content":"2023-05-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-17T07:05:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Strategy Pattern\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-17T07:05:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChenSino\\",\\"url\\":\\"https://ChenSino.github.io\\"}]}"]]},"headers":[{"level":3,"title":"策略模式【CHATGPT回答】","slug":"策略模式【chatgpt回答】","link":"#策略模式【chatgpt回答】","children":[]},{"level":3,"title":"Spring中策略模式的使用","slug":"spring中策略模式的使用","link":"#spring中策略模式的使用","children":[]},{"level":3,"title":"我的工作中用到的策略模式","slug":"我的工作中用到的策略模式","link":"#我的工作中用到的策略模式","children":[]}],"git":{"createdTime":1684307143000,"updatedTime":1684307143000,"contributors":[{"name":"ChenSino","email":"462488588@qq.com","commits":1}]},"readingTime":{"minutes":2.41,"words":722},"filePathRelative":"designpattern/策略模式.md","localizedDate":"2023年5月12日","excerpt":"<h3>策略模式【CHATGPT回答】</h3>\\n<div class=\\"language-markdown\\" data-ext=\\"md\\" data-title=\\"md\\"><pre class=\\"language-markdown\\"><code>策略模式（Strategy Pattern）是一种行为型设计模式，它将一组可相互替换的算法封装成独立的对象，并对外暴露相同的接口，从而使得它们可以根据需要动态地替换，以实现不同的行为。\\n\\n策略模式由三个角色组成，分别是：\\n\\n<span class=\\"token list punctuation\\">1.</span> 策略（Strategy）：提供了一个公共的接口，用于实现不同的算法。\\n\\n<span class=\\"token list punctuation\\">2.</span> 具体策略（ConcreteStrategy）：实现了策略接口，并提供了具体的算法实现。\\n\\n<span class=\\"token list punctuation\\">3.</span> 上下文（Context）：负责协调各个策略的执行，它持有一个策略对象，可以动态地切换策略对象，以改变上下文的行为。\\n\\n在策略模式中，不同的算法被封装在具体的策略中，这些策略可以根据上下文的需要进行灵活替换，从而实现不同的功能。因此，策略模式具有高度的可扩展性和灵活性，并且可以有效地减少代码冗余。\\n\\n例如，在订单系统中，可以使用策略模式来处理收费方式的问题。具体而言，可以定义一个ChargeStrategy接口，用于实现不同的收费算法。然后，定义多个具体的收费算法，分别实现ChargeStrategy接口。最后，在订单系统中，可以根据订单的不同情况，动态地设置不同的收费算法，以实现灵活的收费功能。\\n</code></pre></div>","autoDesc":true}');export{m as comp,g as data};

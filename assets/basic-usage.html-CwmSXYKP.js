import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-Cs38sdJl.js";const i={},r=e(`<h3 id="一-模板中的-typescript" tabindex="-1"><a class="header-anchor" href="#一-模板中的-typescript"><span>一，模板中的 TypeScript</span></a></h3><p>在使用了 &lt;script lang=&quot;ts&quot;&gt; 或 &lt;script setup lang=&quot;ts&quot;&gt; 后，&lt;template&gt; 在绑定表达式中也支持 TypeScript。</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">let</span> <span class="token literal-property property">x</span><span class="token operator">:</span> string <span class="token operator">|</span> number <span class="token operator">=</span> <span class="token number">1</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 出错，因为 x 可能是字符串 --&gt;</span>
  {{ x.toFixed(2) }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用联合类型强制转换解决此问题：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">let</span> <span class="token literal-property property">x</span><span class="token operator">:</span> string <span class="token operator">|</span> number <span class="token operator">=</span> <span class="token number">1</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  {{ (x as number).toFixed(2) }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二-为组件的prop标注类型" tabindex="-1"><a class="header-anchor" href="#二-为组件的prop标注类型"><span>二，为组件的prop标注类型</span></a></h3><h4 id="_2-1当使用-script-setup-时-这个-defineprops-宏函数支持从它的参数中推导类型" tabindex="-1"><a class="header-anchor" href="#_2-1当使用-script-setup-时-这个-defineprops-宏函数支持从它的参数中推导类型"><span>2.1当使用 <code>&lt;script setup&gt;</code> 时，这个 <code>defineProps()</code> 宏函数支持从它的参数中推导类型</span></a></h4><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">bar</span><span class="token operator">:</span> Number
<span class="token punctuation">}</span><span class="token punctuation">)</span>

props<span class="token punctuation">.</span>foo <span class="token comment">// string</span>
props<span class="token punctuation">.</span>bar <span class="token comment">// number | undefined</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这被称之为 ==运行时声明== ，因为传递给 <code>defineProps()</code> 的参数会作为运行时的 <code>props</code> 选项使用。</p><h4 id="_2-2-然而-通过泛型参数来定义-prop-的类型通常更直接" tabindex="-1"><a class="header-anchor" href="#_2-2-然而-通过泛型参数来定义-prop-的类型通常更直接"><span>2.2 然而，通过泛型参数来定义 prop 的类型通常更直接</span></a></h4><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> props <span class="token operator">=</span> defineProps<span class="token operator">&lt;</span><span class="token punctuation">{</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> string
  bar<span class="token operator">?</span><span class="token operator">:</span> number
<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这被称之为“基于类型的声明”。编译器会尽可能地尝试根据类型参数推导出等价的运行时选项。</p><p>我们也可以将 prop 的类型移入一个单独的接口中：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> string
  bar<span class="token operator">?</span><span class="token operator">:</span> number
<span class="token punctuation">}</span>

<span class="token keyword">const</span> props <span class="token operator">=</span> defineProps<span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-prop-默认值" tabindex="-1"><a class="header-anchor" href="#_2-3-prop-默认值"><span>2.3 Prop 默认值</span></a></h4>`,15),u={href:"https://staging-cn.vuejs.org/guide/extras/reactivity-transform.html#reactive-props-destructure",target:"_blank",rel:"noopener noreferrer"},d=e(`<div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> string
  bar<span class="token operator">?</span><span class="token operator">:</span> number
<span class="token punctuation">}</span>

<span class="token comment">// 对 defineProps() 的响应性解构</span>
<span class="token comment">// 默认值会被编译为等价的运行时选项</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar <span class="token operator">=</span> <span class="token number">100</span> <span class="token punctuation">}</span> <span class="token operator">=</span> defineProps<span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三-为组件的-emit-标注类型" tabindex="-1"><a class="header-anchor" href="#三-为组件的-emit-标注类型"><span>三，为组件的 emit 标注类型</span></a></h3><p>在 &lt;script setup&gt; 中，emit 函数的类型标注可以通过运行时声明或类型声明进行</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// 运行时</span>
<span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;update&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">// 基于类型</span>
<span class="token keyword">const</span> emit <span class="token operator">=</span> defineEmits<span class="token operator">&lt;</span><span class="token punctuation">{</span>
  <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">&#39;update&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),k={href:"https://www.typescriptlang.org/docs/handbook/2/functions.html#call-signatures",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"emit",-1);function m(g,b){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,n("p",null,[s("当使用基于类型的声明时，我们失去了对 prop 定义默认值的能力。这可以通过目前实验性的"),n("a",u,[s("响应性语法糖"),t(a)]),s("来解决：")]),d,n("p",null,[s("这个类型参数应该是一个带"),n("a",k,[s("调用签名"),t(a)]),s("的类型字面量。这个类型字面量的类型就是返回的 "),v,s(" 函数的类型。我们可以看到，基于类型的声明使我们可以对所触发事件的类型进行更细粒度的控制。")])])}const f=p(i,[["render",m],["__file","basic-usage.html.vue"]]),x=JSON.parse('{"path":"/frontweb/typeScript/basic-usage.html","title":"typeScript在vue项目中常见用法","lang":"zh-CN","frontmatter":{"title":"typeScript在vue项目中常见用法","date":"2022-08-05T16:57:01.000Z","author":"qianxun","category":["vue知识点"],"tag":["必会","vue中的 TypeScript"],"description":"一，模板中的 TypeScript 在使用了 <script lang=\\"ts\\"> 或 <script setup lang=\\"ts\\"> 后，<template> 在绑定表达式中也支持 TypeScript。 可以使用联合类型强制转换解决此问题： 二，为组件的prop标注类型 2.1当使用 <script setup> 时，这个 defineProps...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/frontweb/typeScript/basic-usage.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"typeScript在vue项目中常见用法"}],["meta",{"property":"og:description","content":"一，模板中的 TypeScript 在使用了 <script lang=\\"ts\\"> 或 <script setup lang=\\"ts\\"> 后，<template> 在绑定表达式中也支持 TypeScript。 可以使用联合类型强制转换解决此问题： 二，为组件的prop标注类型 2.1当使用 <script setup> 时，这个 defineProps..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-08T09:27:48.000Z"}],["meta",{"property":"article:author","content":"qianxun"}],["meta",{"property":"article:tag","content":"必会"}],["meta",{"property":"article:tag","content":"vue中的 TypeScript"}],["meta",{"property":"article:published_time","content":"2022-08-05T16:57:01.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-08T09:27:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"typeScript在vue项目中常见用法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-05T16:57:01.000Z\\",\\"dateModified\\":\\"2022-08-08T09:27:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"qianxun\\"}]}"]]},"headers":[{"level":3,"title":"一，模板中的 TypeScript","slug":"一-模板中的-typescript","link":"#一-模板中的-typescript","children":[]},{"level":3,"title":"二，为组件的prop标注类型","slug":"二-为组件的prop标注类型","link":"#二-为组件的prop标注类型","children":[]},{"level":3,"title":"三，为组件的 emit 标注类型","slug":"三-为组件的-emit-标注类型","link":"#三-为组件的-emit-标注类型","children":[]}],"git":{"createdTime":1659948456000,"updatedTime":1659950868000,"contributors":[{"name":"ChenSino","email":"462488588@qq.com","commits":1},{"name":"zhu","email":"819508408@qq.com","commits":1}]},"readingTime":{"minutes":1.94,"words":582},"filePathRelative":"frontweb/typeScript/basic-usage.md","localizedDate":"2022年8月5日","excerpt":"<h3>一，模板中的 TypeScript</h3>\\n<p>在使用了 &lt;script lang=\\"ts\\"&gt; 或 &lt;script setup lang=\\"ts\\"&gt; 后，&lt;template&gt; 在绑定表达式中也支持 TypeScript。</p>\\n<div class=\\"language-vue\\" data-ext=\\"vue\\" data-title=\\"vue\\"><pre class=\\"language-vue\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>script</span> <span class=\\"token attr-name\\">setup</span> <span class=\\"token attr-name\\">lang</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>ts<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token script\\"><span class=\\"token language-javascript\\">\\n<span class=\\"token keyword\\">let</span> <span class=\\"token literal-property property\\">x</span><span class=\\"token operator\\">:</span> string <span class=\\"token operator\\">|</span> number <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span>\\n</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>script</span><span class=\\"token punctuation\\">&gt;</span></span>\\n\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>template</span><span class=\\"token punctuation\\">&gt;</span></span>\\n  <span class=\\"token comment\\">&lt;!-- 出错，因为 x 可能是字符串 --&gt;</span>\\n  {{ x.toFixed(2) }}\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>template</span><span class=\\"token punctuation\\">&gt;</span></span>\\n</code></pre></div>","autoDesc":true}');export{f as comp,x as data};

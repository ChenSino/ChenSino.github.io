import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o,c as l,a,b as s,d as t,e}from"./app-eaM1OiHO.js";const i={},u=e(`<p>为什么说spi打破了双亲委派机制？</p><h2 id="_1、什么是双亲委派" tabindex="-1"><a class="header-anchor" href="#_1、什么是双亲委派"><span>1、什么是双亲委派？</span></a></h2><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220330170731913.png" alt="image-20220330170731913"></p><p><em>注：此处直接摘抄周志明老师的《深入理解java虚拟机》</em></p><blockquote><p>站在Java虚拟机的角度来看,只存在两种不同的类加载器:一种是启动类加载器(Bootstrap ClassLoader),这个类加载器使用C++语言实现[1] ,是虚拟机自身的一部分;另外一种就是其他所有 的类加载器,这些类加载器都由Java语言实现,独立存在于虚拟机外部,并且全都继承自抽象类 java.lang.ClassLoader。 ​站在Java开发人员的角度来看,类加载器就应当划分得更细致一些。自JDK 1.2以来,Java一直保 持着三层类加载器、双亲委派的类加载架构,尽管这套架构在Java模块化系统出现后有了一些调整变 动,但依然未改变其主体结构,我们将在7.5节中专门讨论模块化系统下的类加载器。 本节内容将针对JDK 8及之前版本的Java来介绍什么是三层类加载器,以及什么是双亲委派模型。 对于这个时期的Java应用,绝大多数Java程序都会使用到以下3个系统提供的类加载器来进行加载。 ·启动类加载器(Bootstrap Class Loader):前面已经介绍过,这个类加载器负责加载存放在 JAVA_HOM/lib目录,或者被-Xbootclasspath参数所指定的路径中存放的,而且是Java虚拟机能够 识别的(按照文件名识别,如rt.jar、tools.jar,名字不符合的类库即使放在lib目录中也不会被加载)类 库加载到虚拟机的内存中。启动类加载器无法被Java程序直接引用,用户在编写自定义类加载器时, 如果需要把加载请求委派给引导类加载器去处理,那直接使用null代替即可,代码清单7-9展示的就是 java.lang.ClassLoader.getClassLoader()方法的代码片段,其中的注释和代码实现都明确地说明了以null值 来代表引导类加载器的约定规则。</p><p>·扩展类加载器(Extension Class Loader):这个类加载器是在类<code>sun.misc.Launcher$ExtClassLoader</code> 中以Java代码的形式实现的。它负责加载&lt;JAVA_HOME&gt;\\lib\\ext目录中,或者被java.ext.dirs系统变量所 指定的路径中所有的类库。根据“扩展类加载器”这个名称,就可以推断出这是一种Java系统类库的扩 展机制,JDK的开发团队允许用户将具有通用性的类库放置在ext目录里以扩展Java SE的功能,在JDK 9之后,这种扩展机制被模块化带来的天然的扩展能力所取代。由于扩展类加载器是由Java代码实现 的,开发者可以直接在程序中使用扩展类加载器来加载Class文件。 ·应用程序类加载器(Application Class Loader):这个类加载器由 sun.misc.Launcher$AppClassLoader来实现。由于应用程序类加载器是ClassLoader类中的getSystem- ClassLoader()方法的返回值,所以有些场合中也称它为“系统类加载器”。它负责加载用户类路径 (ClassPath)上所有的类库,开发者同样可以直接在代码中使用这个类加载器。如果应用程序中没有 自定义过自己的类加载器,一般情况下这个就是程序中默认的类加载器。</p><p>​JDK 9之前的Java应用都是由这三种类加载器互相配合来完成加载的,如果用户认为有必要,还可 以加入自定义的类加载器来进行拓展,典型的如增加除了磁盘位置之外的Class文件来源,或者通过类 加载器实现类的隔离、重载等功能。这些类加载器之间的协作关系“通常”会如图7-2所示。 图7-2中展示的各种类加载器之间的层次关系被称为类加载器的“双亲委派模型(Parents Delegation M odel)”。双亲委派模型要求除了顶层的启动类加载器外,其余的类加载器都应有自己的父类加载 器。不过这里类加载器之间的父子关系一般不是以继承(Inheritance)的关系来实现的,而是通常使用 组合(Composition)关系来复用父加载器的代码。 读者可能注意到前面描述这种类加载器协作关系时,笔者专门用双引号强调这是“通常”的协作关 系。类加载器的双亲委派模型在JDK 1.2时期被引入,并被广泛应用于此后几乎所有的Java程序中,但 它并不是一个具有强制性约束力的模型,而是Java设计者们推荐给开发者的一种类加载器实现的最佳 实践。 ​双亲委派模型的工作过程是:如果一个类加载器收到了类加载的请求,它首先不会自己去尝试加 载这个类,而是把这个请求委派给父类加载器去完成,每一个层次的类加载器都是如此,因此所有的 加载请求最终都应该传送到最顶层的启动类加载器中,只有当父加载器反馈自己无法完成这个加载请 求(它的搜索范围中没有找到所需的类)时,子加载器才会尝试自己去完成加载。 使用双亲委派模型来组织类加载器之间的关系,一个显而易见的好处就是Java中的类随着它的类 加载器一起具备了一种带有优先级的层次关系。例如类java.lang.Object,它存放在rt.jar之中,无论哪一 个类加载器要加载这个类,最终都是委派给处于模型最顶端的启动类加载器进行加载,因此Object类 在程序的各种类加载器环境中都能够保证是同一个类。反之,如果没有使用双亲委派模型,都由各个 类加载器自行去加载的话,如果用户自己也编写了一个名为java.lang.Object的类,并放在程序的 ClassPath中,那系统中就会出现多个不同的Object类,Java类型体系中最基础的行为也就无从保证,应 用程序将会变得一片混乱。如果读者有兴趣的话,可以尝试去写一个与rt.jar类库中已有类重名的Java 类,将会发现它可以正常编译,但永远无法被加载运行[2]。 ​双亲委派模型对于保证Java程序的稳定运作极为重要,但它的实现却异常简单,用以实现双亲委 派的代码只有短短十余行,全部集中在java.lang.ClassLoader的loadClass()方法之中。</p></blockquote><h2 id="_2、什么是spi" tabindex="-1"><a class="header-anchor" href="#_2、什么是spi"><span>2、什么是SPI</span></a></h2><h3 id="_2-1-定义" tabindex="-1"><a class="header-anchor" href="#_2-1-定义"><span>2.1 定义</span></a></h3><p>SPI（Service provide interface），直译过来是服务提供接口，在这里指的是厂商负责定义一个接口但不负责提供实现类，定义完接口后厂商直接使用这个接口的方法，但是如果不给此接口提供实现肯定运行要报错的，所以谁要想用厂商这个接口，谁负责实现。最典型的是jdbc,java可以连接各种数据库，比如mysql、oracle、h2……若是让各个数据库厂商都去实现自己的数据库连接方式，那么非常不利于统一管理，所以sun公司为了避免这种各自为战的乱象，他们就规定了一个规范，这就是jdbc了，在<code>java.sql</code>包下，sun指定一个接口叫做<code>Driver</code>,各大厂商负责实现这个Driver就可以了，只要你实现按要求这个接口的方法，那么你就可以直接连接到你的数据库。此处不得不说一句“一流的公司卖标准，二流公司卖实物，三流公司卖服务”</p><h3 id="_2-2-使用场景" tabindex="-1"><a class="header-anchor" href="#_2-2-使用场景"><span>2.2 使用场景</span></a></h3><ol><li>jdbc4(jdbc4是随着jdk1.6发布的,此版本才开始支持SPI)</li><li>springboot的自动话配置也是同样的原理</li><li>阿里的dubbo</li><li>其他</li></ol><h3 id="_2-3-自己写一个spi模拟jdbc的spi" tabindex="-1"><a class="header-anchor" href="#_2-3-自己写一个spi模拟jdbc的spi"><span>2.3 自己写一个SPI模拟jdbc的spi</span></a></h3><h4 id="_2-3-1-定义规范-sun公司定义的jdbc规范在java-sql包" tabindex="-1"><a class="header-anchor" href="#_2-3-1-定义规范-sun公司定义的jdbc规范在java-sql包"><span>2.3.1 定义规范（sun公司定义的jdbc规范在java.sql包）</span></a></h4><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>JdbcSPI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//定义驱动规范，各数据库厂商自行实现</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Driver</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">getDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DriverManager</span> <span class="token punctuation">{</span>
    <span class="token comment">//使用厂商是实现的驱动连接他的数据库</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Driver</span><span class="token punctuation">&gt;</span></span> load <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Driver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Driver</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> load<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Driver</span> next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> driver <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">getDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//假装业务处理</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;我拿到了用户实现的driver,可以进行连接数据库了，用户用的driver是：&quot;</span> <span class="token operator">+</span> driver<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-2-厂商实现" tabindex="-1"><a class="header-anchor" href="#_2-3-2-厂商实现"><span>2.3.2 厂商实现</span></a></h4><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>MysqlDriver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>JdbcSPI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MysqlDriver</span> <span class="token keyword">implements</span> <span class="token class-name">Driver</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;MysqlDriver&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照SPI规范配置好具体实现类</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220331151619068.png" alt="image-20220331151619068"></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>
    <span class="token comment">//客户端使用</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">DriverManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220331151531624.png" alt="image-20220331151531624"></p><h2 id="_3、为什么spi打破了双亲委派" tabindex="-1"><a class="header-anchor" href="#_3、为什么spi打破了双亲委派"><span>3、为什么SPI打破了双亲委派</span></a></h2><h3 id="_3-1-contextclassloader" tabindex="-1"><a class="header-anchor" href="#_3-1-contextclassloader"><span>3.1 ContextClassLoader</span></a></h3><p>Thread context class loader存在的目的主要是为了解决parent delegation机制下无法干净的解决的问题。假如有下述委派链：</p><div class="language-mermaid line-numbers-mode" data-ext="mermaid" data-title="mermaid"><pre class="language-mermaid"><code><span class="token keyword">graph</span> LR<span class="token punctuation">;</span>
A<span class="token text string">[Custom ClassLoader]</span><span class="token arrow operator">--&gt;</span>B<span class="token text string">[Application classloader]</span><span class="token arrow operator">--&gt;</span>C<span class="token text string">[Extension classloader]</span><span class="token arrow operator">--&gt;</span> d<span class="token text string">[Bootstrap class loader]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>那么委派链左边的ClassLoader就可以很自然的使用右边的ClassLoader所加载的类。</p><p>但如果情况要反过来，是右边的ClassLoader所加载的代码需要反过来去找委派链靠左边的ClassLoader去加载东西怎么办呢？没辙，parent delegation是单向的，没办法反过来从右边找左边.</p><p>就是说当我们this.getClass().getClassLoader();可以获取到所有已经加载过的文件, 但是Application class loader -&gt; Extension class loader -&gt; Bootstrap class loader 就获取不到Custom ClassLoader 能加载到的信息,那么怎么办呢? 于是,Thread就把当前的类加载器,给保存下来了,其他加载器,需要的时候,就把当前线程的加载器,获取到.</p><p>4、从源码来分析jdbc的SPI</p><h3 id="_4-1-jdbc介绍" tabindex="-1"><a class="header-anchor" href="#_4-1-jdbc介绍"><span>4.1 jdbc介绍</span></a></h3><blockquote><p>jdbc是java标准的一部分,并不是一开始就支持SPI的,是从JDBC4开始支持,Jdbc4是随着jdk1.6发布的,目前最新的也就是jdbc4.3,随着jdk9发布的, jdbc规范从4.0开始支持SPI,如果要使用spi连接mysql的数据库,那么需要mysql驱动版本至少为5.1.6,之前版本是适配jdbc4.0之前的规范的.</p><p>打开</p></blockquote>`,33),r={href:"https://blog.csdn.net/teamlet/article/details/52389665",target:"_blank",rel:"noopener noreferrer"},d={href:"https://blog.csdn.net/u011179993/article/details/47291827",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.herongyang.com/JDBC/Overview-JDBC-Version.html",target:"_blank",rel:"noopener noreferrer"},k=e(`<p>5.1.6版本的mysql驱动,可以看到有一个META-INF/services/java.sql.Driver 就是SPI规范要求的文件</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401100944285.png" alt="image-20220401100944285"></p><p>5.1.5版本打开看看,就没有了META-INF/services/java.sql.Driver</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401101107751.png" alt="image-20220401101107751"></p><p>jdbc4.0规范说了，可以自动加载驱动，就是因为用了这个SPI，当然你的驱动必须是&gt;=5.1.6版本</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401101430752.png" alt="image-20220401101430752"></p><h3 id="_4-2-jdbc一定打破双亲委派吗" tabindex="-1"><a class="header-anchor" href="#_4-2-jdbc一定打破双亲委派吗"><span>4.2 jdbc一定打破双亲委派吗?</span></a></h3><p>在[4.1小节](#4.1 jdbc介绍)介绍了很多jdbc的东西,这些东西在我们实际开发中其实并没人关注,说了这么多主要是为了搞清楚jdbc打破双亲委派机制问题.</p><p>我在看了很多博客包括周志明老师的《深入理解java虚拟机》都说了jdbc就打破双亲委派，其实这种说法不严谨，我在测试时用的mysql驱动时<code>5.1.5</code>版本，此版本还没支持SPI，只能用Class.forname(&quot;com.msyql.java.Driver&quot;)来加载驱动，使用这种方式其实并没有打破双亲委派。</p><p>现在很多新手刚使用jdbc时，随笔一搜《jdbc连接过程xxx》基本上出来的结果第一步都是让你<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code>，其时压根不用写这一行，直接<code>DriverManager.getConnection(&quot;jdbc:mysqlxxxx&quot;)</code>就可以了（前提是你的jdk1.6+，mysql驱动5.1.6+，现在很少有jdk1.6以下的了吧）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//            Connection connection = DriverManager.getConnection(&quot;jdbc:mysql://10.10.102.105:3306/abc123&quot;, &quot;root&quot;, &quot;sonoscape&quot;);</span>
<span class="token comment">//            Statement statement = connection.createStatement();</span>
<span class="token comment">//            ResultSet resultSet = statement.executeQuery(&quot;select * from users&quot;);</span>
<span class="token comment">//            while (resultSet.next()) {</span>
<span class="token comment">//                String string = resultSet.getString(7);</span>
<span class="token comment">//                System.out.println(string);</span>
<span class="token comment">//            }</span>

        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>真正的打破双亲委派是在jdbc4.0+，并且mysql驱动在5.1.6+才会使用SPI打破双亲委派</p><p>关于<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code>这里调试类加载过程不再分析，调试中使用<code>-verbose:class</code>可以看到类加载过程，<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code>执行完后，<code>com.mysql.jdbc.Driver</code>类就会被加载。</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401103855153.png" alt="image-20220401103855153"></p><h3 id="_4-3-调试jdbc4-0-、mysql5-1-6-版本的spi打破双亲委派" tabindex="-1"><a class="header-anchor" href="#_4-3-调试jdbc4-0-、mysql5-1-6-版本的spi打破双亲委派"><span>4.3 调试jdbc4.0+、mysql5.1.6+版本的spi打破双亲委派</span></a></h3><p>测试环境：</p><p>linux 、jdk8（jdbc4.2）、mysql驱动：5.1.6</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token comment">//测试代码就这一行，jvm参数：-verbose:class </span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql:///abc123&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>记得打上断点开启debug之路，第一次进入断点输出的类加载信息如下，可以看到我们的Client类被加载了，看完了日志后清理，防止太多看起来烟花缭乱</li></ol><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401112702397.png" alt="image-20220401112702397"></p><ol start="2"><li>接下来肯用到<code>DriverManager</code>，肯定要触发加载，在日志中可以看到</li></ol><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401112907223.png" alt="image-20220401112907223"></p><ol start="3"><li><p>提前到<code>java.sql.DriverManager#loadInitialDrivers</code>打好断点，586行看到了熟悉的<code>ServiceLoader</code>，这就是SPI的核心，它要触发Driver.class的加载了。</p><p>==注意：此时我们还在<code>DriverManager</code>中这个类在jdk的核心包中lib下，也就是rt.jar中，<a href="#1%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%EF%BC%9F">在第一节就说了</a>，此包中的类是由启动类加载器BootStrapClassLoader负责的，这是由C++写的，java中看不到，这个类加载器就要委托其子孙加载器来加载<code>Driver</code>==，先到<code>java.util.ServiceLoader#load(java.lang.Class&lt;S&gt;)</code>提前打好断点继续调试，来证明</p></li></ol><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401113115859.png" alt="image-20220401113115859"></p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401113617886.png" alt="image-20220401113617886"></p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401113707945.png" alt="image-20220401113707945"></p><ol start="4"><li><p>先加载了<code>java.sql.Driver</code>，这个肯定也是启动类加载器加载的，然后注意看<code>ClassLoader cl = Thread.currentThread().getContextClassLoader();</code>这里获取线程上下文加载器，默认就是AppClassLoader，然后用获取到的类加载器来加载Driver==&gt;<code>ServiceLoader.load(service, cl);</code></p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401114332820.png" alt="image-20220401114332820"></p></li><li><p>跟踪进入另一个load方法</p></li></ol><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401114631784.png" alt="image-20220401114631784"></p><ol start="6"><li><p>继续跟踪，<code>java.util.ServiceLoader#load(java.lang.Class&lt;S&gt;)</code>执行完了回到此处</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401115310972.png" alt="image-20220401115310972"></p></li><li><p>这里就是真正要加载<code>com.mysql.jdbc.Driver</code>了</p></li></ol><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401115430364.png" alt="image-20220401115430364"></p><ol start="8"><li><p>跟踪进去，最后会进入<code>java.util.ServiceLoader.LazyIterator#nextService</code>，可以到这里用AppClassLoader加载了<code>com.mysql.jdbc.Driver</code>，这个类就是之前在<code>java.sql.DriverManager</code>的静态代码快中受到BootStrapClassLoader的委托而加载的。这就证明了父加载器委托子加载器加载，从而证明了spi打破了双亲委派机制</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401115555240.png" alt="image-20220401115555240"></p></li></ol><p><strong>注：</strong></p><p>==<em>打破双亲委派不是看类最终由哪个类加载器加载，而是看有没有父加载器委托子加载器进行加载，这个逆向的动作。</em>==</p>`,33);function m(v,b){const n=c("ExternalLinkIcon");return o(),l("div",null,[u,a("p",null,[a("a",r,[s("jdbc版本"),t(n)])]),a("p",null,[a("a",d,[s("jdbc版本特性"),t(n)])]),a("p",null,[a("a",g,[s("jdbc版本主要特性"),t(n)])]),k])}const y=p(i,[["render",m],["__file","ParentDelegationClassLoader.html.vue"]]),q=JSON.parse('{"path":"/java/advance/ParentDelegationClassLoader.html","title":"证明SPI打破双亲委派模式","lang":"zh-CN","frontmatter":{"title":"证明SPI打破双亲委派模式","date":"2022-03-30T00:00:00.000Z","author":"chenkun","publish":true,"sticky":1,"keys":null,"description":"为什么说spi打破了双亲委派机制？ 1、什么是双亲委派？ image-20220330170731913 注：此处直接摘抄周志明老师的《深入理解java虚拟机》 站在Java虚拟机的角度来看,只存在两种不同的类加载器:一种是启动类加载器(Bootstrap ClassLoader),这个类加载器使用C++语言实现[1] ,是虚拟机自身的一部分;另外一种...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/java/advance/ParentDelegationClassLoader.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"证明SPI打破双亲委派模式"}],["meta",{"property":"og:description","content":"为什么说spi打破了双亲委派机制？ 1、什么是双亲委派？ image-20220330170731913 注：此处直接摘抄周志明老师的《深入理解java虚拟机》 站在Java虚拟机的角度来看,只存在两种不同的类加载器:一种是启动类加载器(Bootstrap ClassLoader),这个类加载器使用C++语言实现[1] ,是虚拟机自身的一部分;另外一种..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220330170731913.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-22T03:45:12.000Z"}],["meta",{"property":"article:author","content":"chenkun"}],["meta",{"property":"article:published_time","content":"2022-03-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-22T03:45:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"证明SPI打破双亲委派模式\\",\\"image\\":[\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220330170731913.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220331151619068.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220331151531624.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401100944285.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401101107751.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401101430752.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401103855153.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401112702397.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401112907223.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401113115859.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401113617886.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401113707945.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401114332820.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401114631784.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401115310972.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401115430364.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220401115555240.png\\"],\\"datePublished\\":\\"2022-03-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-22T03:45:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"chenkun\\"}]}"]]},"headers":[{"level":2,"title":"1、什么是双亲委派？","slug":"_1、什么是双亲委派","link":"#_1、什么是双亲委派","children":[]},{"level":2,"title":"2、什么是SPI","slug":"_2、什么是spi","link":"#_2、什么是spi","children":[{"level":3,"title":"2.1 定义","slug":"_2-1-定义","link":"#_2-1-定义","children":[]},{"level":3,"title":"2.2 使用场景","slug":"_2-2-使用场景","link":"#_2-2-使用场景","children":[]},{"level":3,"title":"2.3 自己写一个SPI模拟jdbc的spi","slug":"_2-3-自己写一个spi模拟jdbc的spi","link":"#_2-3-自己写一个spi模拟jdbc的spi","children":[]}]},{"level":2,"title":"3、为什么SPI打破了双亲委派","slug":"_3、为什么spi打破了双亲委派","link":"#_3、为什么spi打破了双亲委派","children":[{"level":3,"title":"3.1 ContextClassLoader","slug":"_3-1-contextclassloader","link":"#_3-1-contextclassloader","children":[]},{"level":3,"title":"4.1 jdbc介绍","slug":"_4-1-jdbc介绍","link":"#_4-1-jdbc介绍","children":[]},{"level":3,"title":"4.2 jdbc一定打破双亲委派吗?","slug":"_4-2-jdbc一定打破双亲委派吗","link":"#_4-2-jdbc一定打破双亲委派吗","children":[]},{"level":3,"title":"4.3 调试jdbc4.0+、mysql5.1.6+版本的spi打破双亲委派","slug":"_4-3-调试jdbc4-0-、mysql5-1-6-版本的spi打破双亲委派","link":"#_4-3-调试jdbc4-0-、mysql5-1-6-版本的spi打破双亲委派","children":[]}]}],"git":{"createdTime":1659362219000,"updatedTime":1711079112000,"contributors":[{"name":"chenkun","email":"462488588@qq.com","commits":2},{"name":"ChenSino","email":"462488588@qq.com","commits":1}]},"readingTime":{"minutes":12.94,"words":3881},"filePathRelative":"java/advance/ParentDelegationClassLoader.md","localizedDate":"2022年3月30日","excerpt":"<p>为什么说spi打破了双亲委派机制？</p>\\n<!--more-->\\n<h2>1、什么是双亲委派？</h2>\\n<p><img src=\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220330170731913.png\\" alt=\\"image-20220330170731913\\"></p>\\n<p><em>注：此处直接摘抄周志明老师的《深入理解java虚拟机》</em></p>\\n<blockquote>\\n<p>站在Java虚拟机的角度来看,只存在两种不同的类加载器:一种是启动类加载器(Bootstrap\\nClassLoader),这个类加载器使用C++语言实现[1] ,是虚拟机自身的一部分;另外一种就是其他所有\\n的类加载器,这些类加载器都由Java语言实现,独立存在于虚拟机外部,并且全都继承自抽象类\\njava.lang.ClassLoader。\\n​站在Java开发人员的角度来看,类加载器就应当划分得更细致一些。自JDK 1.2以来,Java一直保\\n持着三层类加载器、双亲委派的类加载架构,尽管这套架构在Java模块化系统出现后有了一些调整变\\n动,但依然未改变其主体结构,我们将在7.5节中专门讨论模块化系统下的类加载器。\\n本节内容将针对JDK 8及之前版本的Java来介绍什么是三层类加载器,以及什么是双亲委派模型。\\n对于这个时期的Java应用,绝大多数Java程序都会使用到以下3个系统提供的类加载器来进行加载。\\n·启动类加载器(Bootstrap Class Loader):前面已经介绍过,这个类加载器负责加载存放在\\nJAVA_HOM/lib目录,或者被-Xbootclasspath参数所指定的路径中存放的,而且是Java虚拟机能够\\n识别的(按照文件名识别,如rt.jar、tools.jar,名字不符合的类库即使放在lib目录中也不会被加载)类\\n库加载到虚拟机的内存中。启动类加载器无法被Java程序直接引用,用户在编写自定义类加载器时,\\n如果需要把加载请求委派给引导类加载器去处理,那直接使用null代替即可,代码清单7-9展示的就是\\njava.lang.ClassLoader.getClassLoader()方法的代码片段,其中的注释和代码实现都明确地说明了以null值\\n来代表引导类加载器的约定规则。</p>\\n<p>·扩展类加载器(Extension Class Loader):这个类加载器是在类<code>sun.misc.Launcher$ExtClassLoader</code>\\n中以Java代码的形式实现的。它负责加载&lt;JAVA_HOME&gt;\\\\lib\\\\ext目录中,或者被java.ext.dirs系统变量所\\n指定的路径中所有的类库。根据“扩展类加载器”这个名称,就可以推断出这是一种Java系统类库的扩\\n展机制,JDK的开发团队允许用户将具有通用性的类库放置在ext目录里以扩展Java SE的功能,在JDK\\n9之后,这种扩展机制被模块化带来的天然的扩展能力所取代。由于扩展类加载器是由Java代码实现\\n的,开发者可以直接在程序中使用扩展类加载器来加载Class文件。\\n·应用程序类加载器(Application Class Loader):这个类加载器由\\nsun.misc.Launcher$AppClassLoader来实现。由于应用程序类加载器是ClassLoader类中的getSystem-\\nClassLoader()方法的返回值,所以有些场合中也称它为“系统类加载器”。它负责加载用户类路径\\n(ClassPath)上所有的类库,开发者同样可以直接在代码中使用这个类加载器。如果应用程序中没有\\n自定义过自己的类加载器,一般情况下这个就是程序中默认的类加载器。</p>\\n<p>​JDK 9之前的Java应用都是由这三种类加载器互相配合来完成加载的,如果用户认为有必要,还可\\n以加入自定义的类加载器来进行拓展,典型的如增加除了磁盘位置之外的Class文件来源,或者通过类\\n加载器实现类的隔离、重载等功能。这些类加载器之间的协作关系“通常”会如图7-2所示。\\n图7-2中展示的各种类加载器之间的层次关系被称为类加载器的“双亲委派模型(Parents Delegation\\nM odel)”。双亲委派模型要求除了顶层的启动类加载器外,其余的类加载器都应有自己的父类加载\\n器。不过这里类加载器之间的父子关系一般不是以继承(Inheritance)的关系来实现的,而是通常使用\\n组合(Composition)关系来复用父加载器的代码。\\n读者可能注意到前面描述这种类加载器协作关系时,笔者专门用双引号强调这是“通常”的协作关\\n系。类加载器的双亲委派模型在JDK 1.2时期被引入,并被广泛应用于此后几乎所有的Java程序中,但\\n它并不是一个具有强制性约束力的模型,而是Java设计者们推荐给开发者的一种类加载器实现的最佳\\n实践。\\n​双亲委派模型的工作过程是:如果一个类加载器收到了类加载的请求,它首先不会自己去尝试加\\n载这个类,而是把这个请求委派给父类加载器去完成,每一个层次的类加载器都是如此,因此所有的\\n加载请求最终都应该传送到最顶层的启动类加载器中,只有当父加载器反馈自己无法完成这个加载请\\n求(它的搜索范围中没有找到所需的类)时,子加载器才会尝试自己去完成加载。\\n使用双亲委派模型来组织类加载器之间的关系,一个显而易见的好处就是Java中的类随着它的类\\n加载器一起具备了一种带有优先级的层次关系。例如类java.lang.Object,它存放在rt.jar之中,无论哪一\\n个类加载器要加载这个类,最终都是委派给处于模型最顶端的启动类加载器进行加载,因此Object类\\n在程序的各种类加载器环境中都能够保证是同一个类。反之,如果没有使用双亲委派模型,都由各个\\n类加载器自行去加载的话,如果用户自己也编写了一个名为java.lang.Object的类,并放在程序的\\nClassPath中,那系统中就会出现多个不同的Object类,Java类型体系中最基础的行为也就无从保证,应\\n用程序将会变得一片混乱。如果读者有兴趣的话,可以尝试去写一个与rt.jar类库中已有类重名的Java\\n类,将会发现它可以正常编译,但永远无法被加载运行[2]。\\n​双亲委派模型对于保证Java程序的稳定运作极为重要,但它的实现却异常简单,用以实现双亲委\\n派的代码只有短短十余行,全部集中在java.lang.ClassLoader的loadClass()方法之中。</p>\\n</blockquote>","autoDesc":true}');export{y as comp,q as data};

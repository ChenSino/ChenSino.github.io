import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o,c as i,a as s,b as n,d as e,e as t}from"./app-Cs38sdJl.js";const c={},r=t(`<h3 id="_1、mysql主从复制" tabindex="-1"><a class="header-anchor" href="#_1、mysql主从复制"><span>1、mysql主从复制</span></a></h3><h4 id="_1-1-搭建主从复制目的" tabindex="-1"><a class="header-anchor" href="#_1-1-搭建主从复制目的"><span>1.1 搭建主从复制目的？</span></a></h4><blockquote><p>为了实现读写分离，解决数据库性能问题，读写分离中，“读”的数据是从哪里来呢？其实他是从“写”库copy过来的</p></blockquote><h4 id="_1-2-使用docker搭建基于mysql8的主从复制" tabindex="-1"><a class="header-anchor" href="#_1-2-使用docker搭建基于mysql8的主从复制"><span>1.2 使用docker搭建基于mysql8的主从复制</span></a></h4><ol><li><p>创建容器</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mysql_master <span class="token parameter variable">-p</span> <span class="token number">3001</span>:3306 <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root <span class="token parameter variable">-d</span> mysql:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这一步创建容器的目的是查看那以及获取mysql配置文件，然后把它的配置文件copy到宿主机，这样方便直接在宿主机修改mysql配置，如果不事先把mysql配置文件获取出来，直接用docker的-v去挂载的话会有问题，无法达到把docker容器配置映射到宿主机的目的（可能是我的方式不对）</p></li><li><p>把容器内mysql配置copy到宿主机，配置文件在/etc/mysql，直接把整个目录copy到宿主机</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> 容器ID@:/etc/mysql /home/user/master <span class="token comment">#master 库的配置，路径可以自由在指定</span>
<span class="token function">docker</span> <span class="token function">cp</span> 容器ID@:/etc/mysql /home/user/slave  <span class="token comment">#slave库配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>分别修改master和slave的配置文件my.cnf，在mysqld下增加以下内容</p><p>master配置</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
<span class="token comment">## 设置server_id，一般设置为IP最后一位，直接写ip会报错，同一局域网内注意要唯一</span>
<span class="token assign-left variable">server_id</span><span class="token operator">=</span><span class="token number">100</span>  
<span class="token comment">## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span>
binlog-ignore-db<span class="token operator">=</span>mysql  
<span class="token comment">## 开启二进制日志功能，可以随便取，最好有含义（关键就是这里了）</span>
log-bin<span class="token operator">=</span>edu-mysql-bin  
<span class="token comment">## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存</span>
<span class="token assign-left variable">binlog_cache_size</span><span class="token operator">=</span>1M  
<span class="token comment">## 主从复制的格式（mixed,statement,row，默认格式是statement）</span>
<span class="token assign-left variable">binlog_format</span><span class="token operator">=</span>mixed  
<span class="token comment">## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。</span>
<span class="token assign-left variable">expire_logs_days</span><span class="token operator">=</span><span class="token number">7</span>  
<span class="token comment">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span>
<span class="token comment">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span>
<span class="token assign-left variable">slave_skip_errors</span><span class="token operator">=</span><span class="token number">1062</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>slave配置</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
<span class="token comment">## 设置server_id，一般设置为IP最后一位，直接写ip会报错，同一局域网内注意要唯一</span>
<span class="token assign-left variable">server_id</span><span class="token operator">=</span><span class="token number">101</span>  
<span class="token comment">## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span>
binlog-ignore-db<span class="token operator">=</span>mysql  
<span class="token comment">## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用</span>
log-bin<span class="token operator">=</span>edu-mysql-slave1-bin  
<span class="token comment">## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存</span>
<span class="token assign-left variable">binlog_cache_size</span><span class="token operator">=</span>1M  
<span class="token comment">## 主从复制的格式（mixed,statement,row，默认格式是statement）</span>
<span class="token assign-left variable">binlog_format</span><span class="token operator">=</span>mixed  
<span class="token comment">## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。</span>
<span class="token assign-left variable">expire_logs_days</span><span class="token operator">=</span><span class="token number">7</span>  
<span class="token comment">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span>
<span class="token comment">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span>
<span class="token assign-left variable">slave_skip_errors</span><span class="token operator">=</span><span class="token number">1062</span>  
<span class="token comment">## relay_log配置中继日志</span>
<span class="token assign-left variable">relay_log</span><span class="token operator">=</span>edu-mysql-relay-bin  
<span class="token comment">## log_slave_updates表示slave将复制事件写进自己的二进制日志</span>
<span class="token assign-left variable">log_slave_updates</span><span class="token operator">=</span><span class="token number">1</span>  
<span class="token comment">## 防止改变数据(除了特殊的线程)</span>
<span class="token assign-left variable">read_only</span><span class="token operator">=</span><span class="token number">1</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>删除刚启动的容器，当然不删除也无所谓，我们启动它主要是获取里面的mysql配置，好方便映射出来</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token comment">#查看容器id</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> mysql容器id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>启动master</p><p><code>/home/chenkun/DockerConfigs/mysql-cluster/master/mysql</code>是第二步设置的</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mysql_master <span class="token parameter variable">-p</span> <span class="token number">3001</span>:3306 <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root <span class="token parameter variable">-v</span> /home/chenkun/DockerConfigs/mysql-cluster/master/mysql:/etc/mysql <span class="token parameter variable">-d</span> mysql:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看master的状态，这一步查询结果后续第9步slave会用到</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ mysql <span class="token parameter variable">-h</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">-P</span> <span class="token number">3001</span> <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-proot</span>

mysql<span class="token operator">&gt;</span> show master status<span class="token punctuation">;</span>
+----------------------+----------+--------------+------------------+-------------------+
<span class="token operator">|</span> File                 <span class="token operator">|</span> Position <span class="token operator">|</span> Binlog_Do_DB <span class="token operator">|</span> Binlog_Ignore_DB <span class="token operator">|</span> Executed_Gtid_Set <span class="token operator">|</span>
+----------------------+----------+--------------+------------------+-------------------+
<span class="token operator">|</span> edu-mysql-bin.000003 <span class="token operator">|</span>      <span class="token number">396</span> <span class="token operator">|</span>              <span class="token operator">|</span> mysql            <span class="token operator">|</span>                   <span class="token operator">|</span>
+----------------------+----------+--------------+------------------+-------------------+
<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在master添加一个账户，并给用户授权，目的是给slave用来从master同步数据用的（创建用户建议用navicat，因为要选择插件为mysql_native_password）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#如果非要使用命令行创建用户使用以下命令（推荐使用navicat）</span>
mysql<span class="token operator">&gt;</span>CREATE <span class="token environment constant">USER</span> <span class="token string">&#39;slave&#39;</span>@<span class="token string">&#39;%&#39;</span> IDENTIFIED BY <span class="token string">&#39;root&#39;</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span>user mysql
mysql<span class="token operator">&gt;</span>update user <span class="token builtin class-name">set</span> <span class="token assign-left variable">plugin</span><span class="token operator">=</span><span class="token string">&#39;mysql_native_password&#39;</span> where user <span class="token operator">=</span> slave<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO <span class="token string">&#39;slave&#39;</span>@<span class="token string">&#39;%&#39;</span><span class="token punctuation">;</span>   <span class="token comment"># 授权给slave</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>启动slave</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 映射到宿主机3002端口，挂载其对应的配置目录</span>
<span class="token function">docker</span> run <span class="token parameter variable">--name</span> mysql_slave <span class="token parameter variable">-p</span> <span class="token number">3002</span>:3306 <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root <span class="token parameter variable">-v</span> /home/chenkun/DockerConfigs/mysql-cluster/slave/mysql:/etc/mysql <span class="token parameter variable">-d</span> mysql:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查看宿主机的ip,设置和master的关联（注意此处不能用localhost以及127.0.0.1，在容器中使用localhost指向的是容器而不是宿主机）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect 容器id <span class="token comment">#在返回结果找ip,172.17.x.x</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>172.17.0.2是master容器的ip,slave是第7步在master建立的用户，root是密码 ，edu-mysql-bin.000003和master_log_pos是第6步查询的解雇哦</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">##记得先进入先进入slave库，在mysql命令行执行以下</span>
mysql<span class="token operator">&gt;</span> change master to <span class="token assign-left variable">master_host</span><span class="token operator">=</span><span class="token string">&#39;172.17.0.2&#39;</span>, <span class="token assign-left variable">master_user</span><span class="token operator">=</span><span class="token string">&#39;slave&#39;</span>, <span class="token assign-left variable">master_password</span><span class="token operator">=</span><span class="token string">&#39;root&#39;</span>, <span class="token assign-left variable">master_port</span><span class="token operator">=</span><span class="token number">3306</span>, <span class="token assign-left variable">master_log_file</span><span class="token operator">=</span><span class="token string">&#39;edu-mysql-bin.000003&#39;</span>, <span class="token assign-left variable">master_log_pos</span><span class="token operator">=</span><span class="token number">156</span>, <span class="token assign-left variable">master_connect_retry</span><span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>启动slave</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span>start slave<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看slave状态，13、14行为yes就ok了，如果连接失败在47行Slave_SQL_Running_State会报失败原因</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> show slave status<span class="token punctuation">\\</span>G<span class="token punctuation">;</span>
*************************** <span class="token number">1</span>. row ***************************
               Slave_IO_State: Waiting <span class="token keyword">for</span> <span class="token builtin class-name">source</span> to send event
                  Master_Host: <span class="token number">172.17</span>.0.2
                  Master_User: slave
                  Master_Port: <span class="token number">3306</span>
                Connect_Retry: <span class="token number">30</span>
              Master_Log_File: edu-mysql-bin.000003
          Read_Master_Log_Pos: <span class="token number">396</span>
               Relay_Log_File: edu-mysql-relay-bin.000002
                Relay_Log_Pos: <span class="token number">568</span>
        Relay_Master_Log_File: edu-mysql-bin.000003
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes啦v哦
              Replicate_Do_DB:
          Replicate_Ignore_DB:
           Replicate_Do_Table:
       Replicate_Ignore_Table:
      Replicate_Wild_Do_Table:
  Replicate_Wild_Ignore_Table:
                   Last_Errno: <span class="token number">0</span>
                   Last_Error:
                 Skip_Counter: <span class="token number">0</span>
          Exec_Master_Log_Pos: <span class="token number">396</span>
              Relay_Log_Space: <span class="token number">781</span>
              Until_Condition: None
               Until_Log_File:
                Until_Log_Pos: <span class="token number">0</span>
           Master_SSL_Allowed: No
           Master_SSL_CA_File:
           Master_SSL_CA_Path:
              Master_SSL_Cert:
            Master_SSL_Cipher:
               Master_SSL_Key:
        Seconds_Behind_Master: <span class="token number">0</span>
Master_SSL_Verify_Server_Cert: No
                Last_IO_Errno: <span class="token number">0</span>
                Last_IO_Error:
               Last_SQL_Errno: <span class="token number">0</span>
               Last_SQL_Error:
  Replicate_Ignore_Server_Ids:
             Master_Server_Id: <span class="token number">2</span>
                  Master_UUID: dc6dff8a-218e-11ec-b936-0242ac110002
             Master_Info_File: mysql.slave_master_info
                    SQL_Delay: <span class="token number">0</span>
          SQL_Remaining_Delay: NULL
      Slave_SQL_Running_State: Replica has <span class="token builtin class-name">read</span> all relay log<span class="token punctuation">;</span> waiting <span class="token keyword">for</span> <span class="token function">more</span> updates
           Master_Retry_Count: <span class="token number">86400</span>
                  Master_Bind:
      Last_IO_Error_Timestamp:
     Last_SQL_Error_Timestamp:
               Master_SSL_Crl:
           Master_SSL_Crlpath:
           Retrieved_Gtid_Set:
            Executed_Gtid_Set:
                Auto_Position: <span class="token number">0</span>
         Replicate_Rewrite_DB:
                 Channel_Name:
           Master_TLS_Version:
       Master_public_key_path:
        Get_master_public_key: <span class="token number">0</span>
            Network_Namespace:
<span class="token number">1</span> row <span class="token keyword">in</span> set, <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="12"><li><p>测试主从同步</p><p>在master随便加一个库看看能否自动同步到slave</p></li></ol><h3 id="_2、使用mybatis-plus实现读写分离-mysql的主从复制是实现读写分离的基础" tabindex="-1"><a class="header-anchor" href="#_2、使用mybatis-plus实现读写分离-mysql的主从复制是实现读写分离的基础"><span>2、使用mybatis-plus实现读写分离（mysql的主从复制是实现读写分离的基础）</span></a></h3><h5 id="_2-1-参考文档" tabindex="-1"><a class="header-anchor" href="#_2-1-参考文档"><span>2.1 参考文档</span></a></h5>`,9),d={href:"https://mp.baomidou.com/guide/dynamic-datasource.html#%E6%96%87%E6%A1%A3-documentation",target:"_blank",rel:"noopener noreferrer"},u=t(`<h5 id="_2-2-java工程" tabindex="-1"><a class="header-anchor" href="#_2-2-java工程"><span>2.2 java工程</span></a></h5><p>mybatis-plus实现多数据源特别简单，只需要引入多数据源的包，再到springboot配置文件配置一下就ok了</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>dynamic-datasource-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> mybatisplus
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>
      <span class="token key atrule">primary</span><span class="token punctuation">:</span> master
      <span class="token key atrule">strict</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
        <span class="token key atrule">master</span><span class="token punctuation">:</span>
          <span class="token comment">#    url: jdbc:mysql:///mybatis_p</span>
          <span class="token comment">#    driver-class-name: com.p6spy.engine.spy.P6SpyDriver</span>
          <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>p6spy<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3001/mybatis_p  <span class="token comment">#使用p6spy在开发环境监控，生产环境不要使用</span>
          <span class="token key atrule">username</span><span class="token punctuation">:</span> root
          <span class="token key atrule">password</span><span class="token punctuation">:</span> root
          <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.p6spy.engine.spy.P6SpyDriver
        <span class="token key atrule">slave_1</span><span class="token punctuation">:</span>
          <span class="token comment">#    url: jdbc:mysql:///mybatis_p</span>
          <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>p6spy<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3002/mybatis_p
          <span class="token key atrule">username</span><span class="token punctuation">:</span> queryUser
          <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
          <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.p6spy.engine.spy.P6SpyDriver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-3-数据库设置" tabindex="-1"><a class="header-anchor" href="#_2-3-数据库设置"><span>2.3 数据库设置</span></a></h5><ol><li>在master库使用脚本创建一个数据库，会自动同步到slave</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;主键ID&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_general_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;年龄&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>email<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_general_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;邮箱&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>grade<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1443412902525784067</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_general_ci<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>用管理员主那个胡登陆到slave库创建一个用户，给其设置只查询权限（和之前slave帐号是两回事）防止在slave库写入数据</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> CREATE <span class="token environment constant">USER</span> <span class="token string">&#39;queryUser&#39;</span>@<span class="token string">&#39;host&#39;</span> IDENTIFIED BY <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>  <span class="token comment"># 添加用户</span>
mysql<span class="token operator">&gt;</span> GRANT SElECT ON *.* TO <span class="token string">&#39;queryUser&#39;</span>@<span class="token string">&#39;%&#39;</span><span class="token punctuation">;</span>					<span class="token comment"># 设置查询权限</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h5 id="_2-4-测试通过java读写分离是否成功" tabindex="-1"><a class="header-anchor" href="#_2-4-测试通过java读写分离是否成功"><span>2.4 测试通过java读写分离是否成功</span></a></h5><ol><li><p>在master随便加一个user用户（会自动同步到slave）</p></li><li><p>到slave库中用管理员用户修改一下同步过来的数据（和master进行区分，方便知道查询的哪个库）</p></li><li><p>分别查询两个库，看看是否得到的不一样的结果。这一步用@DS(&quot;slave_1&quot;)切换到从库，<strong>注意不要在单元测试中使用@DS,不会生效的</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/slave-list&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@DS</span><span class="token punctuation">(</span><span class="token string">&quot;slave_1&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">userListSlave</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/master-list&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">userListMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对比请求结果，发现两次查询的name不一样，说明成功了</p><p>http://192.168.92.31:8080/slave-list 访问结果</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1443412093146714113</span><span class="token punctuation">,</span>
        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
        <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;aaa.@com&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;grade&quot;</span><span class="token operator">:</span> <span class="token string">&quot;SECONDARY&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>http://192.168.92.31:8080/master-list 访问结果</p></li></ol><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1443412093146714113</span><span class="token punctuation">,</span>
        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
        <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;aaa.@com&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;grade&quot;</span><span class="token operator">:</span> <span class="token string">&quot;SECONDARY&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-5-、测试代码地址" tabindex="-1"><a class="header-anchor" href="#_2-5-、测试代码地址"><span>2.5 、测试代码地址</span></a></h5>`,12),m={href:"https://github.com/chen462488588/afatpig",target:"_blank",rel:"noopener noreferrer"};function k(v,b){const a=l("ExternalLinkIcon");return o(),i("div",null,[r,s("p",null,[s("a",d,[n("mybatis-plus多数据源"),e(a)])]),u,s("p",null,[s("a",m,[n("github"),e(a)])])])}const _=p(c,[["render",k],["__file","MysqlMasterSlave.html.vue"]]),h=JSON.parse(`{"path":"/java/advance/MysqlMasterSlave.html","title":"mysql8搭建主从复制","lang":"zh-CN","frontmatter":{"title":"mysql8搭建主从复制","date":"2019-08-19T00:00:00.000Z","category":["java"],"tag":["部署搭建"],"description":"1、mysql主从复制 1.1 搭建主从复制目的？ 为了实现读写分离，解决数据库性能问题，读写分离中，“读”的数据是从哪里来呢？其实他是从“写”库copy过来的 1.2 使用docker搭建基于mysql8的主从复制 创建容器 这一步创建容器的目的是查看那以及获取mysql配置文件，然后把它的配置文件copy到宿主机，这样方便直接在宿主机修改mysql...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/java/advance/MysqlMasterSlave.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"mysql8搭建主从复制"}],["meta",{"property":"og:description","content":"1、mysql主从复制 1.1 搭建主从复制目的？ 为了实现读写分离，解决数据库性能问题，读写分离中，“读”的数据是从哪里来呢？其实他是从“写”库copy过来的 1.2 使用docker搭建基于mysql8的主从复制 创建容器 这一步创建容器的目的是查看那以及获取mysql配置文件，然后把它的配置文件copy到宿主机，这样方便直接在宿主机修改mysql..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-02T02:11:36.000Z"}],["meta",{"property":"article:author","content":"ChenSino"}],["meta",{"property":"article:tag","content":"部署搭建"}],["meta",{"property":"article:published_time","content":"2019-08-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-02T02:11:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mysql8搭建主从复制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-08-19T00:00:00.000Z\\",\\"dateModified\\":\\"2022-08-02T02:11:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChenSino\\",\\"url\\":\\"https://ChenSino.github.io\\"}]}"]]},"headers":[{"level":3,"title":"1、mysql主从复制","slug":"_1、mysql主从复制","link":"#_1、mysql主从复制","children":[]},{"level":3,"title":"2、使用mybatis-plus实现读写分离（mysql的主从复制是实现读写分离的基础）","slug":"_2、使用mybatis-plus实现读写分离-mysql的主从复制是实现读写分离的基础","link":"#_2、使用mybatis-plus实现读写分离-mysql的主从复制是实现读写分离的基础","children":[]}],"git":{"createdTime":1659362219000,"updatedTime":1659406296000,"contributors":[{"name":"ChenSino","email":"462488588@qq.com","commits":1},{"name":"chenkun","email":"462488588@qq.com","commits":1}]},"readingTime":{"minutes":6.67,"words":2000},"filePathRelative":"java/advance/MysqlMasterSlave.md","localizedDate":"2019年8月19日","excerpt":"<h3>1、mysql主从复制</h3>\\n<h4>1.1 搭建主从复制目的？</h4>\\n<blockquote>\\n<p>为了实现读写分离，解决数据库性能问题，读写分离中，“读”的数据是从哪里来呢？其实他是从“写”库copy过来的</p>\\n</blockquote>\\n<h4>1.2 使用docker搭建基于mysql8的主从复制</h4>\\n<ol>\\n<li>\\n<p>创建容器</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">docker</span> run <span class=\\"token parameter variable\\">--name</span> mysql_master <span class=\\"token parameter variable\\">-p</span> <span class=\\"token number\\">3001</span>:3306 <span class=\\"token parameter variable\\">-e</span> <span class=\\"token assign-left variable\\">MYSQL_ROOT_PASSWORD</span><span class=\\"token operator\\">=</span>root <span class=\\"token parameter variable\\">-d</span> mysql:latest\\n</code></pre></div><p>这一步创建容器的目的是查看那以及获取mysql配置文件，然后把它的配置文件copy到宿主机，这样方便直接在宿主机修改mysql配置，如果不事先把mysql配置文件获取出来，直接用docker的-v去挂载的话会有问题，无法达到把docker容器配置映射到宿主机的目的（可能是我的方式不对）</p>\\n</li>\\n<li>\\n<p>把容器内mysql配置copy到宿主机，配置文件在/etc/mysql，直接把整个目录copy到宿主机</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">docker</span> <span class=\\"token function\\">cp</span> 容器ID@:/etc/mysql /home/user/master <span class=\\"token comment\\">#master 库的配置，路径可以自由在指定</span>\\n<span class=\\"token function\\">docker</span> <span class=\\"token function\\">cp</span> 容器ID@:/etc/mysql /home/user/slave  <span class=\\"token comment\\">#slave库配置</span>\\n</code></pre></div></li>\\n<li>\\n<p>分别修改master和slave的配置文件my.cnf，在mysqld下增加以下内容</p>\\n<p>master配置</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token punctuation\\">[</span>mysqld<span class=\\"token punctuation\\">]</span>\\n<span class=\\"token comment\\">## 设置server_id，一般设置为IP最后一位，直接写ip会报错，同一局域网内注意要唯一</span>\\n<span class=\\"token assign-left variable\\">server_id</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">100</span>  \\n<span class=\\"token comment\\">## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span>\\nbinlog-ignore-db<span class=\\"token operator\\">=</span>mysql  \\n<span class=\\"token comment\\">## 开启二进制日志功能，可以随便取，最好有含义（关键就是这里了）</span>\\nlog-bin<span class=\\"token operator\\">=</span>edu-mysql-bin  \\n<span class=\\"token comment\\">## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存</span>\\n<span class=\\"token assign-left variable\\">binlog_cache_size</span><span class=\\"token operator\\">=</span>1M  \\n<span class=\\"token comment\\">## 主从复制的格式（mixed,statement,row，默认格式是statement）</span>\\n<span class=\\"token assign-left variable\\">binlog_format</span><span class=\\"token operator\\">=</span>mixed  \\n<span class=\\"token comment\\">## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。</span>\\n<span class=\\"token assign-left variable\\">expire_logs_days</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">7</span>  \\n<span class=\\"token comment\\">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span>\\n<span class=\\"token comment\\">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span>\\n<span class=\\"token assign-left variable\\">slave_skip_errors</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">1062</span>  \\n</code></pre></div><p>slave配置</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token punctuation\\">[</span>mysqld<span class=\\"token punctuation\\">]</span>\\n<span class=\\"token comment\\">## 设置server_id，一般设置为IP最后一位，直接写ip会报错，同一局域网内注意要唯一</span>\\n<span class=\\"token assign-left variable\\">server_id</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">101</span>  \\n<span class=\\"token comment\\">## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span>\\nbinlog-ignore-db<span class=\\"token operator\\">=</span>mysql  \\n<span class=\\"token comment\\">## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用</span>\\nlog-bin<span class=\\"token operator\\">=</span>edu-mysql-slave1-bin  \\n<span class=\\"token comment\\">## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存</span>\\n<span class=\\"token assign-left variable\\">binlog_cache_size</span><span class=\\"token operator\\">=</span>1M  \\n<span class=\\"token comment\\">## 主从复制的格式（mixed,statement,row，默认格式是statement）</span>\\n<span class=\\"token assign-left variable\\">binlog_format</span><span class=\\"token operator\\">=</span>mixed  \\n<span class=\\"token comment\\">## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。</span>\\n<span class=\\"token assign-left variable\\">expire_logs_days</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">7</span>  \\n<span class=\\"token comment\\">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span>\\n<span class=\\"token comment\\">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span>\\n<span class=\\"token assign-left variable\\">slave_skip_errors</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">1062</span>  \\n<span class=\\"token comment\\">## relay_log配置中继日志</span>\\n<span class=\\"token assign-left variable\\">relay_log</span><span class=\\"token operator\\">=</span>edu-mysql-relay-bin  \\n<span class=\\"token comment\\">## log_slave_updates表示slave将复制事件写进自己的二进制日志</span>\\n<span class=\\"token assign-left variable\\">log_slave_updates</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">1</span>  \\n<span class=\\"token comment\\">## 防止改变数据(除了特殊的线程)</span>\\n<span class=\\"token assign-left variable\\">read_only</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">1</span>  \\n</code></pre></div></li>\\n<li>\\n<p>删除刚启动的容器，当然不删除也无所谓，我们启动它主要是获取里面的mysql配置，好方便映射出来</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">docker</span> <span class=\\"token function\\">ps</span> <span class=\\"token comment\\">#查看容器id</span>\\n<span class=\\"token function\\">docker</span> <span class=\\"token function\\">rm</span> <span class=\\"token parameter variable\\">-f</span> mysql容器id\\n</code></pre></div></li>\\n<li>\\n<p>启动master</p>\\n<p><code>/home/chenkun/DockerConfigs/mysql-cluster/master/mysql</code>是第二步设置的</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">docker</span> run <span class=\\"token parameter variable\\">--name</span> mysql_master <span class=\\"token parameter variable\\">-p</span> <span class=\\"token number\\">3001</span>:3306 <span class=\\"token parameter variable\\">-e</span> <span class=\\"token assign-left variable\\">MYSQL_ROOT_PASSWORD</span><span class=\\"token operator\\">=</span>root <span class=\\"token parameter variable\\">-v</span> /home/chenkun/DockerConfigs/mysql-cluster/master/mysql:/etc/mysql <span class=\\"token parameter variable\\">-d</span> mysql:latest\\n</code></pre></div></li>\\n<li>\\n<p>查看master的状态，这一步查询结果后续第9步slave会用到</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>$ mysql <span class=\\"token parameter variable\\">-h</span> <span class=\\"token number\\">127.0</span>.0.1 <span class=\\"token parameter variable\\">-P</span> <span class=\\"token number\\">3001</span> <span class=\\"token parameter variable\\">-uroot</span> <span class=\\"token parameter variable\\">-proot</span>\\n\\nmysql<span class=\\"token operator\\">&gt;</span> show master status<span class=\\"token punctuation\\">;</span>\\n+----------------------+----------+--------------+------------------+-------------------+\\n<span class=\\"token operator\\">|</span> File                 <span class=\\"token operator\\">|</span> Position <span class=\\"token operator\\">|</span> Binlog_Do_DB <span class=\\"token operator\\">|</span> Binlog_Ignore_DB <span class=\\"token operator\\">|</span> Executed_Gtid_Set <span class=\\"token operator\\">|</span>\\n+----------------------+----------+--------------+------------------+-------------------+\\n<span class=\\"token operator\\">|</span> edu-mysql-bin.000003 <span class=\\"token operator\\">|</span>      <span class=\\"token number\\">396</span> <span class=\\"token operator\\">|</span>              <span class=\\"token operator\\">|</span> mysql            <span class=\\"token operator\\">|</span>                   <span class=\\"token operator\\">|</span>\\n+----------------------+----------+--------------+------------------+-------------------+\\n<span class=\\"token number\\">1</span> row <span class=\\"token keyword\\">in</span> <span class=\\"token builtin class-name\\">set</span> <span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0.00</span> sec<span class=\\"token punctuation\\">)</span>\\n</code></pre></div></li>\\n<li>\\n<p>在master添加一个账户，并给用户授权，目的是给slave用来从master同步数据用的（创建用户建议用navicat，因为要选择插件为mysql_native_password）</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token comment\\">#如果非要使用命令行创建用户使用以下命令（推荐使用navicat）</span>\\nmysql<span class=\\"token operator\\">&gt;</span>CREATE <span class=\\"token environment constant\\">USER</span> <span class=\\"token string\\">'slave'</span>@<span class=\\"token string\\">'%'</span> IDENTIFIED BY <span class=\\"token string\\">'root'</span><span class=\\"token punctuation\\">;</span>\\nmysql<span class=\\"token operator\\">&gt;</span>user mysql\\nmysql<span class=\\"token operator\\">&gt;</span>update user <span class=\\"token builtin class-name\\">set</span> <span class=\\"token assign-left variable\\">plugin</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">'mysql_native_password'</span> where user <span class=\\"token operator\\">=</span> slave<span class=\\"token punctuation\\">;</span>\\n</code></pre></div><div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>mysql<span class=\\"token operator\\">&gt;</span> GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO <span class=\\"token string\\">'slave'</span>@<span class=\\"token string\\">'%'</span><span class=\\"token punctuation\\">;</span>   <span class=\\"token comment\\"># 授权给slave</span>\\n</code></pre></div></li>\\n<li>\\n<p>启动slave</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token comment\\"># 映射到宿主机3002端口，挂载其对应的配置目录</span>\\n<span class=\\"token function\\">docker</span> run <span class=\\"token parameter variable\\">--name</span> mysql_slave <span class=\\"token parameter variable\\">-p</span> <span class=\\"token number\\">3002</span>:3306 <span class=\\"token parameter variable\\">-e</span> <span class=\\"token assign-left variable\\">MYSQL_ROOT_PASSWORD</span><span class=\\"token operator\\">=</span>root <span class=\\"token parameter variable\\">-v</span> /home/chenkun/DockerConfigs/mysql-cluster/slave/mysql:/etc/mysql <span class=\\"token parameter variable\\">-d</span> mysql:latest\\n</code></pre></div></li>\\n<li>\\n<p>查看宿主机的ip,设置和master的关联（注意此处不能用localhost以及127.0.0.1，在容器中使用localhost指向的是容器而不是宿主机）</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">docker</span> inspect 容器id <span class=\\"token comment\\">#在返回结果找ip,172.17.x.x</span>\\n</code></pre></div><p>172.17.0.2是master容器的ip,slave是第7步在master建立的用户，root是密码  ，edu-mysql-bin.000003和master_log_pos是第6步查询的解雇哦</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token comment\\">##记得先进入先进入slave库，在mysql命令行执行以下</span>\\nmysql<span class=\\"token operator\\">&gt;</span> change master to <span class=\\"token assign-left variable\\">master_host</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">'172.17.0.2'</span>, <span class=\\"token assign-left variable\\">master_user</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">'slave'</span>, <span class=\\"token assign-left variable\\">master_password</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">'root'</span>, <span class=\\"token assign-left variable\\">master_port</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">3306</span>, <span class=\\"token assign-left variable\\">master_log_file</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">'edu-mysql-bin.000003'</span>, <span class=\\"token assign-left variable\\">master_log_pos</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">156</span>, <span class=\\"token assign-left variable\\">master_connect_retry</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">30</span><span class=\\"token punctuation\\">;</span> \\n</code></pre></div></li>\\n<li>\\n<p>启动slave</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>mysql<span class=\\"token operator\\">&gt;</span>start slave<span class=\\"token punctuation\\">;</span>\\n</code></pre></div></li>\\n<li>\\n<p>查看slave状态，13、14行为yes就ok了，如果连接失败在47行Slave_SQL_Running_State会报失败原因</p>\\n</li>\\n</ol>","autoDesc":true}`);export{_ as comp,h as data};

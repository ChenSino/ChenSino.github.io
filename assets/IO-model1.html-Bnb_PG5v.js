import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as c,c as o,a as s,b as n,d as l,e as a}from"./app-eaM1OiHO.js";const i={},u=a('<h2 id="_1-bio" tabindex="-1"><a class="header-anchor" href="#_1-bio"><span>1 BIO</span></a></h2><p>当给BIO的accept和read方法加上超时机制后，可以在代码层面解决阻塞问题，但这不是真正的非阻塞，通常我们说的非阻塞是指的操作系统层面的非阻塞，就是当accept通过jni调用native方法后，最终系统不会一直被阻塞。真正的非阻塞是操作系统增加非阻塞功能后，java同步添加java.nio出现以后才有的，因此通过java实现非阻塞，需要调用nio中的类。</p><h2 id="_2-nio" tabindex="-1"><a class="header-anchor" href="#_2-nio"><span>2 NIO</span></a></h2><h2 id="_3-io多路复用" tabindex="-1"><a class="header-anchor" href="#_3-io多路复用"><span>3 IO多路复用</span></a></h2><h2 id="_4-异步io" tabindex="-1"><a class="header-anchor" href="#_4-异步io"><span>4 异步IO</span></a></h2><h2 id="_5-事件驱动的io" tabindex="-1"><a class="header-anchor" href="#_5-事件驱动的io"><span>5 事件驱动的io</span></a></h2><h2 id="_6-reactor线程模型" tabindex="-1"><a class="header-anchor" href="#_6-reactor线程模型"><span>6 reactor线程模型</span></a></h2>',7),k={href:"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/nio.pdf",target:"_blank",rel:"noopener noreferrer"},r=a(`<div class="hint-container caution"><p class="hint-container-title">注意</p><p>注意reactor线程模型并不是5种io模型之一，它是一种经典的事件驱动的线程模型，它是基于IO多路复用模型衍生出来的：</p><p>Reactor线程模式 = Reactor(I/O多路复用)+ 线程池</p><p>Reactor负责监听和分配事件，线程池负责处理事件</p></div><p>根据Reactor的数量和线程池的数量，又可以将Reactor分为三种模型</p><ul><li>单Reactor单线程模型 (固定大小为1的线程池)</li><li>单Reactor多线程模型</li><li>多Reactor多线程模型 (一般是主从2个Reactor)</li></ul><p>reactor模型中有三种角色，分别是：</p><blockquote><p>Acceptor：处理客户端新连接，并分派请求到处理器链中<br> Reactor：负责监听和分配事件，将I/O事件分派给对应的Handler<br> Handler: 事件处理，如编码、解码等</p></blockquote><h3 id="_6-1-单reactor单线程" tabindex="-1"><a class="header-anchor" href="#_6-1-单reactor单线程"><span>6.1 单reactor单线程</span></a></h3><p>应用：redis4.0</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230209155247.png" alt="20230209155247"></p><p>源码示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//------------------------reactor------------------</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">SelectionKey</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">Selector</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">ServerSocketChannel</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">SocketChannel</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Reactor</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Selector</span> selector<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">ServerSocketChannel</span> serverSocket<span class="token punctuation">;</span>

    <span class="token class-name">Reactor</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        serverSocket <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        serverSocket<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        serverSocket<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SelectionKey</span> sk <span class="token operator">=</span>
                serverSocket<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span>
                        <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_ACCEPT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;listen to &quot;</span> <span class="token operator">+</span> port <span class="token punctuation">)</span><span class="token punctuation">;</span>
        sk<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Acceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/*
    Alternatively, use explicit SPI provider:
    SelectorProvider p = SelectorProvider.provider();
    selector = p.openSelector();
    serverSocket = p.openServerSocketChannel();
    */</span>
<span class="token comment">// class Reactor continued</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// normally in a new Thread</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;进入reactor run&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Set</span> selected <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Iterator</span> it <span class="token operator">=</span> selected<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                selected<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;进入reactor dispatch&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Runnable</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Runnable</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// class Reactor continued</span>
    <span class="token keyword">class</span> <span class="token class-name">Acceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span> <span class="token comment">// inner</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;进入Acceptor run&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">SocketChannel</span> c <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//------------------------handler------------------</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBuffer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">SelectionKey</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">Selector</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">SocketChannel</span></span><span class="token punctuation">;</span>

<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">SocketChannel</span> socket<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">SelectionKey</span> sk<span class="token punctuation">;</span>
    <span class="token class-name">ByteBuffer</span> input <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ByteBuffer</span> output <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">READING</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SENDING</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token constant">READING</span><span class="token punctuation">;</span>

    <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token class-name">Selector</span> sel<span class="token punctuation">,</span> <span class="token class-name">SocketChannel</span> c<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;进入handler 处理&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        socket <span class="token operator">=</span> c<span class="token punctuation">;</span>
        c<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Optionally try first read now</span>
        sk <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sk<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sk<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_READ</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sel<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">boolean</span> <span class="token function">inputIsComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">boolean</span> <span class="token function">outputIsComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>

    <span class="token comment">// class Handler continued</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span>
            <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token constant">READING</span><span class="token punctuation">)</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token constant">SENDING</span><span class="token punctuation">)</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        socket<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">inputIsComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            state <span class="token operator">=</span> <span class="token constant">SENDING</span><span class="token punctuation">;</span>
<span class="token comment">// Normally also do first write now</span>
            sk<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_WRITE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">outputIsComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> sk<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//-----------------------main-----</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 单reactor单线程模型
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Reactor</span> reactor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reactor</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>reactor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-单reactor多线程" tabindex="-1"><a class="header-anchor" href="#_6-2-单reactor多线程"><span>6.2 单reactor多线程</span></a></h3><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230209155305.png" alt="20230209155305"></p><h3 id="_6-3-主从-多-reactor多线程" tabindex="-1"><a class="header-anchor" href="#_6-3-主从-多-reactor多线程"><span>6.3 主从（多）reactor多线程</span></a></h3><p>应用：netty</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230209155722.png" alt="20230209155722"></p>`,15);function d(m,v){const t=e("ExternalLinkIcon");return c(),o("div",null,[u,s("p",null,[n("reactor线程模型可参考"),s("a",k,[n("Scalable IO in java"),l(t)]),n("，该书作者也是java.nio的作者")]),r])}const y=p(i,[["render",d],["__file","IO-model1.html.vue"]]),f=JSON.parse('{"path":"/java/advance/IO-model1.html","title":"I/O模型总结","lang":"zh-CN","frontmatter":{"title":"I/O模型总结","date":"2023-02-09T00:00:00.000Z","description":"1 BIO 当给BIO的accept和read方法加上超时机制后，可以在代码层面解决阻塞问题，但这不是真正的非阻塞，通常我们说的非阻塞是指的操作系统层面的非阻塞，就是当accept通过jni调用native方法后，最终系统不会一直被阻塞。真正的非阻塞是操作系统增加非阻塞功能后，java同步添加java.nio出现以后才有的，因此通过java实现非阻塞，...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/java/advance/IO-model1.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"I/O模型总结"}],["meta",{"property":"og:description","content":"1 BIO 当给BIO的accept和read方法加上超时机制后，可以在代码层面解决阻塞问题，但这不是真正的非阻塞，通常我们说的非阻塞是指的操作系统层面的非阻塞，就是当accept通过jni调用native方法后，最终系统不会一直被阻塞。真正的非阻塞是操作系统增加非阻塞功能后，java同步添加java.nio出现以后才有的，因此通过java实现非阻塞，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230209155247.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-22T03:45:12.000Z"}],["meta",{"property":"article:author","content":"ChenSino"}],["meta",{"property":"article:published_time","content":"2023-02-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-22T03:45:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"I/O模型总结\\",\\"image\\":[\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230209155247.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230209155305.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230209155722.png\\"],\\"datePublished\\":\\"2023-02-09T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-22T03:45:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChenSino\\",\\"url\\":\\"https://ChenSino.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1 BIO","slug":"_1-bio","link":"#_1-bio","children":[]},{"level":2,"title":"2 NIO","slug":"_2-nio","link":"#_2-nio","children":[]},{"level":2,"title":"3 IO多路复用","slug":"_3-io多路复用","link":"#_3-io多路复用","children":[]},{"level":2,"title":"4 异步IO","slug":"_4-异步io","link":"#_4-异步io","children":[]},{"level":2,"title":"5 事件驱动的io","slug":"_5-事件驱动的io","link":"#_5-事件驱动的io","children":[]},{"level":2,"title":"6 reactor线程模型","slug":"_6-reactor线程模型","link":"#_6-reactor线程模型","children":[{"level":3,"title":"6.1 单reactor单线程","slug":"_6-1-单reactor单线程","link":"#_6-1-单reactor单线程","children":[]},{"level":3,"title":"6.2 单reactor多线程","slug":"_6-2-单reactor多线程","link":"#_6-2-单reactor多线程","children":[]},{"level":3,"title":"6.3 主从（多）reactor多线程","slug":"_6-3-主从-多-reactor多线程","link":"#_6-3-主从-多-reactor多线程","children":[]}]}],"git":{"createdTime":1676623349000,"updatedTime":1711079112000,"contributors":[{"name":"ChenSino","email":"462488588@qq.com","commits":1},{"name":"chenxk","email":"chenxk@sonoscape.net","commits":1}]},"readingTime":{"minutes":2.65,"words":795},"filePathRelative":"java/advance/IO-model1.md","localizedDate":"2023年2月9日","excerpt":"<h2>1 BIO</h2>\\n<p>当给BIO的accept和read方法加上超时机制后，可以在代码层面解决阻塞问题，但这不是真正的非阻塞，通常我们说的非阻塞是指的操作系统层面的非阻塞，就是当accept通过jni调用native方法后，最终系统不会一直被阻塞。真正的非阻塞是操作系统增加非阻塞功能后，java同步添加java.nio出现以后才有的，因此通过java实现非阻塞，需要调用nio中的类。</p>\\n<h2>2 NIO</h2>\\n<h2>3 IO多路复用</h2>\\n<h2>4 异步IO</h2>\\n<h2>5 事件驱动的io</h2>\\n<h2>6 reactor线程模型</h2>\\n<p>reactor线程模型可参考<a href=\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/nio.pdf\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Scalable IO in java</a>，该书作者也是java.nio的作者</p>","autoDesc":true}');export{y as comp,f as data};

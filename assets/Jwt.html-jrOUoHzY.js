import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-COSs6b7v.js";const e={},p=t(`<h2 id="_1、jwt在服务端如何校验的" tabindex="-1"><a class="header-anchor" href="#_1、jwt在服务端如何校验的"><span>1、jwt在服务端如何校验的？</span></a></h2><p>之前一直用jwt但是仅仅了解他的基本原理没有去思考一个问题——服务端是如何校验jwt的？</p><p>了解过jwt原理的同学都知道jwt是可以自校验的，token里面有header，payload,我有个想法就是如果用户随便生成一个token,那后端是如何知道这个token不能用？或者我把开发环境的token拿到生产环境使用 是否可行？</p><p>jwt用户认证流程如下，因jwt的token是无状态的，所以每次请求都要经过过滤器进行校验，第一次登陆后把生成的token缓存到redis，当校验时如果找到对应token则继续，解析head中userid信息，根据userid查用户角色权限等信息，然后再设置到security的context中，具体代码如下</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2020.cnblogs.com%2Fnews%2F2169646%2F202101%2F2169646-20210118002912071-1277173978.jpg&amp;refer=http%3A%2F%2Fimg2020.cnblogs.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1669274568&amp;t=4074fa30a1f60ddac4f3a668c38b0353" alt="Jwt认证"></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtAuthorizationTokenFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">{</span>


    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${jwt.online}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> onlineKey<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserDetailsService</span> userDetailsService<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">JwtTokenUtil</span> jwtTokenUtil<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">JwtAuthorizationTokenFilter</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;jwtUserDetailsService&quot;</span><span class="token punctuation">)</span> <span class="token class-name">UserDetailsService</span> userDetailsService<span class="token punctuation">,</span> <span class="token class-name">JwtTokenUtil</span> jwtTokenUtil<span class="token punctuation">,</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>userDetailsService <span class="token operator">=</span> userDetailsService<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>jwtTokenUtil <span class="token operator">=</span> jwtTokenUtil<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate <span class="token operator">=</span> redisTemplate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> authToken <span class="token operator">=</span> jwtTokenUtil<span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">OnlineUser</span> onlineUser <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            onlineUser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">OnlineUser</span><span class="token punctuation">)</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>onlineKey <span class="token operator">+</span> authToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExpiredJwtException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>onlineUser <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// It is not compelling necessary to load the use details from the database. You could also store the information</span>
            <span class="token comment">// in the token and read it from it. It&#39;s up to you ;)</span>
            <span class="token class-name">JwtUser</span> userDetails <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">JwtUser</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>userDetailsService<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>onlineUser<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// For simple validation it is completely sufficient to just check the token integrity. You don&#39;t have to call</span>
            <span class="token comment">// the database compellingly. Again it&#39;s up to you ;)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>jwtTokenUtil<span class="token punctuation">.</span><span class="token function">validateToken</span><span class="token punctuation">(</span>authToken<span class="token punctuation">,</span> userDetails<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">UsernamePasswordAuthenticationToken</span> authentication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                authentication<span class="token punctuation">.</span><span class="token function">setDetails</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebAuthenticationDetailsSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildDetails</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、为什么相同用户每次登陆得到的jwt-token不一样" tabindex="-1"><a class="header-anchor" href="#_2、为什么相同用户每次登陆得到的jwt-token不一样"><span>2、为什么相同用户每次登陆得到的jwt token不一样？</span></a></h2><p>一般登录后生成token都会在里面设置过期时间，后端生成token时会在payload添加这个字段，不同时间下，经过签名后得到的token肯定不一样</p><h2 id="_3、jwt-vs-普通token" tabindex="-1"><a class="header-anchor" href="#_3、jwt-vs-普通token"><span>3、Jwt VS 普通token</span></a></h2><p>我一直认为Jwt能做的，普通token都能做，比如过期时间，普通token只需要设置redis过期时间 就可以，好像jwt并没有太大的优势，但是今天做Oauth客户端登录，我发先jwt还是有它自己的独到之处的。</p><div class="hint-container caution"><p class="hint-container-title">优势一</p><pre><code>在Oauth服务中，jwt可以自校验，这样当授权成功后，授权服务器返回jwt重定向到请求的接口时，客户端在过滤器中就可以很方便的校验token合法性。假如使用普通token,我们在客户端校验token势必要去授权服务器的redis中查询token是否存在，以此来确认合法性，这里就存在一个不合理的地方，客户端必须连接服务端的redis,这是一种耦合，如果项目不大，可能客户端和服务端都是一个redis还好，如果是不同redis就比较麻烦。
</code></pre></div><div class="hint-container caution"><p class="hint-container-title">优势二</p><pre><code>jwt中包含用户信息，当授权服务器返回jwt时，我们在客户端过滤器中根据jwt很方便的解析出里面的用户信息，比如username,拿到username我在客户端就可以很方便的把username转换为本地用户信息（当然前提jwt校验成功我们才给他做转换）和权限信息。如果使用普通token我们就无法根据token获取用户信息，和上面的问题差不多。
</code></pre></div>`,12),o=[p];function c(i,l){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","Jwt.html.vue"]]),d=JSON.parse('{"path":"/other/web/Jwt.html","title":"jwt","lang":"zh-CN","frontmatter":{"title":"jwt","author":"chenkun","publish":true,"keys":null,"category":["web"],"tag":["web"],"description":"1、jwt在服务端如何校验的？ 之前一直用jwt但是仅仅了解他的基本原理没有去思考一个问题——服务端是如何校验jwt的？ 了解过jwt原理的同学都知道jwt是可以自校验的，token里面有header，payload,我有个想法就是如果用户随便生成一个token,那后端是如何知道这个token不能用？或者我把开发环境的token拿到生产环境使用 是否可...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/blog/other/web/Jwt.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"jwt"}],["meta",{"property":"og:description","content":"1、jwt在服务端如何校验的？ 之前一直用jwt但是仅仅了解他的基本原理没有去思考一个问题——服务端是如何校验jwt的？ 了解过jwt原理的同学都知道jwt是可以自校验的，token里面有header，payload,我有个想法就是如果用户随便生成一个token,那后端是如何知道这个token不能用？或者我把开发环境的token拿到生产环境使用 是否可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2020.cnblogs.com%2Fnews%2F2169646%2F202101%2F2169646-20210118002912071-1277173978.jpg&refer=http%3A%2F%2Fimg2020.cnblogs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1669274568&t=4074fa30a1f60ddac4f3a668c38b0353"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-29T03:33:56.000Z"}],["meta",{"property":"article:author","content":"chenkun"}],["meta",{"property":"article:tag","content":"web"}],["meta",{"property":"article:modified_time","content":"2022-12-29T03:33:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"jwt\\",\\"image\\":[\\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2020.cnblogs.com%2Fnews%2F2169646%2F202101%2F2169646-20210118002912071-1277173978.jpg&refer=http%3A%2F%2Fimg2020.cnblogs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1669274568&t=4074fa30a1f60ddac4f3a668c38b0353\\"],\\"dateModified\\":\\"2022-12-29T03:33:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"chenkun\\"}]}"]]},"headers":[{"level":2,"title":"1、jwt在服务端如何校验的？","slug":"_1、jwt在服务端如何校验的","link":"#_1、jwt在服务端如何校验的","children":[]},{"level":2,"title":"2、为什么相同用户每次登陆得到的jwt token不一样？","slug":"_2、为什么相同用户每次登陆得到的jwt-token不一样","link":"#_2、为什么相同用户每次登陆得到的jwt-token不一样","children":[]},{"level":2,"title":"3、Jwt VS 普通token","slug":"_3、jwt-vs-普通token","link":"#_3、jwt-vs-普通token","children":[]}],"git":{"createdTime":1666687039000,"updatedTime":1672284836000,"contributors":[{"name":"ChenSino","email":"chenxk@sonoscape.net","commits":2}]},"readingTime":{"minutes":3,"words":899},"filePathRelative":"other/web/Jwt.md","localizedDate":"2022年10月25日","excerpt":"<h2>1、jwt在服务端如何校验的？</h2>\\n<p>之前一直用jwt但是仅仅了解他的基本原理没有去思考一个问题——服务端是如何校验jwt的？</p>\\n<p>了解过jwt原理的同学都知道jwt是可以自校验的，token里面有header，payload,我有个想法就是如果用户随便生成一个token,那后端是如何知道这个token不能用？或者我把开发环境的token拿到生产环境使用 是否可行？</p>\\n<p>jwt用户认证流程如下，因jwt的token是无状态的，所以每次请求都要经过过滤器进行校验，第一次登陆后把生成的token缓存到redis，当校验时如果找到对应token则继续，解析head中userid信息，根据userid查用户角色权限等信息，然后再设置到security的context中，具体代码如下</p>","autoDesc":true}');export{k as comp,d as data};

import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c,a as n,b as s,d as e,e as t}from"./app-Cf-knFG-.js";const i={},r=n("h2",{id:"_1、参考",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1、参考"},[n("span",null,"1、参考")])],-1),u={href:"https://zhuanlan.zhihu.com/p/115912936",target:"_blank",rel:"noopener noreferrer"},k={href:"https://segmentfault.com/a/1190000024540660",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.51cto.com/article/693213.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://cloud.tencent.com/developer/article/1517734",target:"_blank",rel:"noopener noreferrer"},h={href:"https://blog.csdn.net/yinwenjie/article/details/48274255",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.cnblogs.com/ggjucheng/archive/2012/01/08/2316399.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://tech.meituan.com/2016/11/04/nio.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.geeksforgeeks.org/difference-between-java-threads-and-os-threads/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://cloud.tencent.com/developer/article/1739347",target:"_blank",rel:"noopener noreferrer"},f={href:"https://pdai.tech/md/java/io/java-io-nio-select-epoll.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://blog.csdn.net/yinwenjie/category_5819837.html?spm=1001.2014.3001.5515",target:"_blank",rel:"noopener noreferrer"},w=t('<h2 id="_2、模型分类" tabindex="-1"><a class="header-anchor" href="#_2、模型分类"><span>2、模型分类</span></a></h2><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20220808093204.png" alt="IO模型分类"></p><table><thead><tr><th>IO模型</th><th></th></tr></thead><tbody><tr><td>阻塞I/O模型</td><td>同步阻塞</td></tr><tr><td>非阻塞I/O模型</td><td>同步非阻塞</td></tr><tr><td>I/O多路复用模型</td><td>同步非阻塞</td></tr><tr><td>信号驱动I/O模型</td><td>同步非阻塞</td></tr><tr><td>异步IO（AIO）模型</td><td>异步非阻塞</td></tr></tbody></table><h2 id="_3、形象生活例子" tabindex="-1"><a class="header-anchor" href="#_3、形象生活例子"><span>3、形象生活例子</span></a></h2><ul><li>小明去吃同仁四季的椰子鸡，就这样在那里排队，等了一小时，然后才开始吃火锅。(BIO)</li><li>小红也去同仁四季的椰子鸡，她一看要等挺久的，于是去逛会商场，每次逛一下，就跑回来看看，是不是轮到她了。于是最后她既购了物，又吃上椰子鸡了。(NIO)</li><li>小华一样，去吃椰子鸡，由于他是高级会员，所以店长说，你去商场随便逛会吧，等下有位置，我立马打电话给你。于是小华不用干巴巴坐着等，也不用每过一会儿就跑回来看有没有等到，最后也吃上了美味的椰子鸡(AIO)</li></ul><h2 id="_4、同步阻塞i-o-传统bio" tabindex="-1"><a class="header-anchor" href="#_4、同步阻塞i-o-传统bio"><span>4、同步阻塞I/O（传统BIO）</span></a></h2><p>本节主要参考了以下博客：</p>',7),O={href:"https://blog.csdn.net/yinwenjie/article/details/48274255",target:"_blank",rel:"noopener noreferrer"},I=n("br",null,null,-1),T={href:"https://cloud.tencent.com/developer/article/1752788",target:"_blank",rel:"noopener noreferrer"},x=n("br",null,null,-1),N={href:"https://zhuanlan.zhihu.com/p/79772089",target:"_blank",rel:"noopener noreferrer"},j=n("br",null,null,-1),S={href:"https://cloud.tencent.com/developer/article/1517734",target:"_blank",rel:"noopener noreferrer"},C=n("h3",{id:"_4-1-介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-1-介绍"},[n("span",null,"4.1 介绍")])],-1),q={href:"https://cloud.tencent.com/developer/article/1517734",target:"_blank",rel:"noopener noreferrer"},B=t(`<h3 id="_4-2-传统bio存在的问题" tabindex="-1"><a class="header-anchor" href="#_4-2-传统bio存在的问题"><span>4.2 传统BIO存在的问题</span></a></h3><ul><li>同一时间，服务器只能接受来自于客户端A的请求信息；虽然客户端A和客户端B的请求是同时进行的，但客户端B发送的请求信息只能等到服务器接受完A的请求数据后，才能被接受。</li><li>由于服务器一次只能处理一个客户端请求，当处理完成并返回后（或者异常时），才能进行第二次请求的处理。很显然，这样的处理方式在高并发的情况下，是不能采用的。</li></ul><h3 id="_4-3-使用多线程改进bio" tabindex="-1"><a class="header-anchor" href="#_4-3-使用多线程改进bio"><span>4.3 使用多线程改进BIO</span></a></h3><ol><li><p>虽然在服务器端，请求的处理交给了一个独立线程进行，但是操作系统通知accept()的方式还是单个的。也就是，实际上是服务器接收到数据报文后的“业务处理过程”可以多线程，但是数据报文的接受还是需要一个一个的来（下文的示例代码和debug过程我们可以明确看到这一点）</p></li><li><p>在linux系统中，可以创建的线程是有限的。我们可以通过cat /proc/sys/kernel/threads-max 命令查看可以创建的最大线程数。当然这个值是可以更改的，但是线程越多，CPU切换所需的时间也就越长，用来处理真正业务的需求也就越少。</p></li><li><p>创建一个线程是有较大的资源消耗的。JVM创建一个线程的时候，即使这个线程不做任何的工作，JVM都会分配一个堆栈空间。这个空间的大小默认为128K，您可以通过-Xss参数进行调整。</p></li><li><p>当然您还可以使用ThreadPoolExecutor线程池来缓解线程的创建问题，但是又会造成BlockingQueue积压任务的持续增加，同样消耗了大量资源。</p></li></ol><ul><li>另外，如果您的应用程序大量使用长连接的话，线程是不会关闭的。这样系统资源的消耗更容易失控。 那么，如果你真想单纯使用线程解决阻塞的问题，那么您自己都可以算出来您一个服务器节点可以一次接受多大的并发了。看来，单纯使用线程解决这个问题不是最好的办法</li></ul><h3 id="_4-4-验证上下文切换带来的cpu消耗巨大" tabindex="-1"><a class="header-anchor" href="#_4-4-验证上下文切换带来的cpu消耗巨大"><span>4.4 验证上下文切换带来的CPU消耗巨大</span></a></h3><p>在一个线程和多个线程分别操作相同次数的业务逻辑，比较耗时</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplication</span> <span class="token punctuation">{</span>
       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token comment">//运行多线程</span>
              <span class="token class-name">MultiThreadTester</span> test1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiThreadTester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token class-name"><span class="token namespace">test1<span class="token punctuation">.</span></span>Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token comment">//运行单线程</span>
              <span class="token class-name">SerialTester</span> test2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SerialTester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token class-name"><span class="token namespace">test2<span class="token punctuation">.</span></span>Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       
       
       <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MultiThreadTester</span> <span class="token keyword">extends</span> <span class="token class-name">ThreadContextSwitchTester</span> <span class="token punctuation">{</span>
              <span class="token annotation punctuation">@Override</span>
              <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                     <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token class-name">MyRunnable</span> myRunnable1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token punctuation">]</span> threads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                     <span class="token comment">//创建多个线程</span>
                     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                           threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myRunnable1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                           threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token punctuation">}</span>
                     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                           <span class="token keyword">try</span> <span class="token punctuation">{</span>
                                  <span class="token comment">//等待一起运行完</span>
                                  threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                  <span class="token comment">// TODO Auto-generated catch block</span>
                                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                           <span class="token punctuation">}</span>
                     <span class="token punctuation">}</span>
                     <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;multi thread exce time: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;s&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;counter: &quot;</span> <span class="token operator">+</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
              <span class="token comment">// 创建一个实现Runnable的类</span>
              <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
                     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                           <span class="token keyword">while</span> <span class="token punctuation">(</span>counter <span class="token operator">&lt;</span> <span class="token number">100000000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                         <span class="token keyword">if</span><span class="token punctuation">(</span>counter <span class="token operator">&lt;</span> <span class="token number">100000000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                                <span class="token function">increaseCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                         <span class="token punctuation">}</span>
                                  <span class="token punctuation">}</span>
                           <span class="token punctuation">}</span>
                     <span class="token punctuation">}</span>
              <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
       
      <span class="token comment">//创建一个单线程</span>
       <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SerialTester</span> <span class="token keyword">extends</span> <span class="token class-name">ThreadContextSwitchTester</span><span class="token punctuation">{</span>
              <span class="token annotation punctuation">@Override</span>
              <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                     <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                           <span class="token function">increaseCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token punctuation">}</span>
                     <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;serial exec time: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;s&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;counter: &quot;</span> <span class="token operator">+</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>

       <span class="token comment">//父类</span>
       <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ThreadContextSwitchTester</span> <span class="token punctuation">{</span>
              <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">100000000</span><span class="token punctuation">;</span>
              <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
              <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
              <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increaseCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                     
                     <span class="token keyword">this</span><span class="token punctuation">.</span>counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
              <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token class-name">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>multi thread exce time: 5149s
counter: <span class="token number">100000000</span>
serial <span class="token builtin class-name">exec</span> time: 956s
counter: <span class="token number">100000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-nio" tabindex="-1"><a class="header-anchor" href="#_4-5-nio"><span>4.5 NIO</span></a></h3>`,11),M={href:"https://tech.meituan.com/2016/11/04/nio.html",target:"_blank",rel:"noopener noreferrer"},P=n("h4",{id:"_4-5-1-nio解决了什么问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-5-1-nio解决了什么问题"},[n("span",null,"4.5.1 NIO解决了什么问题")])],-1),J=n("p",null,"NIO是用较少的线程，可以实现以前较多线程的并发量，并且对资源的占用少了很多。 以前是一个连接一个线程，并发上来以后，线程会特别多。NIO是少量线程处理大量连接。 以前一个连接进来后，只要数据没有传输完成，这个线程就会一直停在这，不能释放。NIO是用一个线程去处理所有连接，有数据进来才会通知业务线程去处理。收到多少数据就读多少，读完就释放了，不会一直停在这，对资源的利用率更高。所以在面对高并发的时候，NIO 更省资源，换句话说，同样的资源下，NIO 可以处理更多的并发， 这也是为什么一提到NIO总是说他的并发高。",-1);function z(A,R){const a=o("ExternalLinkIcon");return l(),c("div",null,[r,n("ul",null,[n("li",null,[n("a",u,[s("100%弄明白5种IO模型"),e(a)])]),n("li",null,[n("a",k,[s("NIO优化原理和Tomcat线程模型"),e(a)])]),n("li",null,[n("a",d,[s("IO 模型详解"),e(a)])]),n("li",null,[n("a",m,[s("系统线程状态和jvm线程状态"),e(a)])]),n("li",null,[n("a",h,[s("系统之间通信"),e(a)])]),n("li",null,[n("a",v,[s("top命令查看CPU状态"),e(a)])]),n("li",null,[n("a",b,[s("NIO详解——美团"),e(a)])]),n("li",null,[n("a",_,[s("Java线程和操作系统的线程之间的关系"),e(a)])]),n("li",null,[n("a",g,[s("10分钟看懂 Java NIO 底层原理"),e(a)])]),n("li",null,[n("a",f,[s("pdai"),e(a)])]),n("li",null,[n("a",y,[s("强烈推荐此博主的博客"),e(a)])])]),w,n("p",null,[n("a",O,[s("架构设计：系统间通信（1）——概述从“聊天”开始上篇"),e(a)]),I,n("a",T,[s("多线程中的上下文切换"),e(a)]),x,n("a",N,[s("多线程中的上下文切换性能开销"),e(a)]),j,n("a",S,[s("系统线程状态和jvm线程状态"),e(a)])]),C,n("blockquote",null,[n("p",null,[s("假设一种场景，有一个CPU只有一个核心，有个简单的java程序要上传文件，当有个线程执行时遇到了I/O操作，一直等待文件上传(此时系统线程会休眠，让出cpu使用权，而java线程依然时RUNNABLE状态，参考"),n("a",q,[s("系统线程状态和jvm线程状态"),e(a)]),s(")，这就是典型的同步阻塞。这里同步指的是java代码卡在这无法执行后面的代码，阻塞指的是应用程序一直等待内核提供数据。")])]),B,n("p",null,[n("a",M,[s("NIO浅析"),e(a)])]),P,J])}const V=p(i,[["render",z],["__file","io.html.vue"]]),Z=JSON.parse('{"path":"/java/advance/io.html","title":"I/O模型","lang":"zh-CN","frontmatter":{"title":"I/O模型","date":"2022-08-07T00:00:00.000Z","keys":null,"description":"1、参考 100%弄明白5种IO模型 NIO优化原理和Tomcat线程模型 IO 模型详解 系统线程状态和jvm线程状态 系统之间通信 top命令查看CPU状态 NIO详解——美团 Java线程和操作系统的线程之间的关系 10分钟看懂 Java NIO 底层原理 pdai 强烈推荐此博主的博客 2、模型分类 IO模型分类 3、形象生活例子 小明去吃同仁...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/java/advance/io.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"I/O模型"}],["meta",{"property":"og:description","content":"1、参考 100%弄明白5种IO模型 NIO优化原理和Tomcat线程模型 IO 模型详解 系统线程状态和jvm线程状态 系统之间通信 top命令查看CPU状态 NIO详解——美团 Java线程和操作系统的线程之间的关系 10分钟看懂 Java NIO 底层原理 pdai 强烈推荐此博主的博客 2、模型分类 IO模型分类 3、形象生活例子 小明去吃同仁..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20220808093204.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-22T03:45:12.000Z"}],["meta",{"property":"article:author","content":"ChenSino"}],["meta",{"property":"article:published_time","content":"2022-08-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-22T03:45:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"I/O模型\\",\\"image\\":[\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20220808093204.png\\"],\\"datePublished\\":\\"2022-08-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-22T03:45:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChenSino\\",\\"url\\":\\"https://ChenSino.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1、参考","slug":"_1、参考","link":"#_1、参考","children":[]},{"level":2,"title":"2、模型分类","slug":"_2、模型分类","link":"#_2、模型分类","children":[]},{"level":2,"title":"3、形象生活例子","slug":"_3、形象生活例子","link":"#_3、形象生活例子","children":[]},{"level":2,"title":"4、同步阻塞I/O（传统BIO）","slug":"_4、同步阻塞i-o-传统bio","link":"#_4、同步阻塞i-o-传统bio","children":[{"level":3,"title":"4.1 介绍","slug":"_4-1-介绍","link":"#_4-1-介绍","children":[]},{"level":3,"title":"4.2 传统BIO存在的问题","slug":"_4-2-传统bio存在的问题","link":"#_4-2-传统bio存在的问题","children":[]},{"level":3,"title":"4.3 使用多线程改进BIO","slug":"_4-3-使用多线程改进bio","link":"#_4-3-使用多线程改进bio","children":[]},{"level":3,"title":"4.4 验证上下文切换带来的CPU消耗巨大","slug":"_4-4-验证上下文切换带来的cpu消耗巨大","link":"#_4-4-验证上下文切换带来的cpu消耗巨大","children":[]},{"level":3,"title":"4.5 NIO","slug":"_4-5-nio","link":"#_4-5-nio","children":[]}]}],"git":{"createdTime":1659864349000,"updatedTime":1711079112000,"contributors":[{"name":"ChenSino","email":"462488588@qq.com","commits":4},{"name":"ChenSino","email":"chenxk@sonoscape.net","commits":2},{"name":"chenkun","email":"462488588@qq.com","commits":1}]},"readingTime":{"minutes":5.79,"words":1738},"filePathRelative":"java/advance/io.md","localizedDate":"2022年8月7日","excerpt":"<h2>1、参考</h2>\\n<ul>\\n<li><a href=\\"https://zhuanlan.zhihu.com/p/115912936\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">100%弄明白5种IO模型</a></li>\\n<li><a href=\\"https://segmentfault.com/a/1190000024540660\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">NIO优化原理和Tomcat线程模型</a></li>\\n<li><a href=\\"https://www.51cto.com/article/693213.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">IO 模型详解</a></li>\\n<li><a href=\\"https://cloud.tencent.com/developer/article/1517734\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">系统线程状态和jvm线程状态</a></li>\\n<li><a href=\\"https://blog.csdn.net/yinwenjie/article/details/48274255\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">系统之间通信</a></li>\\n<li><a href=\\"https://www.cnblogs.com/ggjucheng/archive/2012/01/08/2316399.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">top命令查看CPU状态</a></li>\\n<li><a href=\\"https://tech.meituan.com/2016/11/04/nio.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">NIO详解——美团</a></li>\\n<li><a href=\\"https://www.geeksforgeeks.org/difference-between-java-threads-and-os-threads/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Java线程和操作系统的线程之间的关系</a></li>\\n<li><a href=\\"https://cloud.tencent.com/developer/article/1739347\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">10分钟看懂 Java NIO 底层原理</a></li>\\n<li><a href=\\"https://pdai.tech/md/java/io/java-io-nio-select-epoll.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">pdai</a></li>\\n<li><a href=\\"https://blog.csdn.net/yinwenjie/category_5819837.html?spm=1001.2014.3001.5515\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">强烈推荐此博主的博客</a></li>\\n</ul>","autoDesc":true}');export{V as comp,Z as data};

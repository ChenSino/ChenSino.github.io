import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-Cs38sdJl.js";const e={},p=t(`<h2 id="一-节流概念-throttle" tabindex="-1"><a class="header-anchor" href="#一-节流概念-throttle"><span>一，节流概念(Throttle)</span></a></h2><blockquote><p>规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。</p></blockquote><p><strong>主要应用场景有：</strong></p><ol><li>鼠标连续不断地触发某事件（如点击），只在单位时间内只触发一次；</li><li>在页面的无限加载场景下，需要用户在滚动页面时，每隔一段时间发一次 ajax 请求，而不是在用户停下滚动页面操作时才去请求数据；</li><li>监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断；</li></ol><h2 id="二-节流实现" tabindex="-1"><a class="header-anchor" href="#二-节流实现"><span>二，节流实现</span></a></h2><p>思路： 第一次先设定一个变量true，第二次执行这个函数时，会判断变量是否true，是则返回。当第一次的定时器执行完函数最后会设定变量为flase。那么下次判断变量时则为flase，函数会依次运行。</p><p>代码一:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay<span class="token operator">=</span><span class="token number">100</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//首先设定一个变量，在没有执行我们的定时器时为null</span>
<span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//当我们发现这个定时器存在时，则表示定时器已经在运行中，需要返回</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
	timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
		<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
		timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码二:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttle2</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay<span class="token operator">=</span><span class="token number">100</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">let</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">let</span> curr <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>curr <span class="token operator">-</span> last <span class="token operator">&gt;</span> delay<span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
			last <span class="token operator">=</span> curr<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h2><h2 id="三-防抖概念-debounce" tabindex="-1"><a class="header-anchor" href="#三-防抖概念-debounce"><span>三，防抖概念(Debounce)</span></a></h2><blockquote><p>在事件被触发n秒后再执行回调函数，如果在这n秒内又被触发，则重新计时。</p></blockquote><p>抖动停止后的时间超过设定的时间时执行一次函数。注意：这里的抖动停止表示你停止了触发这个函数，从这个时间点开始计算，当间隔时间等于你设定时间，才会执行里面的回调函数。如果你一直在触发这个函并且两次触发间隔小于设定时间，则一定不会到回调函数那一步。</p><p><strong>主要应用场景有：</strong></p><ol><li>用户在输入框中连续输入一串字符后，只会在输入完后去执行最后一次的查询ajax请求，这样可以有效减少请求次数，节约请求资源；</li><li>window的resize、scroll事件，不断地调整浏览器的窗口大小、或者滚动时会触发对应事件，防抖让其只触发一次；</li></ol><h2 id="四-防抖实现" tabindex="-1"><a class="header-anchor" href="#四-防抖实现"><span>四，防抖实现</span></a></h2><p>思路：首次运行时把定时器赋值给一个变量，第二次执行时，如果间隔没超过定时器设定的时间则会清除掉定时器，重新设定定时器，依次反复，当我们停止下来时，没有执行清除定时器，超过一定时间后触发回调函数。</p><p>代码一</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay<span class="token operator">=</span><span class="token number">200</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
		timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
			<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
			timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","throttle.html.vue"]]),k=JSON.parse('{"path":"/frontweb/es5/throttle.html","title":"节流与防抖","lang":"zh-CN","frontmatter":{"title":"节流与防抖","date":"2022-03-25T00:00:00.000Z","author":"qianxun","category":["js基础"],"tag":["必会"],"description":"一，节流概念(Throttle) 规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。 主要应用场景有： 鼠标连续不断地触发某事件（如点击），只在单位时间内只触发一次； 在页面的无限加载场景下，需要用户在滚动页面时，每隔一段时间发一次 ajax 请求，而不是在用户停下滚动页面操作...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/frontweb/es5/throttle.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"节流与防抖"}],["meta",{"property":"og:description","content":"一，节流概念(Throttle) 规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。 主要应用场景有： 鼠标连续不断地触发某事件（如点击），只在单位时间内只触发一次； 在页面的无限加载场景下，需要用户在滚动页面时，每隔一段时间发一次 ajax 请求，而不是在用户停下滚动页面操作..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-01T13:56:59.000Z"}],["meta",{"property":"article:author","content":"qianxun"}],["meta",{"property":"article:tag","content":"必会"}],["meta",{"property":"article:published_time","content":"2022-03-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-01T13:56:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"节流与防抖\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-25T00:00:00.000Z\\",\\"dateModified\\":\\"2022-08-01T13:56:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"qianxun\\"}]}"]]},"headers":[{"level":2,"title":"一，节流概念(Throttle)","slug":"一-节流概念-throttle","link":"#一-节流概念-throttle","children":[]},{"level":2,"title":"二，节流实现","slug":"二-节流实现","link":"#二-节流实现","children":[]},{"level":2,"title":"","slug":"","link":"#","children":[]},{"level":2,"title":"三，防抖概念(Debounce)","slug":"三-防抖概念-debounce","link":"#三-防抖概念-debounce","children":[]},{"level":2,"title":"四，防抖实现","slug":"四-防抖实现","link":"#四-防抖实现","children":[]}],"git":{"createdTime":1659362219000,"updatedTime":1659362219000,"contributors":[{"name":"chenkun","email":"462488588@qq.com","commits":1}]},"readingTime":{"minutes":2.53,"words":759},"filePathRelative":"frontweb/es5/throttle.md","localizedDate":"2022年3月25日","excerpt":"<h2>一，节流概念(Throttle)</h2>\\n<blockquote>\\n<p>规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。</p>\\n</blockquote>\\n<p><strong>主要应用场景有：</strong></p>\\n<ol>\\n<li>鼠标连续不断地触发某事件（如点击），只在单位时间内只触发一次；</li>\\n<li>在页面的无限加载场景下，需要用户在滚动页面时，每隔一段时间发一次 ajax 请求，而不是在用户停下滚动页面操作时才去请求数据；</li>\\n<li>监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断；</li>\\n</ol>","autoDesc":true}');export{d as comp,k as data};

import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e}from"./app-xHrnIhLr.js";const t={},p=e(`<p>Spring缓存大揭秘</p><div class="hint-container caution"><p class="hint-container-title">注意</p><p>使用springboot测试springcache切记需要在启动类加上@EnableCache</p></div><h3 id="_1、背景" tabindex="-1"><a class="header-anchor" href="#_1、背景"><span>1、背景</span></a></h3><p>使用springboot项目时看到很多对spring缓存注解的使用，比如@Cacheable、@Evict、@CachePut等，之前一直都是知道个大概，使用方式也就局限于配置好redisTemplate然后直接开始使用，但是一直不明白为什么我配置好redisTemplate就可以用了，甚至不配置redis也能有缓存效果。之前还一直有个疑问，新增数据spring把返回结果缓存后，那么下次如果更新了数据，如何同时更新缓存列表呢？</p><h3 id="_2、spring-cache介绍" tabindex="-1"><a class="header-anchor" href="#_2、spring-cache介绍"><span>2、spring-cache介绍</span></a></h3><p>springcache不是一个单独的jar包，它位于spring-context的org.springframework.cache包下，spring提供了各种注解来使用缓存，并且提供了多种缓存实现，比如常见的redis,EhCache等。</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20211014105423666-16341800740101.png" alt="image-20211014105423666"></p><h3 id="_3、springcache的实现" tabindex="-1"><a class="header-anchor" href="#_3、springcache的实现"><span>3、springcache的实现</span></a></h3><p>如果不引入redis等第三方包，则spring默认采用的是ConcurrentMapCache来管理缓存，它里面有个ConcurrentMap（具体实现是ConcurrentHashMap，在ConcurrentMapCacheManager类中传入的），<strong>如果引入第三方比如redis,则会自动使用redis</strong></p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20211014105857365-16341803387362.png" alt="image-20211014105857365"></p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20211014110150052-16341805111993.png" alt="image-20211014110150052"></p><p>在上图中可以看到ConcurrentMapCacheManager创建了一个ConcurrentHashMap对象，用来初始化ConcurrentMapCache，<strong>所以由此我们可以知道spring默认缓存实际上是一个Map对象，占用的是JVM内存，一旦创建后就永不消失，因为它不像redis有过期时间，所以使用默认缓存要慎重，注意OOM</strong></p><p>总结一下spring缓存默认实现：</p><ol><li>SimpleCacheConfiguration是一个springboot的配置类，类中会实例化一个ConcurrentMapCacheManager的Bean,</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">CacheManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span><span class="token class-name">CacheCondition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">SimpleCacheConfiguration</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Bean</span>
	<span class="token class-name">ConcurrentMapCacheManager</span> <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token class-name">CacheProperties</span> cacheProperties<span class="token punctuation">,</span>
			<span class="token class-name">CacheManagerCustomizers</span> cacheManagerCustomizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">ConcurrentMapCacheManager</span> cacheManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentMapCacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cacheNames <span class="token operator">=</span> cacheProperties<span class="token punctuation">.</span><span class="token function">getCacheNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cacheNames<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			cacheManager<span class="token punctuation">.</span><span class="token function">setCacheNames</span><span class="token punctuation">(</span>cacheNames<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> cacheManagerCustomizers<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>cacheManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>ConcurrentMapCacheManager会创建一个Cache对象（具体实现其实是ConcurrentMapCache），创建ConcurrentMapCache时传递的是一个ConcurrentHashMap，所以底层默认保存对象的其实就是一个Map而已</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>	<span class="token comment">//源码位置org.springframework.cache.CacheManager</span>

	<span class="token keyword">protected</span> <span class="token class-name">Cache</span> <span class="token function">createConcurrentMapCache</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">SerializationDelegate</span> actualSerialization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">isStoreByValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serialization <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentMapCache</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">isAllowNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> actualSerialization<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_4、springcache的注解使用" tabindex="-1"><a class="header-anchor" href="#_4、springcache的注解使用"><span>4、springcache的注解使用</span></a></h3><h4 id="_4-1-cacheable注解" tabindex="-1"><a class="header-anchor" href="#_4-1-cacheable注解"><span>4.1 Cacheable注解</span></a></h4><p>此注解可以用于类或方法上，表示开启注解功能，开启后，方法的返回值会放到缓存里面</p>`,19),c=[p];function o(i,l){return a(),s("div",null,c)}const h=n(t,[["render",o],["__file","SpringCache.html.vue"]]),g=JSON.parse('{"path":"/java/framework/spring/SpringCache.html","title":"Spring缓存","lang":"zh-CN","frontmatter":{"title":"Spring缓存","date":"2019-09-22T00:00:00.000Z","sticky":100,"description":"Spring缓存大揭秘 注意 使用springboot测试springcache切记需要在启动类加上@EnableCache 1、背景 使用springboot项目时看到很多对spring缓存注解的使用，比如@Cacheable、@Evict、@CachePut等，之前一直都是知道个大概，使用方式也就局限于配置好redisTemplate然后直接开始使...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/java/framework/spring/SpringCache.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"Spring缓存"}],["meta",{"property":"og:description","content":"Spring缓存大揭秘 注意 使用springboot测试springcache切记需要在启动类加上@EnableCache 1、背景 使用springboot项目时看到很多对spring缓存注解的使用，比如@Cacheable、@Evict、@CachePut等，之前一直都是知道个大概，使用方式也就局限于配置好redisTemplate然后直接开始使..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20211014105423666-16341800740101.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-28T10:09:38.000Z"}],["meta",{"property":"article:author","content":"ChenSino"}],["meta",{"property":"article:published_time","content":"2019-09-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-28T10:09:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring缓存\\",\\"image\\":[\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20211014105423666-16341800740101.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20211014105857365-16341803387362.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20211014110150052-16341805111993.png\\"],\\"datePublished\\":\\"2019-09-22T00:00:00.000Z\\",\\"dateModified\\":\\"2022-12-28T10:09:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChenSino\\",\\"url\\":\\"https://ChenSino.github.io\\"}]}"]]},"headers":[{"level":3,"title":"1、背景","slug":"_1、背景","link":"#_1、背景","children":[]},{"level":3,"title":"2、spring-cache介绍","slug":"_2、spring-cache介绍","link":"#_2、spring-cache介绍","children":[]},{"level":3,"title":"3、springcache的实现","slug":"_3、springcache的实现","link":"#_3、springcache的实现","children":[]},{"level":3,"title":"4、springcache的注解使用","slug":"_4、springcache的注解使用","link":"#_4、springcache的注解使用","children":[]}],"git":{"createdTime":1659362219000,"updatedTime":1672222178000,"contributors":[{"name":"ChenSino","email":"chenxk@sonoscape.net","commits":1},{"name":"chenkun","email":"462488588@qq.com","commits":1}]},"readingTime":{"minutes":1.98,"words":595},"filePathRelative":"java/framework/spring/SpringCache.md","localizedDate":"2019年9月22日","excerpt":"<p>Spring缓存大揭秘</p>\\n","autoDesc":true}');export{h as comp,g as data};

import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as t,c as p,a as n,b as o,d as c,e as l}from"./app-eaM1OiHO.js";const i={},u=l(`<blockquote><p>前言：是否需要把不用的对象设置为null？</p></blockquote><h3 id="_1、开始写代码测试-所有测试都要加上以下指令" tabindex="-1"><a class="header-anchor" href="#_1、开始写代码测试-所有测试都要加上以下指令"><span>1、开始写代码测试（所有测试都要加上以下指令）</span></a></h3><p>jvm参数<code>-Xms20m -Xmx20m -Xmn10m -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:PretenureSizeThreshold=2097152</code></p><p>简单解释一下：</p><ul><li><code>-Xms20m -Xmx20m</code>这两个指令限制堆内存固定为20m不允许扩容</li><li><code>-Xmn10m</code>代表分配给新生代的总内存为10m</li><li><code>-XX:SurvivorRatio=8</code>代表Eden区和Survivor的比例8:1,即新生代被分为3部分，分别8m,1m,1m</li><li><code>XX:PretenureSizeThreshold=2097152</code>,这个指令用的比较少，在虚拟机中，普通对象都在新生代分配内存，但是大对象是直接在老年代分配，至于多大算大对象，就是这个参数来设置的，我设置的是2m用来测试（2097152 =2 * 1024 * 1024 ），设置2m是方便我测试，保证我在下面代码设置1m的MB_1对象，内存是在新生代分配，而不是直接进入老年代</li><li><code>-XX:+PrintGCDetails</code>打印垃圾回收日志</li></ul><h4 id="_1-1-第一次测试-直接创建一个512kb的数组-调用回收" tabindex="-1"><a class="header-anchor" href="#_1-1-第一次测试-直接创建一个512kb的数组-调用回收"><span>1.1 第一次测试，直接创建一个512kb的数组，调用回收</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">KB_512</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结果：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>
GC <span class="token punctuation">(</span>System.gc<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">[</span>PSYoungGen: 2229K-<span class="token operator">&gt;</span>992K<span class="token punctuation">(</span>9216K<span class="token punctuation">)</span><span class="token punctuation">]</span> 2229K-<span class="token operator">&gt;</span>1008K<span class="token punctuation">(</span>19456K<span class="token punctuation">)</span>, <span class="token number">0.0027934</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times: <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token number">0.01</span> <span class="token assign-left variable">sys</span><span class="token operator">=</span><span class="token number">0.00</span>, <span class="token assign-left variable">real</span><span class="token operator">=</span><span class="token number">0.01</span> secs<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>GC <span class="token punctuation">(</span>System.gc<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">[</span>PSYoungGen: 2229K-<span class="token operator">&gt;</span>992K<span class="token punctuation">(</span>9216K<span class="token punctuation">)</span><span class="token punctuation">]</span> 2229K-<span class="token operator">&gt;</span>1000K<span class="token punctuation">(</span>19456K<span class="token punctuation">)</span>, <span class="token number">0.0014906</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times: <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token number">0.01</span> <span class="token assign-left variable">sys</span><span class="token operator">=</span><span class="token number">0.00</span>, <span class="token assign-left variable">real</span><span class="token operator">=</span><span class="token number">0.00</span> secs<span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>多次运行测试，垃圾回收差不多都是2229K-&gt;992K，一定要多次运行，因为System.gc()并不是100%触发到此对象的回收</p></blockquote><h4 id="_1-2-第二次测试-把kb-512设置null" tabindex="-1"><a class="header-anchor" href="#_1-2-第二次测试-把kb-512设置null"><span>1.2 第二次测试，把KB_512设置null</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">KB_512</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token constant">KB_512</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结果：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>GC <span class="token punctuation">(</span>System.gc<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">[</span>PSYoungGen: 2063K-<span class="token operator">&gt;</span>416K<span class="token punctuation">(</span>9216K<span class="token punctuation">)</span><span class="token punctuation">]</span> 2063K-<span class="token operator">&gt;</span>424K<span class="token punctuation">(</span>19456K<span class="token punctuation">)</span>, <span class="token number">0.0016337</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times: <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token number">0.00</span> <span class="token assign-left variable">sys</span><span class="token operator">=</span><span class="token number">0.00</span>, <span class="token assign-left variable">real</span><span class="token operator">=</span><span class="token number">0.01</span> secs<span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>GC <span class="token punctuation">(</span>System.gc<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">[</span>PSYoungGen: 1899K-<span class="token operator">&gt;</span>480K<span class="token punctuation">(</span>9216K<span class="token punctuation">)</span><span class="token punctuation">]</span> 1899K-<span class="token operator">&gt;</span>488K<span class="token punctuation">(</span>19456K<span class="token punctuation">)</span>, <span class="token number">0.0027343</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times: <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token number">0.01</span> <span class="token assign-left variable">sys</span><span class="token operator">=</span><span class="token number">0.00</span>, <span class="token assign-left variable">real</span><span class="token operator">=</span><span class="token number">0.00</span> secs<span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>测试多次，发现新生代从2063K-&gt;416K （每次测试有一点误差，差别不大），确实比不设置null回收更多</p></blockquote><h4 id="_1-3-第三次测试-把本地变量放到代码快" tabindex="-1"><a class="header-anchor" href="#_1-3-第三次测试-把本地变量放到代码快"><span>1.3 第三次测试，把本地变量放到代码快</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">KB_512</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结果：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>GC <span class="token punctuation">(</span>System.gc<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">[</span>PSYoungGen: 1899K-<span class="token operator">&gt;</span>464K<span class="token punctuation">(</span>9216K<span class="token punctuation">)</span><span class="token punctuation">]</span> 1899K-<span class="token operator">&gt;</span>472K<span class="token punctuation">(</span>19456K<span class="token punctuation">)</span>, <span class="token number">0.0041090</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times: <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token number">0.01</span> <span class="token assign-left variable">sys</span><span class="token operator">=</span><span class="token number">0.00</span>, <span class="token assign-left variable">real</span><span class="token operator">=</span><span class="token number">0.00</span> secs<span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>GC <span class="token punctuation">(</span>System.gc<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">[</span>PSYoungGen: 1899K-<span class="token operator">&gt;</span>480K<span class="token punctuation">(</span>9216K<span class="token punctuation">)</span><span class="token punctuation">]</span> 1899K-<span class="token operator">&gt;</span>488K<span class="token punctuation">(</span>19456K<span class="token punctuation">)</span>, <span class="token number">0.0031194</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times: <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token number">0.01</span> <span class="token assign-left variable">sys</span><span class="token operator">=</span><span class="token number">0.00</span>, <span class="token assign-left variable">real</span><span class="token operator">=</span><span class="token number">0.01</span> secs<span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>测试结果和第二次大致一样</p></blockquote><h3 id="_2、结论" tabindex="-1"><a class="header-anchor" href="#_2、结论"><span>2、结论</span></a></h3><p>经过以上三次测试的出结论如下：</p><ol><li><p>当有大对象<code>KB_512</code>使用完后，把其设置为null,是值得是把它在栈中的本地变量那个引用值设置为null,让其失去对堆内存中<code>new byte[1 * 1024 * 512]</code>的引用，当没有其他变量 引用到<code>new byte[1 * 1024 * 512];</code>时，这个<code>new byte[1 * 1024 * 512];</code>对象在垃圾回收触发时是有机会被回收的，注意有机会被回收，不等于这次回收一定会被回收，可能是下次gc时回收，也可能是下下次。</p><p>另外补充一点：栈内存是不用回收的，用完自动释放，所以一般情况下我们不用特意去把用完的对象设置为null。那这种适合在什么时候用呢？比如在方法中我们有一个大对象，这个大对象占用内大内存，在大对象用完后，其后面还有很多耗时的业务代码，正常情况下这个大对象回收要等到耗时的业务代码执行完后才会释放内存，如果想提前释放，可以考虑把他的引用设置为<code>null</code>。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> bigObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     	<span class="token comment">//模拟使用bigObject</span>
     	<span class="token function">use</span><span class="token punctuation">(</span>bigObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
     	<span class="token comment">//用完大对象设置null,让其在此函数执行完之前就有机会被回收</span>
     	bigObject <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
     
        <span class="token comment">//模拟一些耗时代码</span>
        xxxxxx
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>栈帧中的局部变量表中的槽位是可以重用的，如果一个局部变量过了其作用域，那么在其作用域之后申明的新的局部变量就很有可能会复用过期局部变量的槽位，从而达到节省资源的目的。</p><p>在第三次测试中我们用代码块包围了<code>KB_512</code>，来限制其作用于，我们发现也能达到在main方法执行前就释放内存的目的。原因就是<code>KB_512</code>这个变量的作用于限制在代码块，代码快执行完后，就用不上它了，那么它在栈帧中的局部变量那个地址是可被别的局部变量复用，即<code>temp</code>复用了。当temp把引用指向<code>new byte[0];</code>时，原来的<code>new byte[1 * 1024 * 512];</code>就没有变量去引用它了，所以它可以被回收。</p></li></ol><h3 id="_3、参考" tabindex="-1"><a class="header-anchor" href="#_3、参考"><span>3、参考</span></a></h3>`,27),r={href:"https://pdai.tech/md/java/jvm/java-jvm-struct.html",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const s=e("ExternalLinkIcon");return t(),p("div",null,[u,n("p",null,[n("a",r,[o("jvm内存结构"),c(s)])])])}const g=a(i,[["render",k],["__file","SetObjectNull.html.vue"]]),h=JSON.parse('{"path":"/java/jvm/SetObjectNull.html","title":"给对象设置null的意义","lang":"zh-CN","frontmatter":{"title":"给对象设置null的意义","date":"2022-03-14T00:00:00.000Z","sticky":2,"category":["java","jvm"],"description":"前言：是否需要把不用的对象设置为null？ 1、开始写代码测试（所有测试都要加上以下指令） jvm参数-Xms20m -Xmx20m -Xmn10m -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:PretenureSizeThreshold=2097152 简单解释一下： -Xms20m -Xmx20m这两个指...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/java/jvm/SetObjectNull.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"给对象设置null的意义"}],["meta",{"property":"og:description","content":"前言：是否需要把不用的对象设置为null？ 1、开始写代码测试（所有测试都要加上以下指令） jvm参数-Xms20m -Xmx20m -Xmn10m -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:PretenureSizeThreshold=2097152 简单解释一下： -Xms20m -Xmx20m这两个指..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-01T13:56:59.000Z"}],["meta",{"property":"article:author","content":"ChenSino"}],["meta",{"property":"article:published_time","content":"2022-03-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-01T13:56:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"给对象设置null的意义\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-14T00:00:00.000Z\\",\\"dateModified\\":\\"2022-08-01T13:56:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChenSino\\",\\"url\\":\\"https://ChenSino.github.io\\"}]}"]]},"headers":[{"level":3,"title":"1、开始写代码测试（所有测试都要加上以下指令）","slug":"_1、开始写代码测试-所有测试都要加上以下指令","link":"#_1、开始写代码测试-所有测试都要加上以下指令","children":[]},{"level":3,"title":"2、结论","slug":"_2、结论","link":"#_2、结论","children":[]},{"level":3,"title":"3、参考","slug":"_3、参考","link":"#_3、参考","children":[]}],"git":{"createdTime":1659362219000,"updatedTime":1659362219000,"contributors":[{"name":"chenkun","email":"462488588@qq.com","commits":1}]},"readingTime":{"minutes":3.98,"words":1195},"filePathRelative":"java/jvm/SetObjectNull.md","localizedDate":"2022年3月14日","excerpt":"<blockquote>\\n<p>前言：是否需要把不用的对象设置为null？</p>\\n</blockquote>\\n<h3>1、开始写代码测试（所有测试都要加上以下指令）</h3>\\n<p>jvm参数<code>-Xms20m -Xmx20m -Xmn10m -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:PretenureSizeThreshold=2097152</code></p>\\n<p>简单解释一下：</p>\\n<ul>\\n<li><code>-Xms20m -Xmx20m</code>这两个指令限制堆内存固定为20m不允许扩容</li>\\n<li><code>-Xmn10m</code>代表分配给新生代的总内存为10m</li>\\n<li><code>-XX:SurvivorRatio=8</code>代表Eden区和Survivor的比例8:1,即新生代被分为3部分，分别8m,1m,1m</li>\\n<li><code>XX:PretenureSizeThreshold=2097152</code>,这个指令用的比较少，在虚拟机中，普通对象都在新生代分配内存，但是大对象是直接在老年代分配，至于多大算大对象，就是这个参数来设置的，我设置的是2m用来测试（2097152 =2 * 1024 * 1024 ），设置2m是方便我测试，保证我在下面代码设置1m的MB_1对象，内存是在新生代分配，而不是直接进入老年代</li>\\n<li><code>-XX:+PrintGCDetails</code>打印垃圾回收日志</li>\\n</ul>","autoDesc":true}');export{g as comp,h as data};

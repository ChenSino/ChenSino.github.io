import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e}from"./app-COSs6b7v.js";const t={},p=e(`<h3 id="_1、在类中本地变量引用自身类-会引发的问题" tabindex="-1"><a class="header-anchor" href="#_1、在类中本地变量引用自身类-会引发的问题"><span>1、在类中本地变量引用自身类，会引发的问题</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseFormBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">BaseFormBean</span> baseBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseFormBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">{</span>
         <span class="token class-name">String</span> bar <span class="token operator">=</span> <span class="token string">&quot;非静态代码块中字段&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">BaseFormBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> foo <span class="token operator">=</span> <span class="token string">&quot;构造方法中的字段&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;构造方法被调用.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">BaseFormBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此问题用于研究对象初始化的过程，以上程序运行结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Exception <span class="token keyword">in</span> thread <span class="token string">&quot;main&quot;</span> java.lang.StackOverflowError
	at com.chen.bean.BaseFormBean.<span class="token operator">&lt;</span>init<span class="token operator">&gt;</span><span class="token punctuation">(</span>BaseFormBean.java:4<span class="token punctuation">)</span>
	at com.chen.bean.BaseFormBean.<span class="token operator">&lt;</span>init<span class="token operator">&gt;</span><span class="token punctuation">(</span>BaseFormBean.java:4<span class="token punctuation">)</span>
	at com.chen.bean.BaseFormBean.<span class="token operator">&lt;</span>init<span class="token operator">&gt;</span><span class="token punctuation">(</span>BaseFormBean.java:4<span class="token punctuation">)</span>
	at com.chen.bean.BaseFormBean.<span class="token operator">&lt;</span>init<span class="token operator">&gt;</span><span class="token punctuation">(</span>BaseFormBean.java:4<span class="token punctuation">)</span>
	at com.chen.bean.BaseFormBean.<span class="token operator">&lt;</span>init<span class="token operator">&gt;</span><span class="token punctuation">(</span>BaseFormBean.java:4<span class="token punctuation">)</span>
	at com.chen.bean.BaseFormBean.<span class="token operator">&lt;</span>init<span class="token operator">&gt;</span><span class="token punctuation">(</span>BaseFormBean.java:4<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码抛出的是栈溢出，和我第一想法不太一样，一般想的是程序会不停的new 自身对象，最终会导致OOM堆溢出，认为是这样说明对对象初始化原理掌握的还不够。要想搞明白此问题，需要反汇编查看jvm的指令到底是按照什么顺序执行的，采用<code>javap -c BaseFormBean</code>反汇编，结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># javap -c BaseFormBean.class</span>
Compiled from <span class="token string">&quot;BaseFormBean.java&quot;</span>
public class com.chen.bean.BaseFormBean <span class="token punctuation">{</span>
  public com.chen.bean.BaseFormBean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Code:
       <span class="token number">0</span>: aload_0
       <span class="token number">1</span>: invokespecial <span class="token comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
       <span class="token number">4</span>: aload_0
       <span class="token number">5</span>: new           <span class="token comment">#2                  // class com/chen/bean/BaseFormBean</span>
       <span class="token number">8</span>: dup
       <span class="token number">9</span>: invokespecial <span class="token comment">#3                  // Method &quot;&lt;init&gt;&quot;:()V</span>
      <span class="token number">12</span>: putfield      <span class="token comment">#4                  // Field baseBean:Lcom/chen/bean/BaseFormBean;</span>
      <span class="token number">15</span>: ldc           <span class="token comment">#5                  // String 非静态代码块中字段</span>
      <span class="token number">17</span>: astore_1
      <span class="token number">18</span>: ldc           <span class="token comment">#6                  // String 构造方法中的字段</span>
      <span class="token number">20</span>: astore_1
      <span class="token number">21</span>: getstatic     <span class="token comment">#7                  // Field java/lang/System.out:Ljava/io/PrintStream;</span>
      <span class="token number">24</span>: ldc           <span class="token comment">#8                  // String 构造方法被调用.</span>
      <span class="token number">26</span>: invokevirtual <span class="token comment">#9                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
      <span class="token number">29</span>: <span class="token builtin class-name">return</span>

  public static void main<span class="token punctuation">(</span>java.lang.String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Code:
       <span class="token number">0</span>: new           <span class="token comment">#2                  // class com/chen/bean/BaseFormBean</span>
       <span class="token number">3</span>: dup
       <span class="token number">4</span>: invokespecial <span class="token comment">#3                  // Method &quot;&lt;init&gt;&quot;:()V</span>
       <span class="token number">7</span>: pop
       <span class="token number">8</span>: <span class="token builtin class-name">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造方法的汇编代码解析（需要对照JVM指令集手册查看指令代表的含义）</p><blockquote><pre><code> 1. aload_0：将第一个引用类型本地变量推送至栈顶，此处指的其实是this，就是当前对象自身的地址
 2. invokespecial ：调用构造方法，此处调用的是父类Object构造方法
 3. new：创建一个自身对象, 并将其引用引用值压入栈顶
 4. dup： 复制栈顶数值并将复制值压入栈顶
 5. invokespecial这一指令后边注释Method &quot;&lt;init&gt;&quot;:()V，此方法是真正的给对象进行赋值，在此之前只是给对象初始化一个空间，里面都是空值，此方法初始化对象，因此需要给baseBean字段进行赋值，赋值时会创建一个新的BaseFormBean对象，就要调用new BaseFormBean()，调用此方法后就会进入一个死循环，不停调用自身的构造方法，因此会抛出栈溢出。后续指令不会执行……，因此误会打印东西出来
 6. putfield：如果上一步不抛出异常，正常的话是要执行putfield指令，把上一步创建的对象赋值给baseBean，
</code></pre></blockquote><p><strong>注意：</strong></p><p>上面的非静态代码块也不会执行，原因是其放的位置是在<code>private BaseFormBean baseBean = new BaseFormBean();</code>后面，如果把它放到前面，它依然会执行的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseFormBean</span> <span class="token punctuation">{</span>

    <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行非静态代码块&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> bar <span class="token operator">=</span> <span class="token string">&quot;非静态代码块中字段&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token class-name">BaseFormBean</span> baseBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseFormBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">BaseFormBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> foo <span class="token operator">=</span> <span class="token string">&quot;构造方法中的字段&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;构造方法被调用.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">BaseFormBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>执行非静态代码块
执行非静态代码块
执行非静态代码块
执行非静态代码块
执行非静态代码块
Exception <span class="token keyword">in</span> thread <span class="token string">&quot;main&quot;</span> java.lang.StackOverflowError
	at sun.nio.cs.UTF_8<span class="token variable">$Encoder</span>.encodeLoop<span class="token punctuation">(</span>UTF_8.java:691<span class="token punctuation">)</span>
	at java.nio.charset.CharsetEncoder.encode<span class="token punctuation">(</span>CharsetEncoder.java:579<span class="token punctuation">)</span>
	at sun.nio.cs.StreamEncoder.implWrite<span class="token punctuation">(</span>StreamEncoder.java:271<span class="token punctuation">)</span>
	at sun.nio.cs.StreamEncoder.write<span class="token punctuation">(</span>StreamEncoder.java:125<span class="token punctuation">)</span>
	at java.io.OutputStreamWriter.write<span class="token punctuation">(</span>OutputStreamWriter.java:207<span class="token punctuation">)</span>
	at java.io.BufferedWriter.flushBuffer<span class="token punctuation">(</span>BufferedWriter.java:129<span class="token punctuation">)</span>
	at java.io.PrintStream.write<span class="token punctuation">(</span>PrintStream.java:526<span class="token punctuation">)</span>
	at java.io.PrintStream.print<span class="token punctuation">(</span>PrintStream.java:669<span class="token punctuation">)</span>
	at java.io.PrintStream.println<span class="token punctuation">(</span>PrintStream.java:806<span class="token punctuation">)</span>
	at com.chen.bean.BaseFormBean.<span class="token operator">&lt;</span>init<span class="token operator">&gt;</span><span class="token punctuation">(</span>BaseFormBean.java:6<span class="token punctuation">)</span>
	at com.chen.bean.BaseFormBean.<span class="token operator">&lt;</span>init<span class="token operator">&gt;</span><span class="token punctuation">(</span>BaseFormBean.java:9<span class="token punctuation">)</span>
	at com.chen.bean.BaseFormBean.<span class="token operator">&lt;</span>init<span class="token operator">&gt;</span><span class="token punctuation">(</span>BaseFormBean.java:9<span class="token punctuation">)</span>
	at com.chen.bean.BaseFormBean.<span class="token operator">&lt;</span>init<span class="token operator">&gt;</span><span class="token punctuation">(</span>BaseFormBean.java:9<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),o=[p];function c(i,l){return a(),s("div",null,o)}const d=n(t,[["render",c],["__file","NewObject.html.vue"]]),k=JSON.parse('{"path":"/java/jvm/NewObject.html","title":"对象创建过程","lang":"zh-CN","frontmatter":{"title":"对象创建过程","date":"2022-03-22T00:00:00.000Z","author":"chenkun","publish":true,"keys":null,"description":"1、在类中本地变量引用自身类，会引发的问题 此问题用于研究对象初始化的过程，以上程序运行结果如下： 代码抛出的是栈溢出，和我第一想法不太一样，一般想的是程序会不停的new 自身对象，最终会导致OOM堆溢出，认为是这样说明对对象初始化原理掌握的还不够。要想搞明白此问题，需要反汇编查看jvm的指令到底是按照什么顺序执行的，采用javap -c BaseFo...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/blog/java/jvm/NewObject.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"对象创建过程"}],["meta",{"property":"og:description","content":"1、在类中本地变量引用自身类，会引发的问题 此问题用于研究对象初始化的过程，以上程序运行结果如下： 代码抛出的是栈溢出，和我第一想法不太一样，一般想的是程序会不停的new 自身对象，最终会导致OOM堆溢出，认为是这样说明对对象初始化原理掌握的还不够。要想搞明白此问题，需要反汇编查看jvm的指令到底是按照什么顺序执行的，采用javap -c BaseFo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-22T03:45:12.000Z"}],["meta",{"property":"article:author","content":"chenkun"}],["meta",{"property":"article:published_time","content":"2022-03-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-22T03:45:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"对象创建过程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-22T03:45:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"chenkun\\"}]}"]]},"headers":[{"level":3,"title":"1、在类中本地变量引用自身类，会引发的问题","slug":"_1、在类中本地变量引用自身类-会引发的问题","link":"#_1、在类中本地变量引用自身类-会引发的问题","children":[]}],"git":{"createdTime":1659362219000,"updatedTime":1711079112000,"contributors":[{"name":"ChenSino","email":"462488588@qq.com","commits":1},{"name":"chenkun","email":"462488588@qq.com","commits":1}]},"readingTime":{"minutes":3.01,"words":903},"filePathRelative":"java/jvm/NewObject.md","localizedDate":"2022年3月22日","excerpt":"<h3>1、在类中本地变量引用自身类，会引发的问题</h3>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">BaseFormBean</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">BaseFormBean</span> baseBean <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">BaseFormBean</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">{</span>\\n         <span class=\\"token class-name\\">String</span> bar <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"非静态代码块中字段\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">BaseFormBean</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">String</span> foo <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"构造方法中的字段\\"</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"构造方法被调用.\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span>  <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">BaseFormBean</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};

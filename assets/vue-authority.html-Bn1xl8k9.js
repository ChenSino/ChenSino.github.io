import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as n,b as a,d as t,e as i}from"./app-Cf-knFG-.js";const l={},r=i(`<h2 id="前端主要有哪些权限控制" tabindex="-1"><a class="header-anchor" href="#前端主要有哪些权限控制"><span>前端主要有哪些权限控制？</span></a></h2><h3 id="一-接口访问权限" tabindex="-1"><a class="header-anchor" href="#一-接口访问权限"><span><strong>一，接口访问权限</strong></span></a></h3><p>接口权限目前一般采用通用的形式来验证(用户是否登录系统)，没有的话一般返回401，跳转到登录页面重新进行登录 ,登录成功后拿到<code>token</code>，将<code>token</code>存起来，通过<code>axios</code>请求拦截器进行拦截，每次请求的时候头部携带<code>token</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>
axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> config
<span class="token punctuation">}</span><span class="token punctuation">)</span>
axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>response<span class="token punctuation">}</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">40099</span> <span class="token operator">||</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">40098</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//token过期或者错误</span>
        router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二-菜单权限" tabindex="-1"><a class="header-anchor" href="#二-菜单权限"><span><strong>二，菜单权限</strong></span></a></h3><p>方式一：可访问的路由前端来控制</p><p>具体实现思路如下：</p><p>1，当用户填写完账号和密码后向服务端验证是否正确，验证通过之后，服务端会返回一个<strong>token</strong>，拿到token之后（我会将这个token存贮到cookie中，保证刷新页面后能记住用户登录状态）</p><p>2，前端会根据token再去拉取一个 <strong>user_info</strong> 的接口来获取用户的详细信息（如用户权限，用户名等等信息）。</p><p>3，权限验证：通过token获取用户对应的 <strong>role</strong>，动态根据用户的 role 算出其对应有权限的路由，通过 <strong>router.addRoutes</strong> 动态挂载这些路由。</p><p>具体实现:</p><p><img src="http://afatpig.oss-cn-chengdu.aliyuncs.com/blog/clipboard.png" alt="img"></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>
<span class="token punctuation">{</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/path&#39;</span><span class="token punctuation">,</span> 
        <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./component&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;componentName&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            menuName：<span class="token string">&#39;菜单名称&#39;</span>
            <span class="token literal-property property">auth</span><span class="token operator">:</span> <span class="token string">&#39;authCode&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> 
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式的菜单是根据我们匹配出来的路由表生成，并渲染的（当然，结构需要保持一致）。</p><p><strong>缺点</strong></p><ul><li>菜单信息写死在前端，要改个显示文字或权限信息，需要重新编译，并且发版本</li><li>菜单跟路由耦合在一起，定义路由的时候还有添加菜单显示标题，图标之类的信息，有时候路由不一定要作为菜单展示，需要另外加字段不方便</li></ul><p><strong>方式三，菜单和路由都由后端返回</strong></p><p>用户登录后向后端请求可访问的路由表，从而动态生成可访问页面，操作和原来是相同的，将后端返回的路由通过<code>addRoutes</code>动态挂载之前，这里多了一步将后端返回路由表中组件名称和本地的组件映射步骤：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> 
    <span class="token number">1.</span> 前端统一定义路由组件
     <span class="token keyword">const</span> <span class="token function-variable function">Home</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;../pages/Home.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">const</span> <span class="token function-variable function">UserInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;../pages/UserInfo.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
         <span class="token literal-property property">home</span><span class="token operator">:</span> Home<span class="token punctuation">,</span>
         <span class="token literal-property property">userInfo</span><span class="token operator">:</span> UserInfo
     <span class="token punctuation">}</span><span class="token punctuation">;</span>
     
 <span class="token number">2.</span>后端路由组件返回以下格式
<span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&quot;home&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/userinfo&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&quot;userInfo&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>
<span class="token comment">//前端的映射表map</span>
<span class="token comment">//服务端返回的map类似于</span>
<span class="token keyword">const</span> serviceMap <span class="token operator">=</span> <span class="token punctuation">[</span>
	<span class="token punctuation">{</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span><span class="token string">&#39;login&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">hidden</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span>
<span class="token comment">//遍历serviceMap,将component替换为 map[component],动态生成asyncRoutes</span>
<span class="token keyword">function</span> <span class="token function">mapComponent</span><span class="token punctuation">(</span><span class="token parameter">serviceMap</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	serviceMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">route</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    route<span class="token punctuation">.</span>component <span class="token operator">=</span> map<span class="token punctuation">[</span>route<span class="token punctuation">.</span>component<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">{</span>
    	route<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token function">mapComponent</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">mapComponent</span><span class="token punctuation">(</span>serviceMap<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三-按钮权限" tabindex="-1"><a class="header-anchor" href="#三-按钮权限"><span>三，按钮权限</span></a></h3>`,21),u={href:"https://chensino.github.io/frontweb/vue/vue-Direactive.html",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"参考文章",-1),d={href:"https://juejin.cn/post/6866324830212325383",target:"_blank",rel:"noopener noreferrer"},v={href:"https://juejin.cn/post/6844903478880370701",target:"_blank",rel:"noopener noreferrer"};function m(g,b){const s=p("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[n("a",u,[a("使用自定义指令来实现按钮级别的权限控制"),t(s)])]),k,n("p",null,[n("a",d,[a("vue之权限控制和动态路由"),t(s)])]),n("p",null,[n("a",v,[a("手摸手，带你用vue撸后台 系列二(登录权限篇)"),t(s)])])])}const f=e(l,[["render",m],["__file","vue-authority.html.vue"]]),_=JSON.parse(`{"path":"/frontweb/vue/vue-authority.html","title":"vue中权限相关的问题","lang":"zh-CN","frontmatter":{"title":"vue中权限相关的问题","date":"2022-07-06T00:00:00.000Z","author":"qianxun","category":["vue知识点"],"tag":["必会"],"description":"前端主要有哪些权限控制？ 一，接口访问权限 接口权限目前一般采用通用的形式来验证(用户是否登录系统)，没有的话一般返回401，跳转到登录页面重新进行登录 ,登录成功后拿到token，将token存起来，通过axios请求拦截器进行拦截，每次请求的时候头部携带token。 二，菜单权限 方式一：可访问的路由前端来控制 具体实现思路如下： 1，当用户填写完...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/frontweb/vue/vue-authority.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"vue中权限相关的问题"}],["meta",{"property":"og:description","content":"前端主要有哪些权限控制？ 一，接口访问权限 接口权限目前一般采用通用的形式来验证(用户是否登录系统)，没有的话一般返回401，跳转到登录页面重新进行登录 ,登录成功后拿到token，将token存起来，通过axios请求拦截器进行拦截，每次请求的时候头部携带token。 二，菜单权限 方式一：可访问的路由前端来控制 具体实现思路如下： 1，当用户填写完..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://afatpig.oss-cn-chengdu.aliyuncs.com/blog/clipboard.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-10-14T01:57:54.000Z"}],["meta",{"property":"article:author","content":"qianxun"}],["meta",{"property":"article:tag","content":"必会"}],["meta",{"property":"article:published_time","content":"2022-07-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-10-14T01:57:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vue中权限相关的问题\\",\\"image\\":[\\"http://afatpig.oss-cn-chengdu.aliyuncs.com/blog/clipboard.png\\"],\\"datePublished\\":\\"2022-07-06T00:00:00.000Z\\",\\"dateModified\\":\\"2022-10-14T01:57:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"qianxun\\"}]}"]]},"headers":[{"level":2,"title":"前端主要有哪些权限控制？","slug":"前端主要有哪些权限控制","link":"#前端主要有哪些权限控制","children":[{"level":3,"title":"一，接口访问权限","slug":"一-接口访问权限","link":"#一-接口访问权限","children":[]},{"level":3,"title":"二，菜单权限","slug":"二-菜单权限","link":"#二-菜单权限","children":[]},{"level":3,"title":"三，按钮权限","slug":"三-按钮权限","link":"#三-按钮权限","children":[]}]}],"git":{"createdTime":1659949589000,"updatedTime":1665712674000,"contributors":[{"name":"zhu","email":"819508408@qq.com","commits":3}]},"readingTime":{"minutes":2.54,"words":761},"filePathRelative":"frontweb/vue/vue-authority.md","localizedDate":"2022年7月6日","excerpt":"<h2>前端主要有哪些权限控制？</h2>\\n<h3><strong>一，接口访问权限</strong></h3>\\n<p>接口权限目前一般采用通用的形式来验证(用户是否登录系统)，没有的话一般返回401，跳转到登录页面重新进行登录 ,登录成功后拿到<code>token</code>，将<code>token</code>存起来，通过<code>axios</code>请求拦截器进行拦截，每次请求的时候头部携带<code>token</code>。</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code>\\naxios<span class=\\"token punctuation\\">.</span>interceptors<span class=\\"token punctuation\\">.</span>request<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">use</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">config</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    config<span class=\\"token punctuation\\">.</span>headers<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'token'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> cookie<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'token'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> config\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\naxios<span class=\\"token punctuation\\">.</span>interceptors<span class=\\"token punctuation\\">.</span>response<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">use</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">res</span><span class=\\"token operator\\">=&gt;</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span><span class=\\"token punctuation\\">{</span>response<span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">=&gt;</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>response<span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">.</span>code <span class=\\"token operator\\">===</span> <span class=\\"token number\\">40099</span> <span class=\\"token operator\\">||</span> response<span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">.</span>code <span class=\\"token operator\\">===</span> <span class=\\"token number\\">40098</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">//token过期或者错误</span>\\n        router<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'/login'</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n</code></pre></div>","autoDesc":true}`);export{f as comp,_ as data};

import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c as l,a as n,b as s,d as c,e as a}from"./app-COSs6b7v.js";const i={},u=a(`<h4 id="_1、先看问题-以下结果是什么" tabindex="-1"><a class="header-anchor" href="#_1、先看问题-以下结果是什么"><span>1、先看问题，以下结果是什么？</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">&quot;Hel&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;lo&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">&quot;Hel&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;lo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s6 <span class="token operator">=</span> s5<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s7 <span class="token operator">=</span> <span class="token string">&quot;H&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s8 <span class="token operator">=</span> <span class="token string">&quot;ello&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s9 <span class="token operator">=</span> s7 <span class="token operator">+</span> s8<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s9<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、从字符串拼接学习字节码分析" tabindex="-1"><a class="header-anchor" href="#_2、从字符串拼接学习字节码分析"><span>2、从字符串拼接学习字节码分析</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JvmTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hel&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;lo&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先反汇编，到class文件所在目录打开控制台执行<code>javap -c 类名</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ javap <span class="token parameter variable">-c</span> JvmTest
警告: 二进制文件JvmTest包含com.chen.base.jvm.JvmTest
Compiled from <span class="token string">&quot;JvmTest.java&quot;</span>
public class com.chen.base.jvm.JvmTest <span class="token punctuation">{</span>
  public com.chen.base.jvm.JvmTest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Code:
       <span class="token number">0</span>: aload_0
       <span class="token number">1</span>: invokespecial <span class="token comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
       <span class="token number">4</span>: <span class="token builtin class-name">return</span>

  public void test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Code:
       <span class="token number">0</span>: new           <span class="token comment">#2                  // class java/lang/StringBuilder</span>
       <span class="token number">3</span>: dup
       <span class="token number">4</span>: invokespecial <span class="token comment">#3                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span>
       <span class="token number">7</span>: new           <span class="token comment">#4                  // class java/lang/String</span>
      <span class="token number">10</span>: dup
      <span class="token number">11</span>: ldc           <span class="token comment">#5                  // String hel</span>
      <span class="token number">13</span>: invokespecial <span class="token comment">#6                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span>
      <span class="token number">16</span>: invokevirtual <span class="token comment">#7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
      <span class="token number">19</span>: ldc           <span class="token comment">#8                  // String lo</span>
      <span class="token number">21</span>: invokevirtual <span class="token comment">#7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
      <span class="token number">24</span>: invokevirtual <span class="token comment">#9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span>
      <span class="token number">27</span>: astore_1
      <span class="token number">28</span>: <span class="token builtin class-name">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来一个指令一个指令的分析，为什么<code>new String(&quot;hel&quot;) + &quot;lo&quot;;</code>创建了两个对象。</p><table><thead><tr><th style="text-align:center;">行号</th><th style="text-align:center;">指令</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">13</td><td style="text-align:center;">new</td><td style="text-align:center;">堆中创建一个StringBuilder对象，并把堆中此对象地址压入栈顶</td></tr><tr><td style="text-align:center;">14</td><td style="text-align:center;">dup</td><td style="text-align:center;">复制栈顶的值，压入栈顶</td></tr><tr><td style="text-align:center;">15</td><td style="text-align:center;">invokespecial</td><td style="text-align:center;">初始化StringBuilder，对象创建都是先分配内存，再初始化</td></tr><tr><td style="text-align:center;">16</td><td style="text-align:center;">new</td><td style="text-align:center;">堆中创建一个String对象，并把堆中此对象地址压入栈顶</td></tr><tr><td style="text-align:center;">17</td><td style="text-align:center;">dup</td><td style="text-align:center;">复制栈顶的值，压入栈顶</td></tr><tr><td style="text-align:center;">18</td><td style="text-align:center;">ldc</td><td style="text-align:center;">从常量池取出字符串&quot;hel&quot;并压入栈顶</td></tr><tr><td style="text-align:center;">19</td><td style="text-align:center;">invokespecial</td><td style="text-align:center;"><code>和前面一样，先分配地址，再调用String的初始化方法，把&quot;hel&quot;压入new的对象中，注意看19行注释，初始化时有传参(Ljava/lang/String;)，15行是&quot;&lt;init&gt;&quot;:()V，无参的</code></td></tr><tr><td style="text-align:center;">20</td><td style="text-align:center;">invokevirtual</td><td style="text-align:center;">调用StringBuilder.append，并且也是有传参的，这一步是用之前创建并初始化过的StringBuilder空对象来和“hel”字符串先拼接</td></tr><tr><td style="text-align:center;">21</td><td style="text-align:center;">ldc</td><td style="text-align:center;">把字符串“lo”从常量池压入栈顶</td></tr><tr><td style="text-align:center;">22</td><td style="text-align:center;">invokevirtual</td><td style="text-align:center;">同上面一样，再用StringBuilder拼接“lo”字符串</td></tr><tr><td style="text-align:center;">23</td><td style="text-align:center;">invokevirtual</td><td style="text-align:center;">调用StringBuilder.toString,转化为String</td></tr><tr><td style="text-align:center;">24</td><td style="text-align:center;">astore_1</td><td style="text-align:center;">把栈顶的值还原到本地变量s4中</td></tr><tr><td style="text-align:center;">25</td><td style="text-align:center;">return</td><td style="text-align:center;">方法结束</td></tr></tbody></table><p>小结：<code>new String(&quot;hel&quot;) + &quot;lo&quot;;</code>该行代码在虚拟机执行时，是先创建一个StringBuilder并初始化（开始为空对象，注意空对象不是null），然后创建一个String对象并初始化（初始化后String对象内容是hel），然后调用用StringBuilder的append方法先把空对象和hel字符串拼接，然后再次调用append拼接lo.</p><p>问题：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">&quot;Hel&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;lo&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">&quot;Hel&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;lo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s6 <span class="token operator">=</span> s5<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s7 <span class="token operator">=</span> <span class="token string">&quot;H&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s8 <span class="token operator">=</span> <span class="token string">&quot;ello&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s9 <span class="token operator">=</span> s7 <span class="token operator">+</span> s8<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s9<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么s1 == s3是true,s1 == s9 是false？</p>`,12),r={href:"http://www.ifcoding.com/archives/284.html",target:"_blank",rel:"noopener noreferrer"},d=a(`<p>算鸟还是i自己看一下字节码文件，写一个测试类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JvmTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">&quot;hel&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;lo&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反汇编，发现确实没有new新对象，是因为纯字符串相加在编译期间已经被优化了<code>String s3 = &quot;hel&quot; + &quot;lo&quot;;</code>优化后就是<code>String s3 = &quot;hello&quot;</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ javap <span class="token parameter variable">-c</span> JvmTest
警告: 二进制文件JvmTest包含com.chen.base.jvm.JvmTest
Compiled from <span class="token string">&quot;JvmTest.java&quot;</span>
public class com.chen.base.jvm.JvmTest <span class="token punctuation">{</span>
  public com.chen.base.jvm.JvmTest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Code:
       <span class="token number">0</span>: aload_0
       <span class="token number">1</span>: invokespecial <span class="token comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
       <span class="token number">4</span>: <span class="token builtin class-name">return</span>

  public void test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Code:
       <span class="token number">0</span>: ldc           <span class="token comment">#2                  // String hello</span>
       <span class="token number">2</span>: astore_1
       <span class="token number">3</span>: <span class="token builtin class-name">return</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了验证以上说的不是信口开河，我们找到JvmTest.class文件，用十六进制编辑器打开，如下，可以清楚的看到有一个拼接好的字符窜hello</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/7357c73b3cda41c0bd78dc7f0304b048.png" alt="在这里插入图片描述"></p>`,6);function k(m,v){const t=p("ExternalLinkIcon");return o(),l("div",null,[u,n("p",null,[s("答案请"),n("a",r,[s("参考"),c(t)])]),d])}const S=e(i,[["render",k],["__file","StringAdd.html.vue"]]),h=JSON.parse('{"path":"/java/jvm/StringAdd.html","title":"通过反汇编来看String的拼接","lang":"zh-CN","frontmatter":{"title":"通过反汇编来看String的拼接","date":"2022-03-14T00:00:00.000Z","sticky":2,"category":["java","jvm"],"tag":["字节码","反汇编"],"description":"1、先看问题，以下结果是什么？ 2、从字符串拼接学习字节码分析 先反汇编，到class文件所在目录打开控制台执行javap -c 类名 接下来一个指令一个指令的分析，为什么new String(\\"hel\\") + \\"lo\\";创建了两个对象。 小结：new String(\\"hel\\") + \\"lo\\";该行代码在虚拟机执行时，是先创建一个StringBuild...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/blog/java/jvm/StringAdd.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"通过反汇编来看String的拼接"}],["meta",{"property":"og:description","content":"1、先看问题，以下结果是什么？ 2、从字符串拼接学习字节码分析 先反汇编，到class文件所在目录打开控制台执行javap -c 类名 接下来一个指令一个指令的分析，为什么new String(\\"hel\\") + \\"lo\\";创建了两个对象。 小结：new String(\\"hel\\") + \\"lo\\";该行代码在虚拟机执行时，是先创建一个StringBuild..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/7357c73b3cda41c0bd78dc7f0304b048.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-01T13:56:59.000Z"}],["meta",{"property":"article:author","content":"ChenSino"}],["meta",{"property":"article:tag","content":"字节码"}],["meta",{"property":"article:tag","content":"反汇编"}],["meta",{"property":"article:published_time","content":"2022-03-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-01T13:56:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"通过反汇编来看String的拼接\\",\\"image\\":[\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/7357c73b3cda41c0bd78dc7f0304b048.png\\"],\\"datePublished\\":\\"2022-03-14T00:00:00.000Z\\",\\"dateModified\\":\\"2022-08-01T13:56:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChenSino\\",\\"url\\":\\"https://ChenSino.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1659362219000,"updatedTime":1659362219000,"contributors":[{"name":"chenkun","email":"462488588@qq.com","commits":1}]},"readingTime":{"minutes":3.06,"words":918},"filePathRelative":"java/jvm/StringAdd.md","localizedDate":"2022年3月14日","excerpt":"<h4>1、先看问题，以下结果是什么？</h4>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">String</span> s1 <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"Hello\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">String</span> s2 <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"Hello\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">String</span> s3 <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"Hel\\"</span> <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"lo\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">String</span> s4 <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"Hel\\"</span> <span class=\\"token operator\\">+</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"lo\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">String</span> s5 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Hello\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">String</span> s6 <span class=\\"token operator\\">=</span> s5<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">intern</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">String</span> s7 <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"H\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">String</span> s8 <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"ello\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">String</span> s9 <span class=\\"token operator\\">=</span> s7 <span class=\\"token operator\\">+</span> s8<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>s1 <span class=\\"token operator\\">==</span> s2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  \\n<span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>s1 <span class=\\"token operator\\">==</span> s3<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  \\n<span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>s1 <span class=\\"token operator\\">==</span> s4<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  \\n<span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>s1 <span class=\\"token operator\\">==</span> s9<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  \\n<span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>s4 <span class=\\"token operator\\">==</span> s5<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> \\n<span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>s1 <span class=\\"token operator\\">==</span> s6<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> \\n</code></pre></div>","autoDesc":true}');export{S as comp,h as data};

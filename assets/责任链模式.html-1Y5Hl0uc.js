import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as t,e as i}from"./app-eaM1OiHO.js";const a={},r=i(`<h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code>责任链模式（Chain of Responsibility Pattern）是一种行为型设计模式，它可以将多个对象组合成一条链，并按照事先规定的顺序依次处理请求。每个对象都可以选择处理请求，或者将请求传递给链中的下一个对象。这种模式将请求的发送者和接收者解耦，使得多个对象都有机会处理请求，从而提高了系统的灵活性和可扩展性。

具体来说，责任链模式包含以下几个角色：

<span class="token list punctuation">1.</span> Handler：抽象处理者，它定义了用于处理请求的接口和链中下一个处理者的引用，通常包含一个处理请求的方法；

<span class="token list punctuation">2.</span> ConcreteHandler：具体处理者，它实现了Handler接口，根据具体业务逻辑处理请求，如果无法处理，则将请求传递给链中的下一个处理者；

<span class="token list punctuation">3.</span> Client：客户端，它向链中的第一个ConcreteHandler对象发起请求，然后等待链条响应请求。

责任链模式的优点在于它可以简化对象之间的耦合关系，增加系统的灵活性。它对系统进行解耦，使得请求发送者不必关心请求的具体处理者，发起请求后，请求会在链条中依次被多个对象处理。同时，责任链模式还可以方便地进行动态的链式调整，即在运行时往链中添加或删除具体处理者，以便满足实时的业务需求。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spring中的责任链" tabindex="-1"><a class="header-anchor" href="#spring中的责任链"><span>Spring中的责任链</span></a></h3><p>ProviderManager和AuthenticationProvider在Spring Security中，它们通常被归类为责任链模式（Chain of Responsibility）。</p><p>责任链模式可将多个对象组合在一起，每个对象都尝试处理某个请求。如果处理器不能处理请求，则传递给链中的下一个处理器，直到找到能够处理请求的处理器。在Spring Security中，ProviderManager就扮演了责任链的角色，它持有一个AuthenticationProvider的列表，每个AuthenticationProvider尝试对请求进行身份验证，如果认证失败，ProviderManager会将请求传递给下一个AuthenticationProvider对象。</p><p>因此，ProviderManager和AuthenticationProvider在Spring Security中通常被视为责任链模式的实现。这种设计模式使得多个对象可以自由组合在一起，只要它们都遵循同样的接口，便可以形成一个强大而灵活的处理链条。</p>`,6),o=[r];function s(l,d){return n(),t("div",null,o)}const u=e(a,[["render",s],["__file","责任链模式.html.vue"]]),m=JSON.parse('{"path":"/designpattern/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.html","title":"Chain of Responsibility Pattern","lang":"zh-CN","frontmatter":{"title":"Chain of Responsibility Pattern","date":"2023-05-12T00:00:00.000Z","isOriginal":true,"category":["设计模式"],"description":"定义 Spring中的责任链 ProviderManager和AuthenticationProvider在Spring Security中，它们通常被归类为责任链模式（Chain of Responsibility）。 责任链模式可将多个对象组合在一起，每个对象都尝试处理某个请求。如果处理器不能处理请求，则传递给链中的下一个处理器，直到找到能够处理请...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/designpattern/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"Chain of Responsibility Pattern"}],["meta",{"property":"og:description","content":"定义 Spring中的责任链 ProviderManager和AuthenticationProvider在Spring Security中，它们通常被归类为责任链模式（Chain of Responsibility）。 责任链模式可将多个对象组合在一起，每个对象都尝试处理某个请求。如果处理器不能处理请求，则传递给链中的下一个处理器，直到找到能够处理请..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-22T03:45:12.000Z"}],["meta",{"property":"article:author","content":"ChenSino"}],["meta",{"property":"article:published_time","content":"2023-05-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-22T03:45:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Chain of Responsibility Pattern\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-22T03:45:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChenSino\\",\\"url\\":\\"https://ChenSino.github.io\\"}]}"]]},"headers":[{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"Spring中的责任链","slug":"spring中的责任链","link":"#spring中的责任链","children":[]}],"git":{"createdTime":1684307143000,"updatedTime":1711079112000,"contributors":[{"name":"ChenSino","email":"462488588@qq.com","commits":2}]},"readingTime":{"minutes":2.14,"words":641},"filePathRelative":"designpattern/责任链模式.md","localizedDate":"2023年5月12日","excerpt":"<h3>定义</h3>\\n<div class=\\"language-markdown\\" data-ext=\\"md\\" data-title=\\"md\\"><pre class=\\"language-markdown\\"><code>责任链模式（Chain of Responsibility Pattern）是一种行为型设计模式，它可以将多个对象组合成一条链，并按照事先规定的顺序依次处理请求。每个对象都可以选择处理请求，或者将请求传递给链中的下一个对象。这种模式将请求的发送者和接收者解耦，使得多个对象都有机会处理请求，从而提高了系统的灵活性和可扩展性。\\n\\n具体来说，责任链模式包含以下几个角色：\\n\\n<span class=\\"token list punctuation\\">1.</span> Handler：抽象处理者，它定义了用于处理请求的接口和链中下一个处理者的引用，通常包含一个处理请求的方法；\\n\\n<span class=\\"token list punctuation\\">2.</span> ConcreteHandler：具体处理者，它实现了Handler接口，根据具体业务逻辑处理请求，如果无法处理，则将请求传递给链中的下一个处理者；\\n\\n<span class=\\"token list punctuation\\">3.</span> Client：客户端，它向链中的第一个ConcreteHandler对象发起请求，然后等待链条响应请求。\\n\\n责任链模式的优点在于它可以简化对象之间的耦合关系，增加系统的灵活性。它对系统进行解耦，使得请求发送者不必关心请求的具体处理者，发起请求后，请求会在链条中依次被多个对象处理。同时，责任链模式还可以方便地进行动态的链式调整，即在运行时往链中添加或删除具体处理者，以便满足实时的业务需求。\\n</code></pre></div>","autoDesc":true}');export{u as comp,m as data};

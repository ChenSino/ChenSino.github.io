import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as s,c as h,a as e,b as t,d as a,e as o}from"./app-COSs6b7v.js";const c={},l=o('<h2 id="_1、写在前面" tabindex="-1"><a class="header-anchor" href="#_1、写在前面"><span>1、写在前面</span></a></h2><p>一个系统一般都会有用户角色权限相关的概念，用户需要登录系统并且拥有相应的权限后才能访问对应的资源。</p><ul><li>认证（Authentication)，即确认用户的身份，也就是上面说的要输入帐号密码登录</li><li>授权（Authorization），即用户要访问某资源，必须要拥有对应权限</li></ul><p>也就是说，用户登录（认证）成功后，会获得此用户拥有的权限，用户在去访问资源时，系统会校验其拥有的权限是否可以访问这个资源。</p><h2 id="_2、sso和oauth2介绍" tabindex="-1"><a class="header-anchor" href="#_2、sso和oauth2介绍"><span>2、SSO和OAUTH2介绍</span></a></h2><p>SSO（SingleSignOn）的出现是为了解决多系统<strong>认证</strong>的问题的，这里特别强调一下，它是解决认证问题的。就是通过用户的一次性鉴别登录，当用户在身份认证服务器上登录一次以后，即可获得访问单点登录系统中其他关联系统和应用软件的权限，同时这种实现是不需要管理员对用户的登录状态或其他信息进行修改的，这意味着在多个应用系统中，用户只需一次登录就可以访问所有相互信任的应用系统。</p><p>oauth是一个协议，它们定义了一套流程规范，你要实现我这个协议，就得按照我的规范来，和java中jdbc一样，sun公司负责规定一套规范，提供一套接口，下游的用户自行负责实现，你具体怎么实现我不关心，你要做的就是实现我规定的一套规范。</p><p>OAUTH协议为用户资源的授权提供了一个安全的、开放而又简易的标准。与以往的授权方式不同之处是OAUTH的授权不会使第三方触及到用户的帐号信息（如用户名与密码），即第三方无需使用用户的用户名与密码就可以申请获得该用户资源的授权，因此OAUTH是安全的。<strong>OAuth强调的是授权</strong>，当然要想获取授权前你必须认证，就像第一节说的，用户只有登录后才能获得对应用户的权限，这一步是无法绕开的。</p><h2 id="_3、sso实现" tabindex="-1"><a class="header-anchor" href="#_3、sso实现"><span>3、SSO实现</span></a></h2><p>单点登录实现中，系统之间的协议对接是非常重要的一环，一般涉及的标准协议类型有 CAS、OAuth、OpenID Connect、SAML。</p><p>另外国产的SA-TOKEN项目也有sso和oauth实现</p><h3 id="_3-1-cas" tabindex="-1"><a class="header-anchor" href="#_3-1-cas"><span>3.1 CAS</span></a></h3><p>Central Authentication Service简称CAS，是一种常见的B/S架构的SSO协议。和其他任何SSO协议一样，用户仅需登陆一次，访问其他应用则无需再次登陆。顾名思义，CAS是一种仅用于Authentication的服务，它和OAuth/OIDC协议不一样，并不能作为一种Authorization的协议。当前CAS协议包括CAS 1.0、CAS2.0、CAS3.0版本，这三个版本的认证流程基本类似。CAS的认证流程通过包括几部分参与者:</p><p>Client: 通常为使用浏览器的用户 CAS Client: 实现CAS协议的Web应用 CAS Server: 作为统一认证的CAS服务器</p><h2 id="_4、各种协议对比" tabindex="-1"><a class="header-anchor" href="#_4、各种协议对比"><span>4、各种协议对比</span></a></h2><p>单纯的单点登录，其实无需授权中心有一套自己的用户和权限，单点登录是只管登录，登录后从业务系统自行获取自己的权限，所以从这个角度来说sso也有它自己的优势，它不像oauth那样还要维护一套用户权限系统，如果仅仅作单点登录不用权限的话用cas显然更有优势。</p>',16),d={href:"https://zhuanlan.zhihu.com/p/267845330",target:"_blank",rel:"noopener noreferrer"},p=e("img",{src:"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230104171826.png",alt:"20230104171826"},null,-1),S={href:"https://sa-token.cc/doc.html#/fun/sso-vs-oauth2",target:"_blank",rel:"noopener noreferrer"},u=o("<table><thead><tr><th>功能点</th><th>SSO单点登录</th><th>OAuth2.0</th></tr></thead><tbody><tr><td>统一认证</td><td>支持度高</td><td>支持度高</td></tr><tr><td>统一注销</td><td>支持度高</td><td>支持度低</td></tr><tr><td>多个系统会话一致性</td><td>强一致</td><td>弱一致</td></tr><tr><td>第三方应用授权管理</td><td>不支持</td><td>支持度高</td></tr><tr><td>自有系统授权管理</td><td>支持度高</td><td>支持度低</td></tr><tr><td>Client级的权限校验</td><td>不支持</td><td>支持度高</td></tr><tr><td>集成简易度</td><td>比较简单</td><td>难度中等</td></tr></tbody></table>",1);function m(g,_){const n=i("ExternalLinkIcon");return s(),h("div",null,[l,e("p",null,[t("以下图片是各种实现的对比图"),e("a",d,[t("来自知乎"),a(n)]),t("，我并不赞同他的观点，仅作参考 "),p]),e("p",null,[t("以下对比来自"),e("a",S,[t("sa-token官网"),a(n)])]),u])}const C=r(c,[["render",m],["__file","SSO.html.vue"]]),f=JSON.parse('{"path":"/java/framework/security/SSO.html","title":"SSO协议","lang":"zh-CN","frontmatter":{"title":"SSO协议","date":"2023-01-03T00:00:00.000Z","tag":["oauth","sso"],"description":"1、写在前面 一个系统一般都会有用户角色权限相关的概念，用户需要登录系统并且拥有相应的权限后才能访问对应的资源。 认证（Authentication)，即确认用户的身份，也就是上面说的要输入帐号密码登录 授权（Authorization），即用户要访问某资源，必须要拥有对应权限 也就是说，用户登录（认证）成功后，会获得此用户拥有的权限，用户在去访问资源...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/blog/java/framework/security/SSO.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"SSO协议"}],["meta",{"property":"og:description","content":"1、写在前面 一个系统一般都会有用户角色权限相关的概念，用户需要登录系统并且拥有相应的权限后才能访问对应的资源。 认证（Authentication)，即确认用户的身份，也就是上面说的要输入帐号密码登录 授权（Authorization），即用户要访问某资源，必须要拥有对应权限 也就是说，用户登录（认证）成功后，会获得此用户拥有的权限，用户在去访问资源..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230104171826.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-04T09:43:52.000Z"}],["meta",{"property":"article:author","content":"ChenSino"}],["meta",{"property":"article:tag","content":"oauth"}],["meta",{"property":"article:tag","content":"sso"}],["meta",{"property":"article:published_time","content":"2023-01-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-04T09:43:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SSO协议\\",\\"image\\":[\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230104171826.png\\"],\\"datePublished\\":\\"2023-01-03T00:00:00.000Z\\",\\"dateModified\\":\\"2023-01-04T09:43:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChenSino\\",\\"url\\":\\"https://ChenSino.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1、写在前面","slug":"_1、写在前面","link":"#_1、写在前面","children":[]},{"level":2,"title":"2、SSO和OAUTH2介绍","slug":"_2、sso和oauth2介绍","link":"#_2、sso和oauth2介绍","children":[]},{"level":2,"title":"3、SSO实现","slug":"_3、sso实现","link":"#_3、sso实现","children":[{"level":3,"title":"3.1 CAS","slug":"_3-1-cas","link":"#_3-1-cas","children":[]}]},{"level":2,"title":"4、各种协议对比","slug":"_4、各种协议对比","link":"#_4、各种协议对比","children":[]}],"git":{"createdTime":1672824556000,"updatedTime":1672825432000,"contributors":[{"name":"ChenSino","email":"chenxk@sonoscape.net","commits":2}]},"readingTime":{"minutes":3.65,"words":1095},"filePathRelative":"java/framework/security/SSO.md","localizedDate":"2023年1月3日","excerpt":"<h2>1、写在前面</h2>\\n<p>一个系统一般都会有用户角色权限相关的概念，用户需要登录系统并且拥有相应的权限后才能访问对应的资源。</p>\\n<ul>\\n<li>认证（Authentication)，即确认用户的身份，也就是上面说的要输入帐号密码登录</li>\\n<li>授权（Authorization），即用户要访问某资源，必须要拥有对应权限</li>\\n</ul>\\n<p>也就是说，用户登录（认证）成功后，会获得此用户拥有的权限，用户在去访问资源时，系统会校验其拥有的权限是否可以访问这个资源。</p>\\n<h2>2、SSO和OAUTH2介绍</h2>\\n<p>SSO（SingleSignOn）的出现是为了解决多系统<strong>认证</strong>的问题的，这里特别强调一下，它是解决认证问题的。就是通过用户的一次性鉴别登录，当用户在身份认证服务器上登录一次以后，即可获得访问单点登录系统中其他关联系统和应用软件的权限，同时这种实现是不需要管理员对用户的登录状态或其他信息进行修改的，这意味着在多个应用系统中，用户只需一次登录就可以访问所有相互信任的应用系统。</p>","autoDesc":true}');export{C as comp,f as data};

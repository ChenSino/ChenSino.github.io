import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as e,c,a as s,b as n,d as o,e as l}from"./app-eaM1OiHO.js";const i={},u=l(`<h2 id="_1、问题的背景" tabindex="-1"><a class="header-anchor" href="#_1、问题的背景"><span>1、问题的背景</span></a></h2><blockquote><p>有两个库，ccsx_data、ccsx_weibao，默认库是ccsx_data，我在代码中使用了&gt;mybatis-pulus的<code>@DS()</code>注解，想切换到ccsx_weibao这个库，但是切换一直失败，代码如下：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@DS</span><span class="token punctuation">(</span><span class="token string">&quot;ccsx_weibao&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InstallRecordVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryByPage</span><span class="token punctuation">(</span><span class="token class-name">Page</span> page<span class="token punctuation">,</span> <span class="token class-name">InstallRecordSearchVO</span> installRecordSearchVO<span class="token punctuation">,</span> <span class="token class-name">DataScope</span> dataScope<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InstallRecordSearchVO</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token class-name">QueryWrapperUtil</span><span class="token punctuation">.</span><span class="token function">getWrapper</span><span class="token punctuation">(</span>installRecordSearchVO<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InstallRecordVO</span><span class="token punctuation">&gt;</span></span> installRecordVOIPage <span class="token operator">=</span> installRecordMapper<span class="token punctuation">.</span><span class="token function">queryPageByDataScope</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> wrapper<span class="token punctuation">,</span> dataScope<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>installRecordVOIPage<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			installRecordVOIPage<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>installRecordVO <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">//这一步要查询的数据位于ccsx_weibao库</span>
				<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InstallRecordAccessory</span><span class="token punctuation">&gt;</span></span> installRecordAccessories <span class="token operator">=</span> installRecordAccessoryMapper<span class="token punctuation">.</span><span class="token function">queryByHostId</span><span class="token punctuation">(</span>installRecordVO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//……略  </span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> installRecordVOIPage<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、问题产生的原因" tabindex="-1"><a class="header-anchor" href="#_2、问题产生的原因"><span>2、问题产生的原因</span></a></h2><p>原因是MybatisPlus多数据源切换使用的是ThreadLocal来保存的，ThreadLocal中存放的是一个栈，具体可以查看源码<code>com.baomidou.dynamic.datasource.toolkit.DynamicDataSourceContextHolder</code>，注释写的很详细</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">NamedThreadLocal</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayDeque</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Deque</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 核心基于ThreadLocal的切换数据源工具类
 *
 * <span class="token keyword">@author</span> TaoYu Kanyuxia
 * <span class="token keyword">@since</span> 1.0.0
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DynamicDataSourceContextHolder</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 为什么要用链表存储(准确的是栈)
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>
     <span class="token code-section">* <span class="token line"><span class="token code language-java">为了支持嵌套切换，如<span class="token constant">ABC</span>三个service都是不同的数据源</span></span>
     * <span class="token line"><span class="token code language-java">其中<span class="token class-name">A</span>的某个业务要调<span class="token class-name">B</span>的方法，<span class="token class-name">B</span>的方法需要调用<span class="token class-name">C</span>的方法。一级一级调用切换，形成了链。</span></span>
     * <span class="token line"><span class="token code language-java">传统的只设置当前线程的方式不能满足此业务需求，必须使用栈，后进先出。</span></span>
     *</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Deque</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token constant">LOOKUP_KEY_HOLDER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamedThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Deque</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;dynamic-datasource&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">DynamicDataSourceContextHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获得当前线程数据源
     *
     * <span class="token keyword">@return</span> 数据源名称
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">LOOKUP_KEY_HOLDER</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 设置当前线程数据源
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 如非必要不要手动调用，调用后确保最终清除
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     *
     * <span class="token keyword">@param</span> <span class="token parameter">ds</span> 数据源名称
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">String</span> ds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> dataSourceStr <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;&quot;</span> <span class="token operator">:</span> ds<span class="token punctuation">;</span>
        <span class="token constant">LOOKUP_KEY_HOLDER</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dataSourceStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> dataSourceStr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 清空当前线程数据源
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 如果当前线程是连续切换数据源 只会移除掉当前线程的数据源名称
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> deque <span class="token operator">=</span> <span class="token constant">LOOKUP_KEY_HOLDER</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        deque<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token constant">LOOKUP_KEY_HOLDER</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 强制清空本地线程
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 防止内存泄漏，如手动调用了push可调用此方法确保清除
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">LOOKUP_KEY_HOLDER</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>@DS</code>注解注解只能保证数据源在当前线程生效，而我们在代码使用了<code>parallelStream</code>，这个方法本质使用的是<code>ForkJoinPool</code>，是多线程操作，所以在新的线程里面使用ThreadLocal肯定获取不到数据源了，于是就使用默认数据源所以报错。</p><h2 id="_3、解决方法" tabindex="-1"><a class="header-anchor" href="#_3、解决方法"><span>3、解决方法</span></a></h2><blockquote><p>在多线程内部使用<code>DynamicDataSourceContextHolder.push(&quot;&lt;your datasource&gt;&quot;);</code>，<br> 使用后务必调用<code>DynamicDataSourceContextHolder.clear();</code></p></blockquote><h2 id="_4、mybatisplus多线程数据源切换的源码分析" tabindex="-1"><a class="header-anchor" href="#_4、mybatisplus多线程数据源切换的源码分析"><span>4、MybatisPlus多线程数据源切换的源码分析</span></a></h2><p>测试代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@DS</span><span class="token punctuation">(</span><span class="token string">&quot;ccsx_data&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getLifeCycleInfoByDeptId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> sysHospitalDeptId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ThreadLocal</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> threadLocalMap <span class="token operator">=</span> <span class="token class-name">ThreadLocalUtil</span><span class="token punctuation">.</span><span class="token function">getThreadLocalMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">DynamicDataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;ccsx_test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">DynamicDataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//略</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),k={href:"https://chensino.github.io/docs/java/advance/ThreadLocal.html",target:"_blank",rel:"noopener noreferrer"};function r(d,m){const a=p("ExternalLinkIcon");return e(),c("div",null,[u,s("p",null,[n("使用 "),s("a",k,[n("ThreadLocalUtil.getThreadLocalMap()"),o(a)]),n("获取所有的线程的ThreadLocalMap，debug模式查看每一行执行过后数据源的变化")])])}const g=t(i,[["render",r],["__file","MybatisPlusDataSource.html.vue"]]),y=JSON.parse('{"path":"/java/framework/mybatis/MybatisPlusDataSource.html","title":"MybatisPlus多线程数据源切换问题","lang":"zh-CN","frontmatter":{"title":"MybatisPlus多线程数据源切换问题","date":"2022-07-29T00:00:00.000Z","author":"chenkun","publish":true,"keys":null,"description":"1、问题的背景 有两个库，ccsx_data、ccsx_weibao，默认库是ccsx_data，我在代码中使用了>mybatis-pulus的@DS()注解，想切换到ccsx_weibao这个库，但是切换一直失败，代码如下： 2、问题产生的原因 原因是MybatisPlus多数据源切换使用的是ThreadLocal来保存的，ThreadLocal中存...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/java/framework/mybatis/MybatisPlusDataSource.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"MybatisPlus多线程数据源切换问题"}],["meta",{"property":"og:description","content":"1、问题的背景 有两个库，ccsx_data、ccsx_weibao，默认库是ccsx_data，我在代码中使用了>mybatis-pulus的@DS()注解，想切换到ccsx_weibao这个库，但是切换一直失败，代码如下： 2、问题产生的原因 原因是MybatisPlus多数据源切换使用的是ThreadLocal来保存的，ThreadLocal中存..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-22T03:45:12.000Z"}],["meta",{"property":"article:author","content":"chenkun"}],["meta",{"property":"article:published_time","content":"2022-07-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-22T03:45:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MybatisPlus多线程数据源切换问题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-07-29T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-22T03:45:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"chenkun\\"}]}"]]},"headers":[{"level":2,"title":"1、问题的背景","slug":"_1、问题的背景","link":"#_1、问题的背景","children":[]},{"level":2,"title":"2、问题产生的原因","slug":"_2、问题产生的原因","link":"#_2、问题产生的原因","children":[]},{"level":2,"title":"3、解决方法","slug":"_3、解决方法","link":"#_3、解决方法","children":[]},{"level":2,"title":"4、MybatisPlus多线程数据源切换的源码分析","slug":"_4、mybatisplus多线程数据源切换的源码分析","link":"#_4、mybatisplus多线程数据源切换的源码分析","children":[]}],"git":{"createdTime":1659362219000,"updatedTime":1711079112000,"contributors":[{"name":"ChenSino","email":"462488588@qq.com","commits":1},{"name":"ChenSino","email":"chenxk@sonoscape.net","commits":1},{"name":"chenkun","email":"462488588@qq.com","commits":1}]},"readingTime":{"minutes":2.32,"words":696},"filePathRelative":"java/framework/mybatis/MybatisPlusDataSource.md","localizedDate":"2022年7月29日","excerpt":"<h2>1、问题的背景</h2>\\n<blockquote>\\n<p>有两个库，ccsx_data、ccsx_weibao，默认库是ccsx_data，我在代码中使用了&gt;mybatis-pulus的<code>@DS()</code>注解，想切换到ccsx_weibao这个库，但是切换一直失败，代码如下：</p>\\n</blockquote>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code>\\t<span class=\\"token annotation punctuation\\">@DS</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"ccsx_weibao\\"</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">IPage</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">InstallRecordVO</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">queryByPage</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Page</span> page<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">InstallRecordSearchVO</span> installRecordSearchVO<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">DataScope</span> dataScope<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token class-name\\">Wrapper</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">InstallRecordSearchVO</span><span class=\\"token punctuation\\">&gt;</span></span> wrapper <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">QueryWrapperUtil</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getWrapper</span><span class=\\"token punctuation\\">(</span>installRecordSearchVO<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token class-name\\">IPage</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">InstallRecordVO</span><span class=\\"token punctuation\\">&gt;</span></span> installRecordVOIPage <span class=\\"token operator\\">=</span> installRecordMapper<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">queryPageByDataScope</span><span class=\\"token punctuation\\">(</span>page<span class=\\"token punctuation\\">,</span> wrapper<span class=\\"token punctuation\\">,</span> dataScope<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">CollectionUtil</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isNotEmpty</span><span class=\\"token punctuation\\">(</span>installRecordVOIPage<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getRecords</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\tinstallRecordVOIPage<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getRecords</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">parallelStream</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span>installRecordVO <span class=\\"token operator\\">-&gt;</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">//这一步要查询的数据位于ccsx_weibao库</span>\\n\\t\\t\\t\\t<span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">InstallRecordAccessory</span><span class=\\"token punctuation\\">&gt;</span></span> installRecordAccessories <span class=\\"token operator\\">=</span> installRecordAccessoryMapper<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">queryByHostId</span><span class=\\"token punctuation\\">(</span>installRecordVO<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getId</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token comment\\">//……略  </span>\\n\\t\\t\\t<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> installRecordVOIPage<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{g as comp,y as data};

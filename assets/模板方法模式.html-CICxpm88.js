import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-TdR3A7lU.js";const t={},p=e(`<h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h2><p>模板方法模式（Template Method Pattern）是一种行为型设计模式，定义一个操作中的算法骨架，而将一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。这种设计模式是一种控制反转的实现方式。因为高层代码不再确定（控制）算法的处理流程。模板方法模式多用在某些类别的算法中，实现了相同的方法，造成代码的重复。这个设计模式和策略模式很像，不同的是，模板方法会有一些通用的逻辑，而策略模式是整个方法重写。从类的继承结构也可以看出来，模板方法是提供一个抽象类，有一个通用的方法，不通用的逻辑放到子类去实现，而策略模式是子类直接继承自接口，要重写整个方法。</p><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h2><p>mybatis中<code>org.apache.ibatis.executor.BaseExecutor</code>和他的子类是典型的模板方法模式。</p><p>mybatis中类型处理器也是典型的模板方法，具体在<code>org.apache.ibatis.type.BaseTypeHandler#setParameter</code>，如下，看类名就知道和BaseExecutor 一个套路，它实现了setParameter方法，但是仔细看，它调用了<code>setNonNullParameter(ps, i, parameter, jdbcType);</code>，如果用户自定义类类型处理器 最终调用的其实是<code>setNonNullParameter(PreparedStatement ps, int i, T parameter, JdbcType jdbcType)</code>，这个方法是个抽象的方法，等待 用户实现。也是一个经典的模板方法模式，相同逻辑放在一个方法，不同的部分，调用一个抽象方法，让用户自行实现。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">T</span> parameter<span class="token punctuation">,</span> <span class="token class-name">JdbcType</span> jdbcType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parameter <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>jdbcType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeException</span><span class="token punctuation">(</span><span class="token string">&quot;JDBC requires that the JdbcType must be specified for all nullable parameters.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        ps<span class="token punctuation">.</span><span class="token function">setNull</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> jdbcType<span class="token punctuation">.</span><span class="token constant">TYPE_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeException</span><span class="token punctuation">(</span><span class="token string">&quot;Error setting null for parameter #&quot;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&quot; with JdbcType &quot;</span> <span class="token operator">+</span> jdbcType <span class="token operator">+</span> <span class="token string">&quot; . &quot;</span>
            <span class="token operator">+</span> <span class="token string">&quot;Try setting a different JdbcType for this parameter or a different jdbcTypeForNull configuration property. &quot;</span>
            <span class="token operator">+</span> <span class="token string">&quot;Cause: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">setNonNullParameter</span><span class="token punctuation">(</span>ps<span class="token punctuation">,</span> i<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> jdbcType<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeException</span><span class="token punctuation">(</span><span class="token string">&quot;Error setting non null for parameter #&quot;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&quot; with JdbcType &quot;</span> <span class="token operator">+</span> jdbcType <span class="token operator">+</span> <span class="token string">&quot; . &quot;</span>
            <span class="token operator">+</span> <span class="token string">&quot;Try setting a different JdbcType for this parameter or a different configuration property. &quot;</span> <span class="token operator">+</span> <span class="token string">&quot;Cause: &quot;</span>
            <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>



    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">setNonNullParameter</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">T</span> parameter<span class="token punctuation">,</span> <span class="token class-name">JdbcType</span> jdbcType<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","模板方法模式.html.vue"]]),k=JSON.parse('{"path":"/designpattern/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html","title":"Template Method","lang":"zh-CN","frontmatter":{"title":"Template Method","date":"2023-05-30T00:00:00.000Z","isOriginal":true,"category":["设计模式"],"description":"定义 模板方法模式（Template Method Pattern）是一种行为型设计模式，定义一个操作中的算法骨架，而将一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。这种设计模式是一种控制反转的实现方式。因为高层代码不再确定（控制）算法的处理流程。模板方法模式多用在某些类别的算法中，实现了相同的方法，造成代码的重...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/designpattern/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"Template Method"}],["meta",{"property":"og:description","content":"定义 模板方法模式（Template Method Pattern）是一种行为型设计模式，定义一个操作中的算法骨架，而将一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。这种设计模式是一种控制反转的实现方式。因为高层代码不再确定（控制）算法的处理流程。模板方法模式多用在某些类别的算法中，实现了相同的方法，造成代码的重..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-22T03:45:12.000Z"}],["meta",{"property":"article:author","content":"ChenSino"}],["meta",{"property":"article:published_time","content":"2023-05-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-22T03:45:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Template Method\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-22T03:45:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChenSino\\",\\"url\\":\\"https://ChenSino.github.io\\"}]}"]]},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"例子","slug":"例子","link":"#例子","children":[]}],"git":{"createdTime":1685430411000,"updatedTime":1711079112000,"contributors":[{"name":"ChenSino","email":"462488588@qq.com","commits":3}]},"readingTime":{"minutes":1.87,"words":562},"filePathRelative":"designpattern/模板方法模式.md","localizedDate":"2023年5月30日","excerpt":"<h2>定义</h2>\\n<p>模板方法模式（Template Method Pattern）是一种行为型设计模式，定义一个操作中的算法骨架，而将一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。这种设计模式是一种控制反转的实现方式。因为高层代码不再确定（控制）算法的处理流程。模板方法模式多用在某些类别的算法中，实现了相同的方法，造成代码的重复。这个设计模式和策略模式很像，不同的是，模板方法会有一些通用的逻辑，而策略模式是整个方法重写。从类的继承结构也可以看出来，模板方法是提供一个抽象类，有一个通用的方法，不通用的逻辑放到子类去实现，而策略模式是子类直接继承自接口，要重写整个方法。</p>","autoDesc":true}');export{d as comp,k as data};

import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as s,e as i}from"./app-xHrnIhLr.js";const a={},o=i('<h2 id="一-使用场景" tabindex="-1"><a class="header-anchor" href="#一-使用场景"><span>一，使用场景</span></a></h2><p>在开发的过程中，经常会遇到，几个分支并行进行。当在A分支开发，突然发现有个线上bug，需要临时切换到B分支进行处理，同时，A分支上的代码还未编写完整，不想提交上去。这个时候，<code>git stash</code>的好处就提现出来了。</p><h2 id="二-stash的作用" tabindex="-1"><a class="header-anchor" href="#二-stash的作用"><span>二，stash的作用</span></a></h2><p>stash会跟踪文件的修改与暂存的改动——然后将未完成的修改保存到一个栈上， 而你可以在任何时候重新应用这些改动（甚至在不同的分支上）。</p><h2 id="三-使用命令" tabindex="-1"><a class="header-anchor" href="#三-使用命令"><span>三，使用命令</span></a></h2><ol><li><p><strong>git status</strong>查看哪些文件发生变化</p></li><li><p><strong>git stash</strong>把所有改动暂存起来，<code>git stash</code>等同于<code>git stash push</code>，可以给当前stash增加message方便后续查看</p><p><code>git stash push -m &quot;message&quot;</code>,执行完，会发现<code>git status</code>当前分支变得跟没有改动时一样干净</p></li><li><p><code>git stash list</code> 查看当前栈中有多少暂存记录</p></li><li><p>恢复栈最新的一个暂存可以<code>git stash pop</code>,取暂存中的某一份<code> git stash apply stash@{1}</code></p></li><li><p>pop<code> 和</code>apply<code>都可以恢复暂存，但是，apply执行后，暂存记录还存在。</code>pop`则会从栈中移除</p></li><li><p><code>git stash clear</code> 删除所有缓存的stash</p></li><li><p><code>git stash drop stash@{$num}</code> ：丢弃stash@{$num}存储，从列表中删除这个存储</p></li></ol><h2 id="四-本地解决冲突" tabindex="-1"><a class="header-anchor" href="#四-本地解决冲突"><span>四，本地解决冲突</span></a></h2><ol><li>把自己开发的代码储藏起来git stash</li><li>git pull 拉取最新代码</li><li>git stash pop 把暂存文件恢复</li><li>查看冲突，解决冲突 git status -s</li><li>解决完冲突后就可以像正常提交代码一样操作了，</li><li>git add xxx</li><li>git commit -m “xxx”</li><li>git push origin master:my_branch</li></ol>',8),n=[o];function p(h,l){return e(),s("div",null,n)}const r=t(a,[["render",p],["__file","stash.html.vue"]]),g=JSON.parse('{"path":"/other/git/stash.html","title":"git stash 暂存","lang":"zh-CN","frontmatter":{"title":"git stash 暂存","date":"2022-03-09T16:57:01.000Z","category":["git 操作","必会"],"description":"一，使用场景 在开发的过程中，经常会遇到，几个分支并行进行。当在A分支开发，突然发现有个线上bug，需要临时切换到B分支进行处理，同时，A分支上的代码还未编写完整，不想提交上去。这个时候，git stash的好处就提现出来了。 二，stash的作用 stash会跟踪文件的修改与暂存的改动——然后将未完成的修改保存到一个栈上， 而你可以在任何时候重新应用...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/other/git/stash.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"git stash 暂存"}],["meta",{"property":"og:description","content":"一，使用场景 在开发的过程中，经常会遇到，几个分支并行进行。当在A分支开发，突然发现有个线上bug，需要临时切换到B分支进行处理，同时，A分支上的代码还未编写完整，不想提交上去。这个时候，git stash的好处就提现出来了。 二，stash的作用 stash会跟踪文件的修改与暂存的改动——然后将未完成的修改保存到一个栈上， 而你可以在任何时候重新应用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-01T13:56:59.000Z"}],["meta",{"property":"article:author","content":"ChenSino"}],["meta",{"property":"article:published_time","content":"2022-03-09T16:57:01.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-01T13:56:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"git stash 暂存\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-09T16:57:01.000Z\\",\\"dateModified\\":\\"2022-08-01T13:56:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChenSino\\",\\"url\\":\\"https://ChenSino.github.io\\"}]}"]]},"headers":[{"level":2,"title":"一，使用场景","slug":"一-使用场景","link":"#一-使用场景","children":[]},{"level":2,"title":"二，stash的作用","slug":"二-stash的作用","link":"#二-stash的作用","children":[]},{"level":2,"title":"三，使用命令","slug":"三-使用命令","link":"#三-使用命令","children":[]},{"level":2,"title":"四，本地解决冲突","slug":"四-本地解决冲突","link":"#四-本地解决冲突","children":[]}],"git":{"createdTime":1659362219000,"updatedTime":1659362219000,"contributors":[{"name":"chenkun","email":"462488588@qq.com","commits":1}]},"readingTime":{"minutes":1.52,"words":456},"filePathRelative":"other/git/stash.md","localizedDate":"2022年3月9日","excerpt":"<h2>一，使用场景</h2>\\n<p>在开发的过程中，经常会遇到，几个分支并行进行。当在A分支开发，突然发现有个线上bug，需要临时切换到B分支进行处理，同时，A分支上的代码还未编写完整，不想提交上去。这个时候，<code>git stash</code>的好处就提现出来了。</p>\\n<h2>二，stash的作用</h2>\\n<p>stash会跟踪文件的修改与暂存的改动——然后将未完成的修改保存到一个栈上， 而你可以在任何时候重新应用这些改动（甚至在不同的分支上）。</p>\\n<h2>三，使用命令</h2>\\n<ol>\\n<li>\\n<p><strong>git status</strong>查看哪些文件发生变化</p>\\n</li>\\n<li>\\n<p><strong>git stash</strong>把所有改动暂存起来，<code>git stash</code>等同于<code>git stash push</code>，可以给当前stash增加message方便后续查看</p>\\n<p><code>git stash push -m \\"message\\"</code>,执行完，会发现<code>git status</code>当前分支变得跟没有改动时一样干净</p>\\n</li>\\n<li>\\n<p><code>git stash list</code>  查看当前栈中有多少暂存记录</p>\\n</li>\\n<li>\\n<p>恢复栈最新的一个暂存可以<code>git stash pop</code>,取暂存中的某一份<code> git stash apply stash@{1}</code></p>\\n</li>\\n<li>\\n<p>pop<code> 和</code>apply<code>都可以恢复暂存，但是，apply执行后，暂存记录还存在。</code>pop`则会从栈中移除</p>\\n</li>\\n<li>\\n<p><code>git stash clear</code>  删除所有缓存的stash</p>\\n</li>\\n<li>\\n<p><code>git stash drop stash@{$num}</code> ：丢弃stash@{$num}存储，从列表中删除这个存储</p>\\n</li>\\n</ol>","autoDesc":true}');export{r as comp,g as data};

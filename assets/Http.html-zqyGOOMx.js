import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as e,e as s}from"./app-TdR3A7lU.js";const t={},o=s(`<div class="hint-container caution"><p class="hint-container-title">必看手册</p><p>https://developer.mozilla.org/zh-CN/docs/Web/HTTP</p></div><h2 id="一、状态码" tabindex="-1"><a class="header-anchor" href="#一、状态码"><span>一、状态码</span></a></h2><h3 id="_1-1-3xx" tabindex="-1"><a class="header-anchor" href="#_1-1-3xx"><span>1.1 3xx</span></a></h3><h3 id="_1-1-1-304" tabindex="-1"><a class="header-anchor" href="#_1-1-1-304"><span>1.1.1 304</span></a></h3><p>HTTP 304 Not Modified 说明无需再次传输请求的内容，也就是说可以使用缓存的内容。这通常是在一些安全的方法（safe），例如GET 或HEAD 或在请求中附带了头部信息： If-None-Match 或If-Modified-Since。</p><p>如果是 200 OK ，响应会带有头部 Cache-Control, Content-Location, Date, ETag, Expires，和 Vary.</p><div class="hint-container caution"><p class="hint-container-title">温馨提示</p><p>很多浏览器的 开发者工具 会发出额外的请求，以达到 304 的目的，这样可以把资源以本地缓存的形式展现给开发者。一般缓存静态文件，如果用户在服务器上修改了静态文件，则请求时服务器会读取其修改时间， 这样就知道此文件是已修改过的，需要重新响应给浏览器修改后的内容。</p></div><p>比如以下请求，浏览器会自动携带If-Modified-Since请求头，然后拿这个时间和服务器上文件修改时间对比，如果服务器上的时间比这个新，就会返回200,否则返回304。 <img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20221101150553.png" alt="20221101150553"></p><p>另外浏览器有个Disable cache选择项，勾选此项代表不允许浏览器自动携带If-Modified-Sinc请求头，也就无法使用本地缓存了。当使用Ctrl+F5刷新页面时也是同样的道理，不携带If-Modified-Sinc请求头。 <img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20221101150938.png" alt="20221101150938"></p><h2 id="二、http请求" tabindex="-1"><a class="header-anchor" href="#二、http请求"><span>二、http请求</span></a></h2><h3 id="_2-1-302重定向" tabindex="-1"><a class="header-anchor" href="#_2-1-302重定向"><span>2.1 302重定向</span></a></h3><p>请求被重定向后，是无法给客户端响应ResbonseBody，但是可以有Response Header,测试代码如下，请求<code>http://localhost:8888/hello/cookie</code>，在请求处理逻辑里面 添加一个cookie,然后重定向到百度。可以看到如下代码我有设置返回值，但是其实毫无意义，在return之前就被redirect到了百度。同时，在Response Headers中可以看到有 <code>Cookie: test=aaaaaa</code>，并且打开<code>localhost</code>能看到在下面有对应的cookie</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttptestApplication</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;cookie&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;aaaaaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20221102170142.png" alt="20221102170142"></p><p>使用工具查看localhost下的cookie <img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20221102170819.png" alt="20221102170819"></p><h2 id="二、http协议" tabindex="-1"><a class="header-anchor" href="#二、http协议"><span>二、http协议</span></a></h2><h3 id="_2-1-http协议是什么" tabindex="-1"><a class="header-anchor" href="#_2-1-http协议是什么"><span>2.1 http协议是什么</span></a></h3><h2 id="三、headers" tabindex="-1"><a class="header-anchor" href="#三、headers"><span>三、Headers</span></a></h2><h3 id="_3-1-中文header" tabindex="-1"><a class="header-anchor" href="#_3-1-中文header"><span>3.1 中文header</span></a></h3><p>无论请求头还是响应头，是不支持中文的，如果要支持中文需要自己编码，比如使用UrlEncode编码，前端获取请求头再解码即可，</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
 <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&quot;中文&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> chineseStr <span class="token operator">=</span> <span class="token function">decodeURI</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,22),p=[o];function i(c,l){return a(),e("div",null,p)}const h=n(t,[["render",i],["__file","Http.html.vue"]]),u=JSON.parse('{"path":"/other/web/Http.html","title":"Http","lang":"zh-CN","frontmatter":{"title":"Http","date":"2022-11-01T00:00:00.000Z","author":"chensino","tag":["必会"],"description":"必看手册 https://developer.mozilla.org/zh-CN/docs/Web/HTTP 一、状态码 1.1 3xx 1.1.1 304 HTTP 304 Not Modified 说明无需再次传输请求的内容，也就是说可以使用缓存的内容。这通常是在一些安全的方法（safe），例如GET 或HEAD 或在请求中附带了头部信息： If-...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/other/web/Http.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"Http"}],["meta",{"property":"og:description","content":"必看手册 https://developer.mozilla.org/zh-CN/docs/Web/HTTP 一、状态码 1.1 3xx 1.1.1 304 HTTP 304 Not Modified 说明无需再次传输请求的内容，也就是说可以使用缓存的内容。这通常是在一些安全的方法（safe），例如GET 或HEAD 或在请求中附带了头部信息： If-..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20221101150553.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-17T07:05:43.000Z"}],["meta",{"property":"article:author","content":"chensino"}],["meta",{"property":"article:tag","content":"必会"}],["meta",{"property":"article:published_time","content":"2022-11-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-17T07:05:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Http\\",\\"image\\":[\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20221101150553.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20221101150938.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20221102170142.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20221102170819.png\\"],\\"datePublished\\":\\"2022-11-01T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-17T07:05:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"chensino\\"}]}"]]},"headers":[{"level":2,"title":"一、状态码","slug":"一、状态码","link":"#一、状态码","children":[{"level":3,"title":"1.1 3xx","slug":"_1-1-3xx","link":"#_1-1-3xx","children":[]},{"level":3,"title":"1.1.1 304","slug":"_1-1-1-304","link":"#_1-1-1-304","children":[]}]},{"level":2,"title":"二、http请求","slug":"二、http请求","link":"#二、http请求","children":[{"level":3,"title":"2.1 302重定向","slug":"_2-1-302重定向","link":"#_2-1-302重定向","children":[]}]},{"level":2,"title":"二、http协议","slug":"二、http协议","link":"#二、http协议","children":[{"level":3,"title":"2.1 http协议是什么","slug":"_2-1-http协议是什么","link":"#_2-1-http协议是什么","children":[]}]},{"level":2,"title":"三、Headers","slug":"三、headers","link":"#三、headers","children":[{"level":3,"title":"3.1 中文header","slug":"_3-1-中文header","link":"#_3-1-中文header","children":[]}]}],"git":{"createdTime":1667288702000,"updatedTime":1684307143000,"contributors":[{"name":"ChenSino","email":"chenxk@sonoscape.net","commits":3},{"name":"ChenSino","email":"462488588@qq.com","commits":1}]},"readingTime":{"minutes":2.12,"words":636},"filePathRelative":"other/web/Http.md","localizedDate":"2022年11月1日","excerpt":"<div class=\\"hint-container caution\\">\\n<p class=\\"hint-container-title\\">必看手册</p>\\n<p>https://developer.mozilla.org/zh-CN/docs/Web/HTTP</p>\\n</div>\\n<h2>一、状态码</h2>\\n<h3>1.1 3xx</h3>\\n<h3>1.1.1 304</h3>\\n<p>HTTP 304 Not Modified 说明无需再次传输请求的内容，也就是说可以使用缓存的内容。这通常是在一些安全的方法（safe），例如GET 或HEAD 或在请求中附带了头部信息： If-None-Match 或If-Modified-Since。</p>","autoDesc":true}');export{h as comp,u as data};

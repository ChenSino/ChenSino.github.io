import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-TdR3A7lU.js";const e={},p=t(`<h2 id="_1、需求" tabindex="-1"><a class="header-anchor" href="#_1、需求"><span>1、需求</span></a></h2><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code>前后分离项目使用不同登录方式进行登录
    <span class="token list punctuation">1.</span> 使用帐号/密码登录
    <span class="token list punctuation">2.</span> 使用手机号/验证码登录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、实现方法" tabindex="-1"><a class="header-anchor" href="#_2、实现方法"><span>2、实现方法</span></a></h2><div class="hint-container note"><p class="hint-container-title">注</p><p>Security是一个扩展性很强的框架，预留了各种端点进行扩展，多种方式登录需要扩展AuthenticationProvider，进行自定义实现。默认情况 Security使用的是DAOAuthenticationProvider，就是从数据库中读取用户名/密码进行校验。</p></div><h3 id="_2-1-自定义authenticationprovider" tabindex="-1"><a class="header-anchor" href="#_2-1-自定义authenticationprovider"><span>2.1 自定义AuthenticationProvider</span></a></h3><div class="hint-container caution"><p class="hint-container-title">思考</p><pre><code>自定义了AuthenticationProvider后为什么连AuthenticationToken也要自定义？
为什么不直接用UsernamePasswordAuthenticationToken？
</code></pre></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//自定义AuthenticationProvider</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomMobileAuthenticationProvider</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationProvider</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserDetailsService</span> userDetailsService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Authentication</span> <span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;enter into custom AuthenticationProvider&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//</span>
        <span class="token class-name">CustomSecurityUser</span> customSecurityUser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CustomSecurityUser</span><span class="token punctuation">)</span> userDetailsService<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PhoneAuthenticationToken</span> phoneAuthenticationToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneAuthenticationToken</span><span class="token punctuation">(</span>customSecurityUser<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> phoneAuthenticationToken<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> authentication<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">PhoneAuthenticationToken</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-自定义authenticationtoken" tabindex="-1"><a class="header-anchor" href="#_2-2-自定义authenticationtoken"><span>2.2 自定义AuthenticationToken</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//自定义AuthenticationToken</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneAuthenticationToken</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAuthenticationToken</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token class-name">SpringSecurityCoreVersion</span><span class="token punctuation">.</span><span class="token constant">SERIAL_VERSION_UID</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> principal<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Object</span> credentials<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * This constructor can be safely used by any code that wishes to create a
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name">UsernamePasswordAuthenticationToken</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>, as the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
     * will return <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token boolean">false</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>.
     *
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">PhoneAuthenticationToken</span><span class="token punctuation">(</span><span class="token class-name">Object</span> principal<span class="token punctuation">,</span> <span class="token class-name">Object</span> credentials<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>principal <span class="token operator">=</span> principal<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>credentials <span class="token operator">=</span> credentials<span class="token punctuation">;</span>
        <span class="token function">setAuthenticated</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * This constructor should only be used by <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name">AuthenticationManager</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> or
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name">AuthenticationProvider</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> implementations that are satisfied with
     * producing a trusted (i.e. <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> = <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token boolean">true</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>)
     * authentication token.
     * <span class="token keyword">@param</span> <span class="token parameter">principal</span>
     * <span class="token keyword">@param</span> <span class="token parameter">credentials</span>
     * <span class="token keyword">@param</span> <span class="token parameter">authorities</span>
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">PhoneAuthenticationToken</span><span class="token punctuation">(</span><span class="token class-name">Object</span> principal<span class="token punctuation">,</span> <span class="token class-name">Object</span> credentials<span class="token punctuation">,</span>
                                               <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorities<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>authorities<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>principal <span class="token operator">=</span> principal<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>credentials <span class="token operator">=</span> credentials<span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setAuthenticated</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// must use super, as we override</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * This factory method can be safely used by any code that wishes to create a
     * unauthenticated <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name">UsernamePasswordAuthenticationToken</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>.
     * <span class="token keyword">@param</span> <span class="token parameter">principal</span>
     * <span class="token keyword">@param</span> <span class="token parameter">credentials</span>
     * <span class="token keyword">@return</span> UsernamePasswordAuthenticationToken with false isAuthenticated() result
     *
     * <span class="token keyword">@since</span> 5.7
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span> <span class="token function">unauthenticated</span><span class="token punctuation">(</span><span class="token class-name">Object</span> principal<span class="token punctuation">,</span> <span class="token class-name">Object</span> credentials<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>principal<span class="token punctuation">,</span> credentials<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * This factory method can be safely used by any code that wishes to create a
     * authenticated <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name">UsernamePasswordAuthenticationToken</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>.
     * <span class="token keyword">@param</span> <span class="token parameter">principal</span>
     * <span class="token keyword">@param</span> <span class="token parameter">credentials</span>
     * <span class="token keyword">@return</span> UsernamePasswordAuthenticationToken with true isAuthenticated() result
     *
     * <span class="token keyword">@since</span> 5.7
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span> <span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token class-name">Object</span> principal<span class="token punctuation">,</span> <span class="token class-name">Object</span> credentials<span class="token punctuation">,</span>
                                                                    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorities<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>principal<span class="token punctuation">,</span> credentials<span class="token punctuation">,</span> authorities<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>credentials<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>principal<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAuthenticated</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isAuthenticated<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token operator">!</span>isAuthenticated<span class="token punctuation">,</span>
                <span class="token string">&quot;Cannot set this token to trusted - use constructor which takes a GrantedAuthority list instead&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setAuthenticated</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eraseCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">eraseCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>credentials <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code>回答上面的问题，AuthenticationProvider接口中中有个boolean supports(Class<span class="token prolog">&lt;?&gt; authentication);方法，
此方法表明该AuthenticationProvider的处理范围，我们知道AuthenticationManager的实现类一般用的是ProviderManager，
在此类中管理了很多AuthenticationProvider负责真正的认证工作，那么当有多个AuthenticationProvider的时候，它们
是如何确定某个AuthenticationProvider是否需要对此次登录进行认证呢？玄机就在上面的support方法，一般情况下它的实现如下


    @Override
    public boolean supports(Class&lt;?&gt;</span> authentication) {
        //authentication是PhoneAuthenticationToken或其子类
        return PhoneAuthenticationToken.class.isAssignableFrom(authentication);
    }

上面参数authentication，是在认证时传递过来的，在Service层授权是传递的如下图所示，当认证时传递的PhoneAuthenticationToken类型，
则此类型经过supports方法判断时该Provider是否要处理此时认证，当然上面的只是一般写法，可以根据业务需求写一些复杂的判断。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20221222214542.png" alt="20221222214542"></p><h3 id="_2-3-自定义登录接口" tabindex="-1"><a class="header-anchor" href="#_2-3-自定义登录接口"><span>2.3 自定义登录接口</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//Controller层</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">,</span><span class="token class-name">String</span> code<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> loginService<span class="token punctuation">.</span><span class="token function">loginByPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">,</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token comment">//Service层</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span> <span class="token function">loginByPhone</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">,</span> <span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">//TODO 校验验证码合法性</span>

        <span class="token comment">//根据手机号和验证码查询用户，手机号——&gt;用户</span>
        <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span>  sysUserService<span class="token punctuation">.</span><span class="token function">findUserByPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//构造一个未认证的对象</span>
        <span class="token class-name">PhoneAuthenticationToken</span> phoneAuthenticationToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneAuthenticationToken</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sysUser<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//1. 使用AuthenticationManager认证用户</span>
        <span class="token class-name">Authentication</span> authenticate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>

            authenticate <span class="token operator">=</span> authenticationManager<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>phoneAuthenticationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//2. 认证失败</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;认证失败，{}&quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//3. 认证通过，生成token,key-&gt;token,value-&gt;username</span>
        <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">fastUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CustomSecurityUser</span> customSecurityUser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CustomSecurityUser</span><span class="token punctuation">)</span> authenticate<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//4. token存入redis</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">CacheConst</span><span class="token punctuation">.</span><span class="token constant">TOKEN_PREFIX</span> <span class="token operator">+</span> <span class="token class-name">StrPool</span><span class="token punctuation">.</span><span class="token constant">COLON</span> <span class="token operator">+</span> token<span class="token punctuation">,</span> customSecurityUser<span class="token punctuation">,</span> expiration<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;access_token&quot;</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
        data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;authorities&quot;</span><span class="token punctuation">,</span> customSecurityUser<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-配置自定义的authenticationprovider" tabindex="-1"><a class="header-anchor" href="#_2-4-配置自定义的authenticationprovider"><span>2.4 配置自定义的AuthenticationProvider</span></a></h3><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code>注意要记得保留默认的登录方法，当设置了自定义AuthenticationProvider时，Security不会自动注入原来默认
的DAOAuthenticationProvider了，如果想保留的话，需要我们手动注入，
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 新版本security获取AuthenticationManager的两种方法
     * <span class="token keyword">@param</span> <span class="token parameter">authenticationConfiguration</span>
     * <span class="token keyword">@return</span>
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
     */</span>
<span class="token comment">//    @Bean</span>
<span class="token comment">//    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {</span>
<span class="token comment">//        return authenticationConfiguration.getAuthenticationManager();</span>
<span class="token comment">//    }</span>


    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">AuthenticationManager</span> <span class="token function">authManager</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">AuthenticationManagerBuilder</span> authenticationManagerBuilder <span class="token operator">=</span>
                http<span class="token punctuation">.</span><span class="token function">getSharedObject</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationManagerBuilder</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        authenticationManagerBuilder<span class="token punctuation">.</span><span class="token function">authenticationProvider</span><span class="token punctuation">(</span>customMobileAuthenticationProvider<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自定义的</span>
        authenticationManagerBuilder<span class="token punctuation">.</span><span class="token function">authenticationProvider</span><span class="token punctuation">(</span><span class="token function">authProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//原来默认的</span>

        <span class="token keyword">return</span> authenticationManagerBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * 默认AuthenticationProvider,如果创建了自定义AuthenticationProvider，则默认的就不会被注入到AuthenticationManager,
     * 所以如果还想保留默认的，需要手动创建bean,并在AuthenticationManager中注入
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DaoAuthenticationProvider</span> <span class="token function">authProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DaoAuthenticationProvider</span> authenticationProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DaoAuthenticationProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        authenticationProvider<span class="token punctuation">.</span><span class="token function">setPasswordEncoder</span><span class="token punctuation">(</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        authenticationProvider<span class="token punctuation">.</span><span class="token function">setUserDetailsService</span><span class="token punctuation">(</span>userDetailsService<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> authenticationProvider<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20221223102912.png" alt="20221223102912"></p>`,17),c=[p];function o(i,l){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","CustomAuthenticationProvider.html.vue"]]),k=JSON.parse('{"path":"/java/framework/security/CustomAuthenticationProvider.html","title":"Security扩展自定义登录方式","lang":"zh-CN","frontmatter":{"title":"Security扩展自定义登录方式","date":"2022-12-22T00:00:00.000Z","author":"chensino","keys":null,"category":["Security"],"description":"1、需求 2、实现方法 注 Security是一个扩展性很强的框架，预留了各种端点进行扩展，多种方式登录需要扩展AuthenticationProvider，进行自定义实现。默认情况 Security使用的是DAOAuthenticationProvider，就是从数据库中读取用户名/密码进行校验。 2.1 自定义AuthenticationProvi...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/java/framework/security/CustomAuthenticationProvider.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"Security扩展自定义登录方式"}],["meta",{"property":"og:description","content":"1、需求 2、实现方法 注 Security是一个扩展性很强的框架，预留了各种端点进行扩展，多种方式登录需要扩展AuthenticationProvider，进行自定义实现。默认情况 Security使用的是DAOAuthenticationProvider，就是从数据库中读取用户名/密码进行校验。 2.1 自定义AuthenticationProvi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20221222214542.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-22T03:45:12.000Z"}],["meta",{"property":"article:author","content":"chensino"}],["meta",{"property":"article:published_time","content":"2022-12-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-22T03:45:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Security扩展自定义登录方式\\",\\"image\\":[\\"http://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20221222214542.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20221223102912.png\\"],\\"datePublished\\":\\"2022-12-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-22T03:45:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"chensino\\"}]}"]]},"headers":[{"level":2,"title":"1、需求","slug":"_1、需求","link":"#_1、需求","children":[]},{"level":2,"title":"2、实现方法","slug":"_2、实现方法","link":"#_2、实现方法","children":[{"level":3,"title":"2.1 自定义AuthenticationProvider","slug":"_2-1-自定义authenticationprovider","link":"#_2-1-自定义authenticationprovider","children":[]},{"level":3,"title":"2.2 自定义AuthenticationToken","slug":"_2-2-自定义authenticationtoken","link":"#_2-2-自定义authenticationtoken","children":[]},{"level":3,"title":"2.3 自定义登录接口","slug":"_2-3-自定义登录接口","link":"#_2-3-自定义登录接口","children":[]},{"level":3,"title":"2.4 配置自定义的AuthenticationProvider","slug":"_2-4-配置自定义的authenticationprovider","link":"#_2-4-配置自定义的authenticationprovider","children":[]}]}],"git":{"createdTime":1671704576000,"updatedTime":1711079112000,"contributors":[{"name":"ChenSino","email":"chenxk@sonoscape.net","commits":3},{"name":"ChenSino","email":"462488588@qq.com","commits":1},{"name":"chenkun","email":"462488588@qq.com","commits":1}]},"readingTime":{"minutes":3.64,"words":1093},"filePathRelative":"java/framework/security/CustomAuthenticationProvider.md","localizedDate":"2022年12月22日","excerpt":"<h2>1、需求</h2>\\n<div class=\\"language-markdown\\" data-ext=\\"md\\" data-title=\\"md\\"><pre class=\\"language-markdown\\"><code>前后分离项目使用不同登录方式进行登录\\n    <span class=\\"token list punctuation\\">1.</span> 使用帐号/密码登录\\n    <span class=\\"token list punctuation\\">2.</span> 使用手机号/验证码登录\\n</code></pre></div><h2>2、实现方法</h2>\\n<div class=\\"hint-container note\\">\\n<p class=\\"hint-container-title\\">注</p>\\n<p>Security是一个扩展性很强的框架，预留了各种端点进行扩展，多种方式登录需要扩展AuthenticationProvider，进行自定义实现。默认情况\\nSecurity使用的是DAOAuthenticationProvider，就是从数据库中读取用户名/密码进行校验。</p>\\n</div>","autoDesc":true}');export{d as comp,k as data};

(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{643:function(t,s,e){"use strict";e.r(s);var a=e(10),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"一-问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-问题"}},[t._v("#")]),t._v(" "),e("strong",[t._v("一，问题")])]),t._v(" "),e("p",[t._v("​\t\t\t\t在git log中往往会发现在log中出现"),e("code",[t._v("Merge branch 'master of .....'")]),t._v("这种合并节点，造成日志的污染")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220726115529360.png",alt:"image-20220726115529360"}})]),t._v(" "),e("h3",{attrs:{id:"二-产生的原因"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-产生的原因"}},[t._v("#")]),t._v(" 二，产生的原因")]),t._v(" "),e("p",[t._v("当多人合作开发一个项目时，本地仓库落后于远程仓库是一个非常正常的事情，可参考下图\n"),e("img",{attrs:{src:"http://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20190719174211701.png",alt:"在这里插入图片描述"}})]),t._v(" "),e("p",[t._v("具体情境如下：")]),t._v(" "),e("p",[t._v("我当前拉取的远端版本为 B，此时修改了代码，并在本地仓库 commit 一次，但并未 push 到远端仓库。\n另一位开发者在 B 的基础上，同样 commit 了一次并 push 到远端仓库。那么这个时候，我再 push 自己的代码就会发生错误。")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("To github.com:xxx/xxx.git\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("rejected"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("        master -"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" master "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch first"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nerror: failed to push some refs to "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git@github.com:xxx/xxx.git'")]),t._v("\nhint: Updates were rejected because the remote contains work that you "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e.g., "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git pull ...'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" before pushing again.\n\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("p",[t._v("这个时候我们会选择，先 pull（如果有冲突需要先解决冲突，再 push。push 成功，但是此时我们查看 log 就会发现除了我们自己提交的那条日志之外，会多出一条 “Merge branch ‘master’ of …”。")]),t._v(" "),e("p",[t._v("那么，为什么会出现这种现象呢？其实是与 Git 的工作原理有关，对 Git 比较了解的人应该会知道，无论是 pull、push 亦或是 merge 操作，其实背后都是有很多的不同的模式的。")]),t._v(" "),e("p",[t._v("在进行 pull 操作的同时，其实就是 "),e("strong",[e("code",[t._v("fetch+merge")])]),t._v(" 的一个过程。我们从 remote 分支中拉取新的更新，然后再合并到本地分支中去。")]),t._v(" "),e("p",[t._v("如果 "),e("code",[t._v("remote")]),t._v("分支超前于本地分支，"),e("strong",[t._v("并且本地分支没有任何 commit 的，直接从 remote 进行 pull 操作，默认会采用 fast-forward 模式")]),t._v("，这种模式下，并 不会产生合并节点，也就是说不会产生多余的那条 log 信息。")]),t._v(" "),e("p",[e("strong",[t._v("如果本地先commit后再去pull,那么此时，remote分支和本地分支会出现分叉，这个时候使用pull操作拉取更新时，就会进行分支合并，产生合并节点和log信息")]),t._v("。（总之如果本地有commit记录，只要出现本地分支落后远程分支，那么无论本地文件与远程文件是否有冲突，pull代码都会产生merge节点,本地分支落后于远程分支是无法push代码的)")]),t._v(" "),e("h3",{attrs:{id:"三-解决方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-解决方法"}},[t._v("#")]),t._v(" 三，解决方法")]),t._v(" "),e("p",[t._v("方法一:   在执行"),e("code",[t._v("git pull")]),t._v("的时候加上"),e("code",[t._v("–rebase")]),t._v("参数。这参数的意思就是在合并代码之前，先执行变基操作，成功后在进行真正的merge操作。(如果有冲突需要手动解决)")]),t._v(" "),e("p",[t._v("方法二： 在你的"),e("code",[t._v("git bash")]),t._v("里执行"),e("code",[t._v("git config --global pull.rebase true")]),t._v("。这个配置就是告诉git在每次pull前先进行rebase操作。这种方法和方法1原理一样，只不过方法1是每次pull前都要手动操作。")]),t._v(" "),e("p",[t._v("方法三：修改任何代码之前，先pull代码到本地。")])])}),[],!1,null,null,null);s.default=r.exports}}]);
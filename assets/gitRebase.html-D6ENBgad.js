import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as t,e as s}from"./app-DaXuKV75.js";const i={},n=s(`<h3 id="一-用于合并当前分支的多个commit记录" tabindex="-1"><a class="header-anchor" href="#一-用于合并当前分支的多个commit记录"><span>一，用于合并当前分支的多个commit记录</span></a></h3><p>应用场景，如下第2-4次提交是对同一功能的代码提交记录，完全可以合并成一次提交记录。这个时候rebase就很有用了。</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724180044950.png" alt="image-20220724180044950"></p><ol><li><h4 id="找到想要合并的commit-使用rebase-i" tabindex="-1"><a class="header-anchor" href="#找到想要合并的commit-使用rebase-i"><span><strong>找到想要合并的commit, 使用rebase -i</strong></span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>git rebase -i bd0d758(第一次提交的commitId)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意 git rebase -i [startPonit] [endPoint]</p><p>前开后闭 区间 这里的 [startPonit] 是指需要合并的commit的前一个commit (即当前示例中的 “bd0d758: 第一次提交”)。 因为, 三个commit肯定要基于上一个commit合并成了新的commit。 谨慎使用[endPoint] 省略, 即默认表示从起始commit一直到最后一个，但是一旦你填写了, 则表示 [endPoint]后面的commit全部不要了!</p></blockquote></li></ol><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724181559992.png" alt="image-20220724181559992"></p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724181803651.png" alt="image-20220724181803651"></p><h4 id="_2-进入interact交互界面" tabindex="-1"><a class="header-anchor" href="#_2-进入interact交互界面"><span>2，进入Interact交互界面</span></a></h4><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724181831357.png" alt="image-20220724181831357"></p><p><strong><code>说明</code></strong></p><ul><li>最上面三行, 就是刚刚选中的三个commit, 按时间顺序依次往下排序(和git log的展示顺序是反的, 大家查看的时候要注意)</li><li>前面的三个Pick 其实就是下面 <strong>Commands展示的7种命令中的第一个p</strong>, 也就是使用commit。</li></ul><h4 id="_3-使用s命令-合并到上一个commit" tabindex="-1"><a class="header-anchor" href="#_3-使用s命令-合并到上一个commit"><span>3，使用s命令 合并到上一个commit</span></a></h4><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724182138971.png" alt="image-20220724182138971"></p><h4 id="_4-修改commit记录" tabindex="-1"><a class="header-anchor" href="#_4-修改commit记录"><span>4.修改commit记录</span></a></h4><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724182435924.png" alt="image-20220724182435924"></span></a></h3><p>再此执行git log 可以发现234此提交合并为一个了</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724182807371.png" alt="image-20220724182807371"></p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724182912368.png" alt="image-20220724182912368"></p><h3 id="二、使用rebase替代merge合并分支" tabindex="-1"><a class="header-anchor" href="#二、使用rebase替代merge合并分支"><span>二、使用rebase替代merge合并分支</span></a></h3><p>2.1 使用merge合并分支代码</p><p><strong>注意：当只有dev分支有提交，master分支没有任何提交，dev分支merge到master分支上，依旧是保持一条直线，也没有多余的提交。</strong></p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724212609039.png" alt="image-20220724212609039"></p><p><strong>给master新增两个提交，dev分支与master分支立即就会不重合，不在一条直线上。</strong></p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724213219850.png" alt="image-20220724213219850"></p><p>再给dev分支新增一个commit &quot;dev新增代码1&quot;可以看出提交节点是按事件排序的，可以看到dev分支的节点显示再master前面。</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724213304415.png" alt="image-20220724213304415"></p><p>3,切换到master分支，直接merge dev</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724213729960.png" alt="image-20220724213729960"></p><p>提示产生冲突，因为master前两次提交，与dev最后一次提交都更改过了readme.txt文件，所以合并分支会产生冲突。</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724214028599.png" alt="image-20220724214028599"></p><p>合并代码，-&gt;commit &quot;合并分支dev到master上面&quot;</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724214057554.png" alt="image-20220724214057554"></p><p>git 分支就显示如下图所示</p><p>!(https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724214320960.png)</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724214614292.png" alt="image-20220724214614292"></p><p>总之，merge dev分支到master上会出现以下结果：</p><ol><li><p>会保留所有的commit(hashId不变)</p></li><li><p>按提交顺序排序</p></li><li><p>产生新的commit点(Merge branch ‘XXX’ into develop)（这里的我的显是合并分支dev到master上面）</p></li></ol><p>2.2 使用rebase合并dev分支到master上</p><p><strong>1,切换当前分支为dev</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> switch  dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>2，给dev变基到master (如果有冲突需解决冲突)</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724220033035.png" alt="image-20220724220033035"></p><p><strong>3，提示解决冲突，去冲突文件解决冲突。解决冲突后，执行命令</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token string">&#39;冲突文件&#39;</span>
<span class="token function">git</span> rebase <span class="token parameter variable">--continue</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行完<code>git rebase --continue</code> 进入以下界面 <img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724220336167.png" alt="image-20220724220336167"></p><p>这里是修改commit 信息</p><p>修改完按<code>:wq</code>保存退出。</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724220742643.png" alt="image-20220724220742643"></p><p>此时<code>dev</code>分支和<code>master</code>分支已经重合</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724221217031.png" alt="image-20220724221217031"></p><p><strong>4，合并dev代码到master上</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> switch master
<span class="token function">git</span> merge dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时master分支与dev分支在同一个提交节点了。</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724221734501.png" alt="image-20220724221734501"></p>`,54),c=[n];function g(o,p){return a(),t("div",null,c)}const r=e(i,[["render",g],["__file","gitRebase.html.vue"]]),d=JSON.parse('{"path":"/other/git/gitRebase.html","title":"git rebase的使用","lang":"zh-CN","frontmatter":{"title":"git rebase的使用","date":"2022-03-09T16:57:01.000Z","author":"zxf","category":["git 操作"],"tag":["必会"],"description":"一，用于合并当前分支的多个commit记录 应用场景，如下第2-4次提交是对同一功能的代码提交记录，完全可以合并成一次提交记录。这个时候rebase就很有用了。 image-20220724180044950 找到想要合并的commit, 使用rebase -i 注意 git rebase -i [startPonit] [endPoint] 前开后闭...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/other/git/gitRebase.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"git rebase的使用"}],["meta",{"property":"og:description","content":"一，用于合并当前分支的多个commit记录 应用场景，如下第2-4次提交是对同一功能的代码提交记录，完全可以合并成一次提交记录。这个时候rebase就很有用了。 image-20220724180044950 找到想要合并的commit, 使用rebase -i 注意 git rebase -i [startPonit] [endPoint] 前开后闭..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724180044950.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-01T13:56:59.000Z"}],["meta",{"property":"article:author","content":"zxf"}],["meta",{"property":"article:tag","content":"必会"}],["meta",{"property":"article:published_time","content":"2022-03-09T16:57:01.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-01T13:56:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"git rebase的使用\\",\\"image\\":[\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724180044950.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724181559992.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724181803651.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724181831357.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724182138971.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724182435924.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724182807371.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724182912368.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724212609039.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724213219850.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724213304415.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724213729960.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724214028599.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724214057554.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724214614292.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724220033035.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724220336167.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724220742643.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724221217031.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724221734501.png\\"],\\"datePublished\\":\\"2022-03-09T16:57:01.000Z\\",\\"dateModified\\":\\"2022-08-01T13:56:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zxf\\"}]}"]]},"headers":[{"level":3,"title":"一，用于合并当前分支的多个commit记录","slug":"一-用于合并当前分支的多个commit记录","link":"#一-用于合并当前分支的多个commit记录","children":[]},{"level":3,"title":"","slug":"","link":"#","children":[]},{"level":3,"title":"二、使用rebase替代merge合并分支","slug":"二、使用rebase替代merge合并分支","link":"#二、使用rebase替代merge合并分支","children":[]}],"git":{"createdTime":1659362219000,"updatedTime":1659362219000,"contributors":[{"name":"chenkun","email":"462488588@qq.com","commits":1}]},"readingTime":{"minutes":3.1,"words":930},"filePathRelative":"other/git/gitRebase.md","localizedDate":"2022年3月9日","excerpt":"<h3>一，用于合并当前分支的多个commit记录</h3>\\n<p>应用场景，如下第2-4次提交是对同一功能的代码提交记录，完全可以合并成一次提交记录。这个时候rebase就很有用了。</p>\\n<p><img src=\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/image-20220724180044950.png\\" alt=\\"image-20220724180044950\\"></p>\\n<ol>\\n<li>\\n<h4><strong>找到想要合并的commit, 使用rebase -i</strong></h4>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>git rebase -i bd0d758(第一次提交的commitId)\\n</code></pre></div><blockquote>\\n<p>注意 git rebase -i [startPonit] [endPoint]</p>\\n<p>前开后闭 区间 这里的 [startPonit] 是指需要合并的commit的前一个commit (即当前示例中的 “bd0d758: 第一次提交”)。 因为, 三个commit肯定要基于上一个commit合并成了新的commit。\\n谨慎使用[endPoint] 省略, 即默认表示从起始commit一直到最后一个，但是一旦你填写了, 则表示 [endPoint]后面的commit全部不要了!</p>\\n</blockquote>\\n</li>\\n</ol>","autoDesc":true}');export{r as comp,d as data};

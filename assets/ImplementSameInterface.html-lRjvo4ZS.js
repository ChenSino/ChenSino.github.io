import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-COSs6b7v.js";const t={},p=e(`<h2 id="_1、背景" tabindex="-1"><a class="header-anchor" href="#_1、背景"><span>1、背景</span></a></h2><p>今天看Securfity的源码，其中<code>org.springframework.security.config.annotation.web.builders.HttpSecurity</code>类的UML看着很奇怪，如下图所示，命名其父类和父接口都实现过SecurityBuilder,为什么自己要再次实现呢？</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230105160622.png" alt="20230105160622"></p><h2 id="_2、探索" tabindex="-1"><a class="header-anchor" href="#_2、探索"><span>2、探索</span></a></h2><p>我一开始注意力被泛型吸引了，想着是不是因为用了不同的泛型类的原因，为此我还专门去复习了一下泛型的东西。后来确定和泛型没关系，然后百度了一下，找到了以下网友的博客，为此我还专门写demo验证了他的博客内容，发现确实如此。 <img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230105161007.png" alt="20230105161007"></p><h3 id="_2-1-demo验证" tabindex="-1"><a class="header-anchor" href="#_2-1-demo验证"><span>2.1 demo验证</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//第一层实现</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;I am Human&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//第二层实现</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Male</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;I am male&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">//测试</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Animal</span> human <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Human</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Animal</span> male <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Male</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">testInterfaces</span><span class="token punctuation">(</span>human<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">testInterfaces</span><span class="token punctuation">(</span>male<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testInterfaces</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        animal<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> animal<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>interfaces<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>interfaces<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>interface1 <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>interface1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----------------后置分割线----------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">### 测试结果</span>
<span class="token comment">## 第一次Male未实现Animal接口，则反射时一个male对象是无法获取到Animal类型的，但是Human因为直接实现了Animal所以能获取到Animal接口</span>

I am Human
org.example.Animal
----------------后置分割线----------------
I am male
----------------后置分割线----------------
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230105161843.png" alt="20230105161843"></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#第二次测试，让Male也实现Animal接口，再执行测试代码，则male也可以获取到了Animal</span>
I am Human
org.example.Animal
----------------后置分割线----------------
I am male
org.example.Animal
----------------后置分割线----------------
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230105161911.png" alt="20230105161911"></p><h3 id="_2-2-回到security源码验证" tabindex="-1"><a class="header-anchor" href="#_2-2-回到security源码验证"><span>2.2 回到security源码验证</span></a></h3><p>我下载了Security的源码，然后直接在源码中删除了HttpSecurity中对SecurityBuilder的实现，重新编译，编译没报错，</p><h2 id="_3、结论" tabindex="-1"><a class="header-anchor" href="#_3、结论"><span>3、结论</span></a></h2><p>子类和父类实现同一个接口，这种写法是为了保证反射获取到接口类型时能正常获取到其实现的接口类型。</p>`,15),c=[p];function i(o,l){return s(),a("div",null,c)}const d=n(t,[["render",i],["__file","ImplementSameInterface.html.vue"]]),m=JSON.parse('{"path":"/java/advance/ImplementSameInterface.html","title":"子类和父类（或者父接口）实现同一个接口","lang":"zh-CN","frontmatter":{"title":"子类和父类（或者父接口）实现同一个接口","date":"2023-01-03T00:00:00.000Z","tag":["oauth","sso"],"description":"1、背景 今天看Securfity的源码，其中org.springframework.security.config.annotation.web.builders.HttpSecurity类的UML看着很奇怪，如下图所示，命名其父类和父接口都实现过SecurityBuilder,为什么自己要再次实现呢？ 20230105160622 2、探索 我一开...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/blog/java/advance/ImplementSameInterface.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"子类和父类（或者父接口）实现同一个接口"}],["meta",{"property":"og:description","content":"1、背景 今天看Securfity的源码，其中org.springframework.security.config.annotation.web.builders.HttpSecurity类的UML看着很奇怪，如下图所示，命名其父类和父接口都实现过SecurityBuilder,为什么自己要再次实现呢？ 20230105160622 2、探索 我一开..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230105160622.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-05T08:23:04.000Z"}],["meta",{"property":"article:author","content":"ChenSino"}],["meta",{"property":"article:tag","content":"oauth"}],["meta",{"property":"article:tag","content":"sso"}],["meta",{"property":"article:published_time","content":"2023-01-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-05T08:23:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"子类和父类（或者父接口）实现同一个接口\\",\\"image\\":[\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230105160622.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230105161007.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230105161843.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230105161911.png\\"],\\"datePublished\\":\\"2023-01-03T00:00:00.000Z\\",\\"dateModified\\":\\"2023-01-05T08:23:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChenSino\\",\\"url\\":\\"https://ChenSino.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1、背景","slug":"_1、背景","link":"#_1、背景","children":[]},{"level":2,"title":"2、探索","slug":"_2、探索","link":"#_2、探索","children":[{"level":3,"title":"2.1 demo验证","slug":"_2-1-demo验证","link":"#_2-1-demo验证","children":[]},{"level":3,"title":"2.2  回到security源码验证","slug":"_2-2-回到security源码验证","link":"#_2-2-回到security源码验证","children":[]}]},{"level":2,"title":"3、结论","slug":"_3、结论","link":"#_3、结论","children":[]}],"git":{"createdTime":1672906984000,"updatedTime":1672906984000,"contributors":[{"name":"ChenSino","email":"chenxk@sonoscape.net","commits":1}]},"readingTime":{"minutes":1.7,"words":510},"filePathRelative":"java/advance/ImplementSameInterface.md","localizedDate":"2023年1月3日","excerpt":"<h2>1、背景</h2>\\n<p>今天看Securfity的源码，其中<code>org.springframework.security.config.annotation.web.builders.HttpSecurity</code>类的UML看着很奇怪，如下图所示，命名其父类和父接口都实现过SecurityBuilder,为什么自己要再次实现呢？</p>\\n<p><img src=\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230105160622.png\\" alt=\\"20230105160622\\"></p>\\n<h2>2、探索</h2>","autoDesc":true}');export{d as comp,m as data};

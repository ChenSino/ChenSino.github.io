import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as a,e as c}from"./app-Cf-knFG-.js";const i={},n=c('<p>文章来源：https://zhuanlan.zhihu.com/p/111110992</p><h3 id="gcc" tabindex="-1"><a class="header-anchor" href="#gcc"><span>gcc</span></a></h3><p>它是GNU Compiler Collection（就是GNU编译器套件），也可以简单认为是编译器，它可以编译很多种编程语言（括C、C++、Objective-C、Fortran、Java等等）。</p><p>我们的程序只有一个源文件时，直接就可以用gcc命令编译它。</p><p>可是，如果我们的程序包含很多个源文件时，该咋整？用gcc命令逐个去编译时，就发现很容易混乱而且工作量大，所以出现了下面make工具。</p><p>gcc命令在链接时默认使用C的库，只有添加了-lstdc++选项才会使用 C++ 的库。 不过 GCC 中还有一个g++命令，它专门用来编译 C++ 程序，广大 C++ 开发人员也都使用这个命令。g++命令和gcc命令的用法是一样的。</p><h3 id="make" tabindex="-1"><a class="header-anchor" href="#make"><span>make</span></a></h3><p>make工具可以看成是一个智能的批处理工具，它本身并没有编译和链接的功能，而是用类似于批处理的方式—通过调用makefile文件中用户指定的命令来进行编译和链接的。</p><h3 id="makefile" tabindex="-1"><a class="header-anchor" href="#makefile"><span>makefile</span></a></h3><p>这个是啥东西？</p><p>简单的说就像一首歌的乐谱，make工具就像指挥家，指挥家根据乐谱指挥整个乐团怎么样演奏，make工具就根据makefile中的命令进行编译和链接的。makefile命令中就包含了调用gcc（也可以是别的编译器）去编译某个源文件的命令。</p><p>makefile在一些简单的工程完全可以人工拿下，但是当工程非常大的时候，手写makefile也是非常麻烦的，如果换了个平台makefile又要重新修改，这时候就出现了下面的Cmake这个工具。</p><h3 id="cmake" tabindex="-1"><a class="header-anchor" href="#cmake"><span>cmake</span></a></h3><p>cmake就可以更加简单的生成makefile文件给上面那个make用。当然cmake还有其他更牛X功能，就是可以跨平台生成对应平台能用的makefile，我们就不用再自己去修改了。</p><p>可是cmake根据什么生成makefile呢？它又要根据一个叫CMakeLists.txt文件（学名：组态档）去生成makefile。</p><h3 id="cmakelist-txt" tabindex="-1"><a class="header-anchor" href="#cmakelist-txt"><span>CMakeList.txt</span></a></h3><p>到最后CMakeLists.txt文件谁写啊？亲，是你自己手写的。</p><h3 id="nmake-1" tabindex="-1"><a class="header-anchor" href="#nmake-1"><span>nmake[1]</span></a></h3><p>nmake又是啥东西？</p><p>nmake是Microsoft Visual Studio中的附带命令，需要安装VS，实际上可以说相当于linux的make，明白了么？</p><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230113135511.png" alt="20230113135511"></p><p>总结一下大体流程[2] 1.用编辑器编写源代码，如.c文件。</p><p>2.用编译器编译代码生成目标文件，如.o。</p><p>3.用链接器连接目标代码生成可执行文件，如.exe。</p><p>但如果源文件太多，一个一个编译那得多麻烦啊？于是人们想到，为啥不设计一种类似批处理的程序，来批处理编译源文件呢？</p><p>于是就有了make工具，它是一个自动化编译工具，你可以使用一条命令实现完全编译。但是你需要编写一个规则文件，make依据它来批处理编译，这个文件就是makefile，所以编写makefile文件也是一个程序员所必备的技能。</p><p>对于一个大工程，编写makefile实在是件复杂的事，于是人们又想，为什么不设计一个工具，读入所有源文件之后，自动生成makefile呢，于是就出现了cmake工具，它能够输出各种各样的makefile或者project文件,从而帮助程序员减轻负担。但是随之而来也就是编写cmakelist文件，它是cmake所依据的规则。（cmake中有很多设置库的，此时还不是可执行文件，而make生成后才是二进制可执行文件。）</p>',27),p=[n];function l(o,m){return t(),a("div",null,p)}const h=e(i,[["render",l],["__file","1.html.vue"]]),k=JSON.parse('{"path":"/cpp/other/1.html","title":"c++中使用的编译工具介绍","lang":"zh-CN","frontmatter":{"title":"c++中使用的编译工具介绍","date":"2023-01-13T00:00:00.000Z","description":"文章来源：https://zhuanlan.zhihu.com/p/111110992 gcc 它是GNU Compiler Collection（就是GNU编译器套件），也可以简单认为是编译器，它可以编译很多种编程语言（括C、C++、Objective-C、Fortran、Java等等）。 我们的程序只有一个源文件时，直接就可以用gcc命令编译它。 ...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/cpp/other/1.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"c++中使用的编译工具介绍"}],["meta",{"property":"og:description","content":"文章来源：https://zhuanlan.zhihu.com/p/111110992 gcc 它是GNU Compiler Collection（就是GNU编译器套件），也可以简单认为是编译器，它可以编译很多种编程语言（括C、C++、Objective-C、Fortran、Java等等）。 我们的程序只有一个源文件时，直接就可以用gcc命令编译它。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230113135511.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-29T02:35:09.000Z"}],["meta",{"property":"article:author","content":"ChenSino"}],["meta",{"property":"article:published_time","content":"2023-01-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-29T02:35:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++中使用的编译工具介绍\\",\\"image\\":[\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230113135511.png\\"],\\"datePublished\\":\\"2023-01-13T00:00:00.000Z\\",\\"dateModified\\":\\"2023-01-29T02:35:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChenSino\\",\\"url\\":\\"https://ChenSino.github.io\\"}]}"]]},"headers":[{"level":3,"title":"gcc","slug":"gcc","link":"#gcc","children":[]},{"level":3,"title":"make","slug":"make","link":"#make","children":[]},{"level":3,"title":"makefile","slug":"makefile","link":"#makefile","children":[]},{"level":3,"title":"cmake","slug":"cmake","link":"#cmake","children":[]},{"level":3,"title":"CMakeList.txt","slug":"cmakelist-txt","link":"#cmakelist-txt","children":[]},{"level":3,"title":"nmake[1]","slug":"nmake-1","link":"#nmake-1","children":[]}],"git":{"createdTime":1673589476000,"updatedTime":1674959709000,"contributors":[{"name":"ChenSino","email":"chenxk@sonoscape.net","commits":2}]},"readingTime":{"minutes":3.17,"words":952},"filePathRelative":"cpp/other/1.md","localizedDate":"2023年1月13日","excerpt":"<p>文章来源：https://zhuanlan.zhihu.com/p/111110992</p>\\n<h3>gcc</h3>\\n<p>它是GNU Compiler Collection（就是GNU编译器套件），也可以简单认为是编译器，它可以编译很多种编程语言（括C、C++、Objective-C、Fortran、Java等等）。</p>\\n<p>我们的程序只有一个源文件时，直接就可以用gcc命令编译它。</p>\\n<p>可是，如果我们的程序包含很多个源文件时，该咋整？用gcc命令逐个去编译时，就发现很容易混乱而且工作量大，所以出现了下面make工具。</p>\\n<p>gcc命令在链接时默认使用C的库，只有添加了-lstdc++选项才会使用 C++ 的库。\\n不过 GCC 中还有一个g++命令，它专门用来编译 C++ 程序，广大 C++ 开发人员也都使用这个命令。g++命令和gcc命令的用法是一样的。</p>","autoDesc":true}');export{h as comp,k as data};

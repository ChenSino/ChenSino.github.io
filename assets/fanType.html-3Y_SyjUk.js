import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as s,b as n,d as l,e as a}from"./app-TdR3A7lU.js";const i={},r=a(`<h2 id="一-泛型" tabindex="-1"><a class="header-anchor" href="#一-泛型"><span>一，泛型</span></a></h2><p>泛型就是通过给类型传参，得到一个更加通用的类型，就像给函数传参一样。 如下我们得到一个通用的泛型类型 T1，通过传参，可以得到 T2 类型 string[]、T3 类型 number[]； T 是变量，我们可以用任意其他变量名代替他。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T2</span></span> <span class="token operator">=</span> <span class="token constant">T1</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token comment">// string[]</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T3</span></span> <span class="token operator">=</span> <span class="token constant">T1</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token comment">// number[]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-定义泛型接口" tabindex="-1"><a class="header-anchor" href="#二-定义泛型接口"><span>二，定义泛型接口</span></a></h2>`,4),u={href:"https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},k=a(`<p>实现的功能是一样的，这时候我们就可以使用泛型来优化</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">num</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>a <span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">num</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">str</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>a <span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">str</span><span class="token punctuation">(</span><span class="token string">&#39;独孤&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;求败&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用泛型来优化</p><p>语法为函数名后面跟一个&lt;参数名&gt; 参数名可以随便写 例如我这儿写了T</p><p>当我们使用这个函数的时候把参数的类型传进去就可以了 （也就是动态类型）。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">Add</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>  <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token generic-function"><span class="token function">Add</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token generic-function"><span class="token function">Add</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以使用不同的泛型参数名，只要在数量上和使用方式上能对应上就可以了</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">add</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span><span class="token constant">U</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">|</span><span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>
	<span class="token keyword">const</span> params<span class="token operator">:</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">|</span><span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span>
    <span class="token keyword">return</span> params
<span class="token punctuation">}</span>
<span class="token generic-function"><span class="token function">Sub</span><span class="token generic class-name"><span class="token operator">&lt;</span>Boolean<span class="token punctuation">,</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-对象字面量泛型" tabindex="-1"><a class="header-anchor" href="#三-对象字面量泛型"><span>三 对象字面量泛型</span></a></h2><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> foo <span class="token operator">:</span><span class="token punctuation">{</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">}</span>
<span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> arg
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四-泛型接口" tabindex="-1"><a class="header-anchor" href="#四-泛型接口"><span>四，泛型接口</span></a></h2><p>声明接口的时候 在名字后面加一个&lt;参数&gt;</p><p>使用的时候传递类型</p><p>泛型接口和上述示例类似，为接口类型传参：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">I1</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">I2</span></span> <span class="token operator">=</span> <span class="token constant">I1</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span>  <span class="token comment">// type I2 = {name:string,age:number}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="泛型约束" tabindex="-1"><a class="header-anchor" href="#泛型约束"><span>，泛型约束</span></a></h2><p>Typescript 通过 extends 实现类型约束。让传入值满足特定条件；</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>
<span class="token keyword">interface</span> <span class="token class-name">IWithLength</span> <span class="token punctuation">{</span>
  length<span class="token operator">:</span><span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">echoWithLength</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> IWithLength<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  <span class="token keyword">return</span> arg
<span class="token punctuation">}</span>

<span class="token function">echoWithLength</span><span class="token punctuation">(</span><span class="token string">&#39;str&#39;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 extends 约束了 K 必须是 T 的 key。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getProperty</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> tsInfo <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;Typescript&quot;</span><span class="token punctuation">,</span>
    supersetOf<span class="token operator">:</span> <span class="token string">&quot;Javascript&quot;</span><span class="token punctuation">,</span>
    difficulty<span class="token operator">:</span> Difficulty<span class="token punctuation">.</span>Intermediate
<span class="token punctuation">}</span>

<span class="token keyword">let</span> difficulty<span class="token operator">:</span> Difficulty <span class="token operator">=</span>
    <span class="token function">getProperty</span><span class="token punctuation">(</span>tsInfo<span class="token punctuation">,</span> <span class="token string">&#39;difficulty&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>

<span class="token keyword">let</span> supersetOf<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span>
    <span class="token function">getProperty</span><span class="token punctuation">(</span>tsInfo<span class="token punctuation">,</span> <span class="token string">&#39;superset_of&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五-泛型参数默认值" tabindex="-1"><a class="header-anchor" href="#五-泛型参数默认值"><span>五，泛型参数默认值</span></a></h2><p>​ 泛型参数默认值，和函数参数默认值一样，在没有传参时，给定默认值。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">I4</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token constant">S1</span><span class="token operator">:</span> <span class="token constant">I4</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;123&#39;</span> <span class="token punctuation">}</span> <span class="token comment">// 默认 name: string类型</span>
<span class="token keyword">const</span> <span class="token constant">S2</span><span class="token operator">:</span> <span class="token constant">I4</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23);function d(m,v){const t=p("ExternalLinkIcon");return o(),c("div",null,[r,s("p",null,[n("我写了两个函数一个是数字类型的函数，另一个是"),s("a",u,[n("字符串"),l(t)]),n("类型的函数,其实就是类型不同")]),k])}const y=e(i,[["render",d],["__file","fanType.html.vue"]]),h=JSON.parse('{"path":"/frontweb/typeScript/fanType.html","title":"typeScript中的泛型","lang":"zh-CN","frontmatter":{"title":"typeScript中的泛型","date":"2022-08-05T16:57:01.000Z","author":"qianxun","category":["vue知识点"],"tag":["必会","vue中的 TypeScript"],"description":"一，泛型 泛型就是通过给类型传参，得到一个更加通用的类型，就像给函数传参一样。 如下我们得到一个通用的泛型类型 T1，通过传参，可以得到 T2 类型 string[]、T3 类型 number[]； T 是变量，我们可以用任意其他变量名代替他。 二，定义泛型接口 我写了两个函数一个是数字类型的函数，另一个是字符串类型的函数,其实就是类型不同 实现的功能...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/frontweb/typeScript/fanType.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"typeScript中的泛型"}],["meta",{"property":"og:description","content":"一，泛型 泛型就是通过给类型传参，得到一个更加通用的类型，就像给函数传参一样。 如下我们得到一个通用的泛型类型 T1，通过传参，可以得到 T2 类型 string[]、T3 类型 number[]； T 是变量，我们可以用任意其他变量名代替他。 二，定义泛型接口 我写了两个函数一个是数字类型的函数，另一个是字符串类型的函数,其实就是类型不同 实现的功能..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-11-10T07:05:14.000Z"}],["meta",{"property":"article:author","content":"qianxun"}],["meta",{"property":"article:tag","content":"必会"}],["meta",{"property":"article:tag","content":"vue中的 TypeScript"}],["meta",{"property":"article:published_time","content":"2022-08-05T16:57:01.000Z"}],["meta",{"property":"article:modified_time","content":"2022-11-10T07:05:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"typeScript中的泛型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-05T16:57:01.000Z\\",\\"dateModified\\":\\"2022-11-10T07:05:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"qianxun\\"}]}"]]},"headers":[{"level":2,"title":"一，泛型","slug":"一-泛型","link":"#一-泛型","children":[]},{"level":2,"title":"二，定义泛型接口","slug":"二-定义泛型接口","link":"#二-定义泛型接口","children":[]},{"level":2,"title":"三 对象字面量泛型","slug":"三-对象字面量泛型","link":"#三-对象字面量泛型","children":[]},{"level":2,"title":"四，泛型接口","slug":"四-泛型接口","link":"#四-泛型接口","children":[]},{"level":2,"title":"，泛型约束","slug":"泛型约束","link":"#泛型约束","children":[]},{"level":2,"title":"五，泛型参数默认值","slug":"五-泛型参数默认值","link":"#五-泛型参数默认值","children":[]}],"git":{"createdTime":1667462716000,"updatedTime":1668063914000,"contributors":[{"name":"zhu","email":"819508408@qq.com","commits":2}]},"readingTime":{"minutes":2.13,"words":640},"filePathRelative":"frontweb/typeScript/fanType.md","localizedDate":"2022年8月5日","excerpt":"<h2>一，泛型</h2>\\n<p>泛型就是通过给类型传参，得到一个更加通用的类型，就像给函数传参一样。 如下我们得到一个通用的泛型类型 T1，通过传参，可以得到 T2 类型 string[]、T3 类型 number[]； T 是变量，我们可以用任意其他变量名代替他。</p>\\n<div class=\\"language-typescript\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code>\\n<span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\"><span class=\\"token constant\\">T1</span><span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span><span class=\\"token operator\\">&gt;</span></span> <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n\\n<span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\"><span class=\\"token constant\\">T2</span></span> <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">T1</span><span class=\\"token operator\\">&lt;</span><span class=\\"token builtin\\">string</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token comment\\">// string[]</span>\\n\\n<span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\"><span class=\\"token constant\\">T3</span></span> <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">T1</span><span class=\\"token operator\\">&lt;</span><span class=\\"token builtin\\">number</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token comment\\">// number[]</span>\\n\\n</code></pre></div>","autoDesc":true}');export{y as comp,h as data};

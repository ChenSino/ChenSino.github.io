import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-TdR3A7lU.js";const e={},p=t(`<h2 id="一-什么是nexttick" tabindex="-1"><a class="header-anchor" href="#一-什么是nexttick"><span>一，什么是nextTick</span></a></h2><blockquote><p>定义：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p></blockquote><p><strong>为什么vue中会用到nextTick的回调去获取更新后的DOM?</strong></p><pre><code>这是因为vue 实现响应式并**不是数据发生变化之后 DOM 立即变化**，而是按一定的策略进行 DOM 的更新。
</code></pre><p>理解：nextTick()，是将回调函数延迟在下一次dom更新数据后调用，简单的理解是:当你通过数据更新了页面后，想获 取更新后的DOM，就需要使用到nextTick.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;hello&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">&quot;firstBtn&quot;</span> @click<span class="token operator">=</span><span class="token string">&quot;testClick()&quot;</span> ref<span class="token operator">=</span><span class="token string">&quot;aa&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>testMsg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
 
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;HelloWorld&#39;</span><span class="token punctuation">,</span>
  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">testMsg</span><span class="token operator">:</span><span class="token string">&quot;原始值&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token function-variable function">testClick</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">let</span> that<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>
      that<span class="token punctuation">.</span>testMsg<span class="token operator">=</span><span class="token string">&quot;修改后的值&quot;</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>aa<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//that.$refs.aa获取指定DOM，输出：原始值</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 使用this.$nextTick()</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token function-variable function">testClick</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">let</span> that<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>
      that<span class="token punctuation">.</span>testMsg<span class="token operator">=</span><span class="token string">&quot;修改后的值&quot;</span><span class="token punctuation">;</span>
      that<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>aa<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出：修改后的值</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-nexttick应用场景" tabindex="-1"><a class="header-anchor" href="#二-nexttick应用场景"><span>二，nextTick应用场景</span></a></h2><p>​ <strong>1、在Vue生命周期的created()钩子函数进行的DOM操作一定要放在Vue.nextTick()的回调函数中。</strong></p><p>​ 因为在<code>created()</code>钩子函数执行的时候 DOM 其实并未进行任何渲染，而此时进行DOM操作无异于徒劳，所以此 处一定要将DOM操作的js代码放进<code>Vue.nextTick()</code>的回调函数中。与之对应的就是<code>mounted()</code>钩子函数，因为该钩 子函数执行时所有的DOM挂载和渲染都已完成，此时在该钩子函数中进行任何DOM操作都不会有问题 。</p><p><strong>注意: mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，也可以vm.$nextTick 替换掉 mounted.</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function-variable function">mounted</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Code that will run only after the</span>
    <span class="token comment">// entire view has been rendered</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ <strong>2、当项目中你想在改变DOM元素的数据后基于新的dom做点什么,对新DOM一系列的js操作都需要放进Vue.nextTick()的回调函数中；通俗的理解是：更改数据后当你想立即使用js操作新的视图的时候需要使用它.</strong></p><h2 id="三-vue-nexttick-callback-使用原理" tabindex="-1"><a class="header-anchor" href="#三-vue-nexttick-callback-使用原理"><span>三，Vue.nextTick(callback) 使用原理</span></a></h2><p>原因是，Vue是异步执行dom更新的，一旦观察到数据变化，Vue就会开启一个队列，然后把在同一个事件循环 (event loop) 当中观察到数据变化的 <code>watcher</code> 推送进这个队列。如果这个watcher被触发多次，只会被推送到队列一次。这种缓冲行为可以有效的去掉重复数据造成的不必要的计算和DOm操作。而在下一个事件循环时，Vue会清空队列，并进行必要的DOM更新。</p><p>当你设置 <code>vm.someData = &#39;new value&#39;</code>，DOM 并不会马上更新，而是在异步队列被清除，也就是下一个事件循环开始时执行更新时才会进行必要的DOM更新。如果此时你想要根据更新的 DOM 状态去做某些事情，就会出现问题。。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 <code>Vue.nextTick(callback)</code> 。这样回调函数在 DOM 更新完成后就会调用。</p>`,17),o=[p];function c(i,l){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","vue-nextTick.html.vue"]]),d=JSON.parse('{"path":"/frontweb/vue/vue-nextTick.html","title":"关于vue-nextTick","lang":"zh-CN","frontmatter":{"title":"关于vue-nextTick","date":"2022-03-09T00:00:00.000Z","author":"qianxun","category":["vue知识点"],"tag":["必会"],"description":"一，什么是nextTick 定义：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。 为什么vue中会用到nextTick的回调去获取更新后的DOM? 理解：nextTick()，是将回调函数延迟在下一次dom更新数据后调用，简单的理解是:当你通过数据更新了页面后，想获 取更新后的DOM，就需要使用到n...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/frontweb/vue/vue-nextTick.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"关于vue-nextTick"}],["meta",{"property":"og:description","content":"一，什么是nextTick 定义：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。 为什么vue中会用到nextTick的回调去获取更新后的DOM? 理解：nextTick()，是将回调函数延迟在下一次dom更新数据后调用，简单的理解是:当你通过数据更新了页面后，想获 取更新后的DOM，就需要使用到n..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-01T13:56:59.000Z"}],["meta",{"property":"article:author","content":"qianxun"}],["meta",{"property":"article:tag","content":"必会"}],["meta",{"property":"article:published_time","content":"2022-03-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-01T13:56:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"关于vue-nextTick\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-09T00:00:00.000Z\\",\\"dateModified\\":\\"2022-08-01T13:56:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"qianxun\\"}]}"]]},"headers":[{"level":2,"title":"一，什么是nextTick","slug":"一-什么是nexttick","link":"#一-什么是nexttick","children":[]},{"level":2,"title":"二，nextTick应用场景","slug":"二-nexttick应用场景","link":"#二-nexttick应用场景","children":[]},{"level":2,"title":"三，Vue.nextTick(callback) 使用原理","slug":"三-vue-nexttick-callback-使用原理","link":"#三-vue-nexttick-callback-使用原理","children":[]}],"git":{"createdTime":1659362219000,"updatedTime":1659362219000,"contributors":[{"name":"chenkun","email":"462488588@qq.com","commits":1}]},"readingTime":{"minutes":2.82,"words":846},"filePathRelative":"frontweb/vue/vue-nextTick.md","localizedDate":"2022年3月9日","excerpt":"<!--more-->\\n<h2>一，什么是nextTick</h2>\\n<blockquote>\\n<p>定义：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p>\\n</blockquote>\\n<p><strong>为什么vue中会用到nextTick的回调去获取更新后的DOM?</strong></p>\\n<pre><code>这是因为vue 实现响应式并**不是数据发生变化之后 DOM 立即变化**，而是按一定的策略进行 DOM 的更新。\\n</code></pre>\\n<p>理解：nextTick()，是将回调函数延迟在下一次dom更新数据后调用，简单的理解是:当你通过数据更新了页面后，想获\\t取更新后的DOM，就需要使用到nextTick.</p>","autoDesc":true}');export{k as comp,d as data};

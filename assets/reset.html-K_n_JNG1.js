import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as t,e as s}from"./app-COSs6b7v.js";const n={},i=s(`<h3 id="_1、几种reset介绍" tabindex="-1"><a class="header-anchor" href="#_1、几种reset介绍"><span>1、几种reset介绍</span></a></h3><p>git reset 命令用于回退版本，可以指定退回某一次提交的版本。</p><p>git reset 命令语法格式如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token punctuation">[</span>--soft <span class="token operator">|</span> <span class="token parameter variable">--mixed</span> <span class="token operator">|</span> --hard<span class="token punctuation">]</span> <span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>--mixed 为默认，可以不用带该参数，用于重置暂存区的文件，暂存区的文件会回到git add. 之前的状态，并且工作区文件内容保持不变不会丢失</strong>。</p><p>回到指定版本e2c809aa88</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> reset e2c809aa88
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行改命令的效果 简单粗暴的理解为e2c809aa88之后的commit，add过的文件都回到工作区，代码都不会丢失，之前commit,add 状态都没了。</p><p>实例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> reset HEAD^            <span class="token comment"># 回退所有内容到上一个版本  </span>
<span class="token function">git</span> reset HEAD^ hello.php  <span class="token comment"># 回退 hello.php 文件的版本到上一个版本  </span>
<span class="token function">git</span>  reset  052e           <span class="token comment"># 回退到指定版本</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>--soft 参数用于回退到某个版本：保留暂存区和工作区，让仓库恢复到执行git commit之前的状态。</strong>（之前commit过的文件回到暂存区）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--soft</span>  e2c809aa88
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行改命令的效果 为e2c809aa88之后的commit文件都回到<strong>暂存状态</strong>，代码都不会丢失，之前commit的状态状态都没了，暂存区和工作区不变。</p><p><strong>--hard 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有提交信息</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD~3  <span class="token comment"># 回退上上上一个版本  </span>
$ <span class="token function">git</span> reset –hard bae128  <span class="token comment"># 回退到某个版本回退点之前的所有信息。 </span>
$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> origin/master    <span class="token comment"># 将本地的状态回退到和远程的一样 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：谨慎使用 –hard 参数，它会删除回退点之前的所有信息。</strong></p><blockquote><p><strong>HEAD 说明：</strong></p><ul><li><p>HEAD 表示当前版本</p></li><li><p>HEAD^ 上一个版本</p></li><li><p>HEAD^^ 上上一个版本</p></li><li><p>HEAD^^^ 上上上一个版本</p></li><li><p>以此类推...</p></li></ul><p>也可以使用 ～数字表示</p><ul><li>HEAD~0 表示当前版本</li><li>HEAD~1 上一个版本</li><li>HEAD^2 上上一个版本</li><li>HEAD^3 上上上一个版本</li><li>以此类推...</li></ul></blockquote>`,17),o=[i];function r(p,l){return a(),t("div",null,o)}const m=e(n,[["render",r],["__file","reset.html.vue"]]),u=JSON.parse('{"path":"/other/git/reset.html","title":"git reset命令使用","lang":"zh-CN","frontmatter":{"title":"git reset命令使用","date":"2022-07-29T00:00:00.000Z","author":"chenkun","publish":true,"keys":null,"description":"1、几种reset介绍 git reset 命令用于回退版本，可以指定退回某一次提交的版本。 git reset 命令语法格式如下： --mixed 为默认，可以不用带该参数，用于重置暂存区的文件，暂存区的文件会回到git add. 之前的状态，并且工作区文件内容保持不变不会丢失。 回到指定版本e2c809aa88 执行改命令的效果 简单粗暴的理解为e...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/blog/other/git/reset.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"git reset命令使用"}],["meta",{"property":"og:description","content":"1、几种reset介绍 git reset 命令用于回退版本，可以指定退回某一次提交的版本。 git reset 命令语法格式如下： --mixed 为默认，可以不用带该参数，用于重置暂存区的文件，暂存区的文件会回到git add. 之前的状态，并且工作区文件内容保持不变不会丢失。 回到指定版本e2c809aa88 执行改命令的效果 简单粗暴的理解为e..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-22T03:45:12.000Z"}],["meta",{"property":"article:author","content":"chenkun"}],["meta",{"property":"article:published_time","content":"2022-07-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-22T03:45:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"git reset命令使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-07-29T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-22T03:45:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"chenkun\\"}]}"]]},"headers":[{"level":3,"title":"1、几种reset介绍","slug":"_1、几种reset介绍","link":"#_1、几种reset介绍","children":[]}],"git":{"createdTime":1659362219000,"updatedTime":1711079112000,"contributors":[{"name":"ChenSino","email":"462488588@qq.com","commits":1},{"name":"chenkun","email":"462488588@qq.com","commits":1},{"name":"zhu","email":"819508408@qq.com","commits":1},{"name":"zhuxiaofang1234","email":"819508408@qq.com","commits":1}]},"readingTime":{"minutes":1.78,"words":533},"filePathRelative":"other/git/reset.md","localizedDate":"2022年7月29日","excerpt":"<h3>1、几种reset介绍</h3>\\n<p>git reset 命令用于回退版本，可以指定退回某一次提交的版本。</p>\\n<p>git reset 命令语法格式如下：</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">git</span> reset <span class=\\"token punctuation\\">[</span>--soft <span class=\\"token operator\\">|</span> <span class=\\"token parameter variable\\">--mixed</span> <span class=\\"token operator\\">|</span> --hard<span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">[</span>HEAD<span class=\\"token punctuation\\">]</span>\\n</code></pre></div>","autoDesc":true}');export{m as comp,u as data};

import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as a,c,a as e,b as t,d as s,e as r}from"./app-TdR3A7lU.js";const l={},d=r(`<h2 id="_1、背景-问题复现" tabindex="-1"><a class="header-anchor" href="#_1、背景-问题复现"><span>1、背景（问题复现）</span></a></h2><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code>
<span class="token list punctuation">1.</span> 使用idea新建一个springboot项目，引入web和security框架，不做任何配置直接启动web项目
<span class="token list punctuation">2.</span> 随便访问一个接口比如：http://localhost:8080/hello/aa，此时由于接口被security默认保护，会重定向到登录页面（如图一），此时查看sessionid（也就是name为JSESSIONID的cookie）是91E9629F748637154F86CCB44FB2B23D
<span class="token list punctuation">3.</span> 然后输入用户名：user,密码：控制台随机生成的，登录后会重定向到之前访问的接口，但此时
   查看JSESSIONID发现变了，变成87957B71A3CEA4FA375CFFACA6AD425D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230103111735.png" alt="图一"><img src="https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230103111820.png" alt="图二"></p><h2 id="_2、sessionid变化的原因" tabindex="-1"><a class="header-anchor" href="#_2、sessionid变化的原因"><span>2、sessionid变化的原因</span></a></h2>`,4),p={href:"https://docs.spring.io/spring-security/reference/servlet/authentication/session-management.html",target:"_blank",rel:"noopener noreferrer"},u=e("h2",{id:"_3、源码查看",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3、源码查看"},[e("span",null,"3、源码查看")])],-1),h={href:"https://docs.spring.io/spring-security/reference/servlet/architecture.html",target:"_blank",rel:"noopener noreferrer"},m=e("code",null,"UsernamePasswordAuthenticationFilter",-1),g=e("code",null,"this.sessionStrategy.onAuthentication(authenticationResult, request, response);",-1),_=e("p",null,[e("img",{src:"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230103113548.png",alt:"时序图"})],-1),y=e("h2",{id:"_4、基于session的认证",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_4、基于session的认证"},[e("span",null,"4、基于Session的认证")])],-1),S=e("p",null,"了解Security认证原理的应该知道，如果不认证，就直接访问一个受保护的接口，会被重定向到默认登录页面，提示登录，登录成功后会重定向到之前访问的接口。 Security本身是一系列的过滤器在工作，其特有的Filter我们把他叫做SecurityFilter,第一次走到UsernamePasswordAuthenticationFilter时，认证成功 后最终会重定向到之前访问的接口，后面的过滤器不会执行了，我之前调试发现第一次登录执行到 UsernamePasswordAuthenticationFilter后，就直接跳转到接口处理逻辑了，没有继续执行后面的过滤器，跟踪发现UsernamePasswordAuthenticationFilter认证成功后有个方法，吧请求重定向了。",-1),b=e("p",null,[e("img",{src:"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230103161747.png",alt:"20230103161747"})],-1),f=e("p",null,"认证成功会会吧SecurityContext设置到Session中，所以后面在请求时从session获取的认证信息。",-1);function k(v,A){const n=o("ExternalLinkIcon");return a(),c("div",null,[d,e("p",null,[e("a",p,[t("Session Fixation Attack Protection"),s(n)])]),u,e("p",null,[t("Security的基本原理就是过滤器，这里不懂的请查看"),e("a",h,[t("官方文档"),s(n)]),t("。当输入用户名和密码后，最终经过一系列的过滤器会到达"),m,t(",此类会校验 用户名密码，然后校验通过会调用"),g,t("跟踪这里面的代码就会找到答案。")]),_,y,S,b,f])}const w=i(l,[["render",k],["__file","Session.html.vue"]]),C=JSON.parse('{"path":"/java/framework/security/Session.html","title":"Security中的Session","lang":"zh-CN","frontmatter":{"title":"Security中的Session","date":"2023-01-03T00:00:00.000Z","author":"chenkun","keys":null,"category":["Security"],"description":"1、背景（问题复现） 图一 图二 2、sessionid变化的原因 Session Fixation Attack Protection 3、源码查看 Security的基本原理就是过滤器，这里不懂的请查看官方文档。当输入用户名和密码后，最终经过一系列的过滤器会到达UsernamePasswordAuthenticationFilter,此类会校验 用...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/java/framework/security/Session.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"Security中的Session"}],["meta",{"property":"og:description","content":"1、背景（问题复现） 图一 图二 2、sessionid变化的原因 Session Fixation Attack Protection 3、源码查看 Security的基本原理就是过滤器，这里不懂的请查看官方文档。当输入用户名和密码后，最终经过一系列的过滤器会到达UsernamePasswordAuthenticationFilter,此类会校验 用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230103111735.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-22T03:45:12.000Z"}],["meta",{"property":"article:author","content":"chenkun"}],["meta",{"property":"article:published_time","content":"2023-01-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-22T03:45:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Security中的Session\\",\\"image\\":[\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230103111735.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230103111820.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230103113548.png\\",\\"https://afatpig.oss-cn-chengdu.aliyuncs.com/blog/20230103161747.png\\"],\\"datePublished\\":\\"2023-01-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-22T03:45:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"chenkun\\"}]}"]]},"headers":[{"level":2,"title":"1、背景（问题复现）","slug":"_1、背景-问题复现","link":"#_1、背景-问题复现","children":[]},{"level":2,"title":"2、sessionid变化的原因","slug":"_2、sessionid变化的原因","link":"#_2、sessionid变化的原因","children":[]},{"level":2,"title":"3、源码查看","slug":"_3、源码查看","link":"#_3、源码查看","children":[]},{"level":2,"title":"4、基于Session的认证","slug":"_4、基于session的认证","link":"#_4、基于session的认证","children":[]}],"git":{"createdTime":1672717001000,"updatedTime":1711079112000,"contributors":[{"name":"ChenSino","email":"chenxk@sonoscape.net","commits":2},{"name":"ChenSino","email":"462488588@qq.com","commits":1}]},"readingTime":{"minutes":1.7,"words":511},"filePathRelative":"java/framework/security/Session.md","localizedDate":"2023年1月3日","excerpt":"<h2>1、背景（问题复现）</h2>\\n<div class=\\"language-markdown\\" data-ext=\\"md\\" data-title=\\"md\\"><pre class=\\"language-markdown\\"><code>\\n<span class=\\"token list punctuation\\">1.</span> 使用idea新建一个springboot项目，引入web和security框架，不做任何配置直接启动web项目\\n<span class=\\"token list punctuation\\">2.</span> 随便访问一个接口比如：http://localhost:8080/hello/aa，此时由于接口被security默认保护，会重定向到登录页面（如图一），此时查看sessionid（也就是name为JSESSIONID的cookie）是91E9629F748637154F86CCB44FB2B23D\\n<span class=\\"token list punctuation\\">3.</span> 然后输入用户名：user,密码：控制台随机生成的，登录后会重定向到之前访问的接口，但此时\\n   查看JSESSIONID发现变了，变成87957B71A3CEA4FA375CFFACA6AD425D\\n</code></pre></div>","autoDesc":true}');export{w as comp,C as data};

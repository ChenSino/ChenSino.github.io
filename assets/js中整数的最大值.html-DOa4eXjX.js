import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,e as t}from"./app-Cs38sdJl.js";const e={},p=t(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p>今天用Mybatis-plus插入数据，自动产生了一个19位的主键id,后来才发现这是Mybatis-plus3.0后更新的功能，默认使用雪花算法最终会产生一个19位数字。</p><p>然后我在前端项目查询后端接口，后端接口返回的1682195717382606849，而到了前端一直打印的是另一个数字。</p><h2 id="原因-参考gpt回答" tabindex="-1"><a class="header-anchor" href="#原因-参考gpt回答"><span>原因，参考gpt回答</span></a></h2><p>问题1：数据库19位id,在浏览器控制台显示错误?</p><p>如果你的数据库使用的是19位的ID，而浏览器控制台显示错误，可能是因为浏览器默认将超过16位的整数值视为科学计数法表示。在科学计数法表示下，可能会丢失精度或显示不正确。</p><p>为了解决这个问题，可以对ID进行处理，确保在浏览器中正确显示。以下是一种常见的处理方式：</p><p>将ID转换为字符串：将19位的ID转换为字符串形式，在浏览器中显示时可以保留完整的位数。例如，使用Java的String.valueOf方法将ID转换为字符串：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> idString <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将转换后的ID传递给前端：将转换后的ID作为数据传递到前端，确保在浏览器中显示的是字符串形式的完整ID。</p><p>在前端展示时进行格式化：在前端页面中使用适当的方式对19位的ID进行格式化，以便正确显示。例如，可以使用JavaScript的toLocaleString方法将ID格式化为带有千位分隔符的字符串：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> formattedId <span class="token operator">=</span> id<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样，浏览器就能够正确地显示19位的ID。</p><p>请注意，在处理和展示大型数字时，确保使用适当的数据类型和格式，以避免数据丢失或显示错误。</p><p>问题2： js所支持的number最大值?</p><p>根据 ECMAScript 标准（JavaScript 的规范），浏览器所支持的最大数值可以通过 Number.MAX_SAFE_INTEGER 属性获取。这个属性的值是 9007199254740991，也就是 2^53 - 1。</p><p>超过这个值的数值将无法在 JavaScript 中精确表示，可能会导致精度丢失或不可预期的结果。因此，如果你需要处理超过 Number.MAX_SAFE_INTEGER 的大数字，建议使用专门的大数运算库或其他扩展来处理。</p><p>以下是一个示例，展示了 Number.MAX_SAFE_INTEGER 的值：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 9007199254740991</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请注意，不同的浏览器可能会在处理超出 Number.MAX_SAFE_INTEGER 的大数字时表现不同，因此建议在开发过程中仔细考虑数字范围和精度的问题，并结合实际情况选择合适的处理方式。</p><h2 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法"><span>解决方法</span></a></h2><ol><li>不要用这么大的数字主键</li><li>转化为字符串</li><li>序列化处理【推荐】</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Jackson2ObjectMapperBuilderCustomizer</span> <span class="token function">customizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>builder<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            builder<span class="token punctuation">.</span><span class="token function">serializerByType</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ToStringSerializer</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),i=[p];function o(c,l){return n(),s("div",null,i)}const d=a(e,[["render",o],["__file","js中整数的最大值.html.vue"]]),m=JSON.parse('{"path":"/frontweb/es6/js%E4%B8%AD%E6%95%B4%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC.html","title":"js能识别最大的正整数","lang":"zh-CN","frontmatter":{"title":"js能识别最大的正整数","date":"2023-07-21T00:00:00.000Z","isOriginal":true,"description":"背景 今天用Mybatis-plus插入数据，自动产生了一个19位的主键id,后来才发现这是Mybatis-plus3.0后更新的功能，默认使用雪花算法最终会产生一个19位数字。 然后我在前端项目查询后端接口，后端接口返回的1682195717382606849，而到了前端一直打印的是另一个数字。 原因，参考gpt回答 问题1：数据库19位id,在浏览...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/frontweb/es6/js%E4%B8%AD%E6%95%B4%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"js能识别最大的正整数"}],["meta",{"property":"og:description","content":"背景 今天用Mybatis-plus插入数据，自动产生了一个19位的主键id,后来才发现这是Mybatis-plus3.0后更新的功能，默认使用雪花算法最终会产生一个19位数字。 然后我在前端项目查询后端接口，后端接口返回的1682195717382606849，而到了前端一直打印的是另一个数字。 原因，参考gpt回答 问题1：数据库19位id,在浏览..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-03T02:39:27.000Z"}],["meta",{"property":"article:author","content":"ChenSino"}],["meta",{"property":"article:published_time","content":"2023-07-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-03T02:39:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"js能识别最大的正整数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-21T00:00:00.000Z\\",\\"dateModified\\":\\"2023-08-03T02:39:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChenSino\\",\\"url\\":\\"https://ChenSino.github.io\\"}]}"]]},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"原因，参考gpt回答","slug":"原因-参考gpt回答","link":"#原因-参考gpt回答","children":[]},{"level":2,"title":"解决方法","slug":"解决方法","link":"#解决方法","children":[]}],"git":{"createdTime":1691030367000,"updatedTime":1691030367000,"contributors":[{"name":"ChenSino","email":"462488588@qq.com","commits":1}]},"readingTime":{"minutes":2.49,"words":746},"filePathRelative":"frontweb/es6/js中整数的最大值.md","localizedDate":"2023年7月21日","excerpt":"<h2>背景</h2>\\n<p>今天用Mybatis-plus插入数据，自动产生了一个19位的主键id,后来才发现这是Mybatis-plus3.0后更新的功能，默认使用雪花算法最终会产生一个19位数字。</p>\\n<p>然后我在前端项目查询后端接口，后端接口返回的1682195717382606849，而到了前端一直打印的是另一个数字。</p>\\n<h2>原因，参考gpt回答</h2>\\n<p>问题1：数据库19位id,在浏览器控制台显示错误?</p>\\n<p>如果你的数据库使用的是19位的ID，而浏览器控制台显示错误，可能是因为浏览器默认将超过16位的整数值视为科学计数法表示。在科学计数法表示下，可能会丢失精度或显示不正确。</p>","autoDesc":true}');export{d as comp,m as data};

import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-COSs6b7v.js";const t={},p=e(`<div class="hint-container caution"><p class="hint-container-title">注意！！!</p><p>只有在mysql8.0之后才有递归，5.7及之前是不支持的</p></div><h2 id="_1、递归下钻" tabindex="-1"><a class="header-anchor" href="#_1、递归下钻"><span>1、递归下钻</span></a></h2><p>MySQL中的递归查询通常用于处理树形结构数据，如组织架构、文件目录、级联地址、多级菜单等。</p><h2 id="_2、示例" tabindex="-1"><a class="header-anchor" href="#_2、示例"><span>2、示例</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">WITH</span> RECURSIVE cte <span class="token punctuation">(</span>id<span class="token punctuation">,</span> parent_id<span class="token punctuation">,</span> <span class="token keyword">level</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token punctuation">(</span>
  <span class="token comment">-- 初始查询</span>
  <span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> parent_id<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">FROM</span> your_table <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token operator">&lt;</span>your <span class="token keyword">starting</span> id<span class="token operator">&gt;</span>

  <span class="token keyword">UNION</span> <span class="token keyword">ALL</span>

  <span class="token comment">-- 递归查询</span>
  <span class="token keyword">SELECT</span> t<span class="token punctuation">.</span>id<span class="token punctuation">,</span> t<span class="token punctuation">.</span>parent_id<span class="token punctuation">,</span> cte<span class="token punctuation">.</span><span class="token keyword">level</span> <span class="token operator">+</span> <span class="token number">1</span>
  <span class="token keyword">FROM</span> your_table <span class="token keyword">AS</span> t
  <span class="token keyword">JOIN</span> cte <span class="token keyword">ON</span> t<span class="token punctuation">.</span>parent_id <span class="token operator">=</span> cte<span class="token punctuation">.</span>id
<span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> cte<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code><span class="token list punctuation">1.</span> 在上述查询中，WITH RECURSIVE定义了一个递归的通用表表达式。在这个表达式中，我们定义了一个递归查询，它首先从给定的起始点开始，然后逐步向下查找树形结构中所有的节点。
<span class="token list punctuation">2.</span> 关键的地方在于，这个查询有两个SELECT语句，第一个SELECT是初始查询，它将从起点开始。第二个SELECT是递归查询，它将连接到上一个查询的结果。
<span class="token list punctuation">3.</span> 在递归查询中，我们使用JOIN将另一个实例的表连接到我们正在创建的表中，然后根据两个表之间共享的信息递归向下查找树形结构中的每个节点。这就是递归下钻查询的核心部分。
<span class="token list punctuation">4.</span> 最后的SELECT将返回递归查询的结果。
<span class="token list punctuation">5.</span> 注意递归中参数个数要和select个数一致
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),o=[p];function c(l,i){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","Recurse.html.vue"]]),k=JSON.parse('{"path":"/other/database/Recurse.html","title":"递归下钻","lang":"zh-CN","frontmatter":{"title":"递归下钻","date":"2023-04-06T00:00:00.000Z","isOriginal":true,"description":"注意！！! 只有在mysql8.0之后才有递归，5.7及之前是不支持的 1、递归下钻 MySQL中的递归查询通常用于处理树形结构数据，如组织架构、文件目录、级联地址、多级菜单等。 2、示例","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/blog/other/database/Recurse.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"递归下钻"}],["meta",{"property":"og:description","content":"注意！！! 只有在mysql8.0之后才有递归，5.7及之前是不支持的 1、递归下钻 MySQL中的递归查询通常用于处理树形结构数据，如组织架构、文件目录、级联地址、多级菜单等。 2、示例"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-22T03:45:12.000Z"}],["meta",{"property":"article:author","content":"ChenSino"}],["meta",{"property":"article:published_time","content":"2023-04-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-22T03:45:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"递归下钻\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-22T03:45:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChenSino\\",\\"url\\":\\"https://ChenSino.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1、递归下钻","slug":"_1、递归下钻","link":"#_1、递归下钻","children":[]},{"level":2,"title":"2、示例","slug":"_2、示例","link":"#_2、示例","children":[]}],"git":{"createdTime":1680776233000,"updatedTime":1711079112000,"contributors":[{"name":"chenxk","email":"chenxk@sonoscape.net","commits":2},{"name":"ChenSino","email":"462488588@qq.com","commits":1}]},"readingTime":{"minutes":1.2,"words":360},"filePathRelative":"other/database/Recurse.md","localizedDate":"2023年4月6日","excerpt":"<div class=\\"hint-container caution\\">\\n<p class=\\"hint-container-title\\">注意！！!</p>\\n<p>只有在mysql8.0之后才有递归，5.7及之前是不支持的</p>\\n</div>\\n<h2>1、递归下钻</h2>\\n<p>MySQL中的递归查询通常用于处理树形结构数据，如组织架构、文件目录、级联地址、多级菜单等。</p>\\n<h2>2、示例</h2>\\n<div class=\\"language-sql\\" data-ext=\\"sql\\" data-title=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token keyword\\">WITH</span> RECURSIVE cte <span class=\\"token punctuation\\">(</span>id<span class=\\"token punctuation\\">,</span> parent_id<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">level</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">AS</span> <span class=\\"token punctuation\\">(</span>\\n  <span class=\\"token comment\\">-- 初始查询</span>\\n  <span class=\\"token keyword\\">SELECT</span> id<span class=\\"token punctuation\\">,</span> parent_id<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span> <span class=\\"token keyword\\">FROM</span> your_table <span class=\\"token keyword\\">WHERE</span> id <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">&lt;</span>your <span class=\\"token keyword\\">starting</span> id<span class=\\"token operator\\">&gt;</span>\\n\\n  <span class=\\"token keyword\\">UNION</span> <span class=\\"token keyword\\">ALL</span>\\n\\n  <span class=\\"token comment\\">-- 递归查询</span>\\n  <span class=\\"token keyword\\">SELECT</span> t<span class=\\"token punctuation\\">.</span>id<span class=\\"token punctuation\\">,</span> t<span class=\\"token punctuation\\">.</span>parent_id<span class=\\"token punctuation\\">,</span> cte<span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">level</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span>\\n  <span class=\\"token keyword\\">FROM</span> your_table <span class=\\"token keyword\\">AS</span> t\\n  <span class=\\"token keyword\\">JOIN</span> cte <span class=\\"token keyword\\">ON</span> t<span class=\\"token punctuation\\">.</span>parent_id <span class=\\"token operator\\">=</span> cte<span class=\\"token punctuation\\">.</span>id\\n<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">SELECT</span> <span class=\\"token operator\\">*</span> <span class=\\"token keyword\\">FROM</span> cte<span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{u as comp,k as data};

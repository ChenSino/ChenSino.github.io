import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-Cf-knFG-.js";const t={},o=e(`<h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h2><p>装饰者模式是一种常用的设计模式，它动态地给一个对象添加一些额外的职责1。装饰者模式可以在不改变一个对象本身功能的基础上给对象增加额外的新行为2。</p><h2 id="框架中使用" tabindex="-1"><a class="header-anchor" href="#框架中使用"><span>框架中使用</span></a></h2><p>mybatis中：</p><p>打开sqlSession时，会创建Executor，最终会进入<code>org.apache.ibatis.session.Configuration#newExecutor(org.apache.ibatis.transaction.Transaction, org.apache.ibatis.session.ExecutorType)</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">newExecutor</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span> transaction<span class="token punctuation">,</span> <span class="token class-name">ExecutorType</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    executorType <span class="token operator">=</span> executorType <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> defaultExecutorType <span class="token operator">:</span> executorType<span class="token punctuation">;</span>
    <span class="token class-name">Executor</span> executor<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ExecutorType</span><span class="token punctuation">.</span><span class="token constant">BATCH</span> <span class="token operator">==</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BatchExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ExecutorType</span><span class="token punctuation">.</span><span class="token constant">REUSE</span> <span class="token operator">==</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReuseExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachingExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Executor</span><span class="token punctuation">)</span> interceptorChain<span class="token punctuation">.</span><span class="token function">pluginAll</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到<code>CachingExecutor</code>里面包装了executor(默认是SimpleExecutor类型)，只不过是在不改变原对象基础上加了缓存功能，<code>CachingExecutor</code>源码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CachingExecutor</span> <span class="token keyword">implements</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Executor</span> delegate<span class="token punctuation">;</span>
  <span class="token comment">//增加了缓存管理</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TransactionalCacheManager</span> tcm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionalCacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">CachingExecutor</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> delegate<span class="token punctuation">;</span>
    <span class="token comment">//从方法命名也可看出这是一个装饰者模式，wrapper,decorator等都可以翻译为装饰</span>
    delegate<span class="token punctuation">.</span><span class="token function">setExecutorWrapper</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">Transaction</span> <span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> delegate<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//略……</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),p=[o];function c(i,l){return s(),a("div",null,p)}const d=n(t,[["render",c],["__file","装饰模式.html.vue"]]),k=JSON.parse('{"path":"/designpattern/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F.html","title":"Decorator Design Pattern","lang":"zh-CN","frontmatter":{"title":"Decorator Design Pattern","date":"2023-06-05T00:00:00.000Z","isOriginal":true,"category":["设计模式"],"description":"定义 装饰者模式是一种常用的设计模式，它动态地给一个对象添加一些额外的职责1。装饰者模式可以在不改变一个对象本身功能的基础上给对象增加额外的新行为2。 框架中使用 mybatis中： 打开sqlSession时，会创建Executor，最终会进入org.apache.ibatis.session.Configuration#newExecutor(or...","head":[["meta",{"property":"og:url","content":"https://ChenSino.github.io/designpattern/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"ChenSino"}],["meta",{"property":"og:title","content":"Decorator Design Pattern"}],["meta",{"property":"og:description","content":"定义 装饰者模式是一种常用的设计模式，它动态地给一个对象添加一些额外的职责1。装饰者模式可以在不改变一个对象本身功能的基础上给对象增加额外的新行为2。 框架中使用 mybatis中： 打开sqlSession时，会创建Executor，最终会进入org.apache.ibatis.session.Configuration#newExecutor(or..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-22T03:45:12.000Z"}],["meta",{"property":"article:author","content":"ChenSino"}],["meta",{"property":"article:published_time","content":"2023-06-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-22T03:45:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Decorator Design Pattern\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-22T03:45:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ChenSino\\",\\"url\\":\\"https://ChenSino.github.io\\"}]}"]]},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"框架中使用","slug":"框架中使用","link":"#框架中使用","children":[]}],"git":{"createdTime":1685957954000,"updatedTime":1711079112000,"contributors":[{"name":"ChenSino","email":"462488588@qq.com","commits":2}]},"readingTime":{"minutes":0.9,"words":270},"filePathRelative":"designpattern/装饰模式.md","localizedDate":"2023年6月5日","excerpt":"<h2>定义</h2>\\n<p>装饰者模式是一种常用的设计模式，它动态地给一个对象添加一些额外的职责1。装饰者模式可以在不改变一个对象本身功能的基础上给对象增加额外的新行为2。</p>\\n<h2>框架中使用</h2>\\n<p>mybatis中：</p>\\n<p>打开sqlSession时，会创建Executor，最终会进入<code>org.apache.ibatis.session.Configuration#newExecutor(org.apache.ibatis.transaction.Transaction, org.apache.ibatis.session.ExecutorType)</code></p>","autoDesc":true}');export{d as comp,k as data};
